%!PS-Adobe-3.1 EPSF-3.0
%ADO_DSC_Encoding: Windows Cyrillic
%%Title: 2008.i605.015.P.m005.c20.freelance people work set-12.eps
%%Creator: Adobe Illustrator(R) 19.2
%%For: MSI
%%CreationDate: 2/19/2021
%%BoundingBox: 0 0 500 450
%%HiResBoundingBox: 0 0 500 450
%%CropBox: 0 0 500 450
%%LanguageLevel: 2
%%DocumentData: Clean7Bit
%ADOBeginClientInjection: DocumentHeader "AI11EPS"
%%AI8_CreatorVersion: 19.2.1%AI9_PrintingDataBegin%ADO_BuildNumber: Adobe Illustrator(R) 19.2.1 x147 R agm 4.7740 ct 5.3840%ADO_ContainsXMP: MainFirst
%ADOEndClientInjection: DocumentHeader "AI11EPS"
%%Pages: 1
%%DocumentNeededResources: 
%%DocumentSuppliedResources: procset Adobe_AGM_Image 1.0 0
%%+ procset Adobe_CoolType_Utility_T42 1.0 0
%%+ procset Adobe_CoolType_Utility_MAKEOCF 1.23 0
%%+ procset Adobe_CoolType_Core 2.31 0
%%+ procset Adobe_AGM_Core 2.0 0
%%+ procset Adobe_AGM_Utils 1.0 0
%%DocumentFonts: 
%%DocumentNeededFonts: 
%%DocumentNeededFeatures: 
%%DocumentSuppliedFeatures: 
%%DocumentCustomColors: 
%%CMYKCustomColor: 
%%RGBCustomColor: 
%%EndComments
         
                                                                                                                                                                                                                                                         
                                                                                                                                                                                                                                                         
                                                                                                                                                                                                                                                         
                                                                                                                                                                                                                                                         
                                                                                                                                                                                                                                                         
                                                                                                                                                                                                                                                         
%%BeginDefaults
%%ViewingOrientation: 1 0 0 1
%%EndDefaults
%%BeginProlog
%%BeginResource: procset Adobe_AGM_Utils 1.0 0
%%Version: 1.0 0
%%Copyright: Copyright(C)2000-2006 Adobe Systems, Inc. All Rights Reserved.
systemdict/setpacking known
{currentpacking	true setpacking}if
userdict/Adobe_AGM_Utils 75 dict dup begin put
/bdf
{bind def}bind def
/nd{null def}bdf
/xdf
{exch def}bdf
/ldf 
{load def}bdf
/ddf
{put}bdf	
/xddf
{3 -1 roll put}bdf	
/xpt
{exch put}bdf
/ndf
{
	exch dup where{
		pop pop pop
	}{
		xdf
	}ifelse
}def
/cdndf
{
	exch dup currentdict exch known{
		pop pop
	}{
		exch def
	}ifelse
}def
/gx
{get exec}bdf
/ps_level
	/languagelevel where{
		pop systemdict/languagelevel gx
	}{
		1
	}ifelse
def
/level2 
	ps_level 2 ge
def
/level3 
	ps_level 3 ge
def
/ps_version
	{version cvr}stopped{-1}if
def
/set_gvm
{currentglobal exch setglobal}bdf
/reset_gvm
{setglobal}bdf
/makereadonlyarray
{
	/packedarray where{pop packedarray
	}{
		array astore readonly}ifelse
}bdf
/map_reserved_ink_name
{
	dup type/stringtype eq{
		dup/Red eq{
			pop(_Red_)
		}{
			dup/Green eq{
				pop(_Green_)
			}{
				dup/Blue eq{
					pop(_Blue_)
				}{
					dup()cvn eq{
						pop(Process)
					}if
				}ifelse
			}ifelse
		}ifelse
	}if
}bdf
/AGMUTIL_GSTATE 22 dict def
/get_gstate
{
	AGMUTIL_GSTATE begin
	/AGMUTIL_GSTATE_clr_spc currentcolorspace def
	/AGMUTIL_GSTATE_clr_indx 0 def
	/AGMUTIL_GSTATE_clr_comps 12 array def
	mark currentcolor counttomark
		{AGMUTIL_GSTATE_clr_comps AGMUTIL_GSTATE_clr_indx 3 -1 roll put
		/AGMUTIL_GSTATE_clr_indx AGMUTIL_GSTATE_clr_indx 1 add def}repeat pop
	/AGMUTIL_GSTATE_fnt rootfont def
	/AGMUTIL_GSTATE_lw currentlinewidth def
	/AGMUTIL_GSTATE_lc currentlinecap def
	/AGMUTIL_GSTATE_lj currentlinejoin def
	/AGMUTIL_GSTATE_ml currentmiterlimit def
	currentdash/AGMUTIL_GSTATE_do xdf/AGMUTIL_GSTATE_da xdf
	/AGMUTIL_GSTATE_sa currentstrokeadjust def
	/AGMUTIL_GSTATE_clr_rnd currentcolorrendering def
	/AGMUTIL_GSTATE_op currentoverprint def
	/AGMUTIL_GSTATE_bg currentblackgeneration cvlit def
	/AGMUTIL_GSTATE_ucr currentundercolorremoval cvlit def
	currentcolortransfer cvlit/AGMUTIL_GSTATE_gy_xfer xdf cvlit/AGMUTIL_GSTATE_b_xfer xdf
		cvlit/AGMUTIL_GSTATE_g_xfer xdf cvlit/AGMUTIL_GSTATE_r_xfer xdf
	/AGMUTIL_GSTATE_ht currenthalftone def
	/AGMUTIL_GSTATE_flt currentflat def
	end
}def
/set_gstate
{
	AGMUTIL_GSTATE begin
	AGMUTIL_GSTATE_clr_spc setcolorspace
	AGMUTIL_GSTATE_clr_indx{AGMUTIL_GSTATE_clr_comps AGMUTIL_GSTATE_clr_indx 1 sub get
	/AGMUTIL_GSTATE_clr_indx AGMUTIL_GSTATE_clr_indx 1 sub def}repeat setcolor
	AGMUTIL_GSTATE_fnt setfont
	AGMUTIL_GSTATE_lw setlinewidth
	AGMUTIL_GSTATE_lc setlinecap
	AGMUTIL_GSTATE_lj setlinejoin
	AGMUTIL_GSTATE_ml setmiterlimit
	AGMUTIL_GSTATE_da AGMUTIL_GSTATE_do setdash
	AGMUTIL_GSTATE_sa setstrokeadjust
	AGMUTIL_GSTATE_clr_rnd setcolorrendering
	AGMUTIL_GSTATE_op setoverprint
	AGMUTIL_GSTATE_bg cvx setblackgeneration
	AGMUTIL_GSTATE_ucr cvx setundercolorremoval
	AGMUTIL_GSTATE_r_xfer cvx AGMUTIL_GSTATE_g_xfer cvx AGMUTIL_GSTATE_b_xfer cvx
		AGMUTIL_GSTATE_gy_xfer cvx setcolortransfer
	AGMUTIL_GSTATE_ht/HalftoneType get dup 9 eq exch 100 eq or
		{
		currenthalftone/HalftoneType get AGMUTIL_GSTATE_ht/HalftoneType get ne
			{
			 mark AGMUTIL_GSTATE_ht{sethalftone}stopped cleartomark
			}if
		}{
		AGMUTIL_GSTATE_ht sethalftone
		}ifelse
	AGMUTIL_GSTATE_flt setflat
	end
}def
/get_gstate_and_matrix
{
	AGMUTIL_GSTATE begin
	/AGMUTIL_GSTATE_ctm matrix currentmatrix def
	end
	get_gstate
}def
/set_gstate_and_matrix
{
	set_gstate
	AGMUTIL_GSTATE begin
	AGMUTIL_GSTATE_ctm setmatrix
	end
}def
/AGMUTIL_str256 256 string def
/AGMUTIL_src256 256 string def
/AGMUTIL_dst64 64 string def
/AGMUTIL_srcLen nd
/AGMUTIL_ndx nd
/AGMUTIL_cpd nd
/capture_cpd{
	//Adobe_AGM_Utils/AGMUTIL_cpd currentpagedevice ddf
}def
/thold_halftone
{
	level3
		{sethalftone currenthalftone}
		{
			dup/HalftoneType get 3 eq
			{
				sethalftone currenthalftone
			}{
				begin
				Width Height mul{
					Thresholds read{pop}if
				}repeat
				end
				currenthalftone
			}ifelse
		}ifelse
}def 
/rdcmntline
{
	currentfile AGMUTIL_str256 readline pop
	(%)anchorsearch{pop}if
}bdf
/filter_cmyk
{	
	dup type/filetype ne{
		exch()/SubFileDecode filter
	}{
		exch pop
	}
	ifelse
	[
	exch
	{
		AGMUTIL_src256 readstring pop
		dup length/AGMUTIL_srcLen exch def
		/AGMUTIL_ndx 0 def
		AGMCORE_plate_ndx 4 AGMUTIL_srcLen 1 sub{
			1 index exch get
			AGMUTIL_dst64 AGMUTIL_ndx 3 -1 roll put
			/AGMUTIL_ndx AGMUTIL_ndx 1 add def
		}for
		pop
		AGMUTIL_dst64 0 AGMUTIL_ndx getinterval
	}
	bind
	/exec cvx
	]cvx
}bdf
/filter_indexed_devn
{
	cvi Names length mul names_index add Lookup exch get
}bdf
/filter_devn
{	
	4 dict begin
	/srcStr xdf
	/dstStr xdf
	dup type/filetype ne{
		0()/SubFileDecode filter
	}if
	[
	exch
		[
			/devicen_colorspace_dict/AGMCORE_gget cvx/begin cvx
			currentdict/srcStr get/readstring cvx/pop cvx
			/dup cvx/length cvx 0/gt cvx[
				Adobe_AGM_Utils/AGMUTIL_ndx 0/ddf cvx
				names_index Names length currentdict/srcStr get length 1 sub{
					1/index cvx/exch cvx/get cvx
					currentdict/dstStr get/AGMUTIL_ndx/load cvx 3 -1/roll cvx/put cvx
					Adobe_AGM_Utils/AGMUTIL_ndx/AGMUTIL_ndx/load cvx 1/add cvx/ddf cvx
				}for
				currentdict/dstStr get 0/AGMUTIL_ndx/load cvx/getinterval cvx
			]cvx/if cvx
			/end cvx
		]cvx
		bind
		/exec cvx
	]cvx
	end
}bdf
/AGMUTIL_imagefile nd
/read_image_file
{
	AGMUTIL_imagefile 0 setfileposition
	10 dict begin
	/imageDict xdf
	/imbufLen Width BitsPerComponent mul 7 add 8 idiv def
	/imbufIdx 0 def
	/origDataSource imageDict/DataSource get def
	/origMultipleDataSources imageDict/MultipleDataSources get def
	/origDecode imageDict/Decode get def
	/dstDataStr imageDict/Width get colorSpaceElemCnt mul string def
	imageDict/MultipleDataSources known{MultipleDataSources}{false}ifelse
	{
		/imbufCnt imageDict/DataSource get length def
		/imbufs imbufCnt array def
		0 1 imbufCnt 1 sub{
			/imbufIdx xdf
			imbufs imbufIdx imbufLen string put
			imageDict/DataSource get imbufIdx[AGMUTIL_imagefile imbufs imbufIdx get/readstring cvx/pop cvx]cvx put
		}for
		DeviceN_PS2{
			imageDict begin
		 	/DataSource[DataSource/devn_sep_datasource cvx]cvx def
			/MultipleDataSources false def
			/Decode[0 1]def
			end
		}if
	}{
		/imbuf imbufLen string def
		Indexed_DeviceN level3 not and DeviceN_NoneName or{
			/srcDataStrs[imageDict begin
				currentdict/MultipleDataSources known{MultipleDataSources{DataSource length}{1}ifelse}{1}ifelse
				{
					Width Decode length 2 div mul cvi string
				}repeat
				end]def		
			imageDict begin
		 	/DataSource[AGMUTIL_imagefile Decode BitsPerComponent false 1/filter_indexed_devn load dstDataStr srcDataStrs devn_alt_datasource/exec cvx]cvx def
			/Decode[0 1]def
			end
		}{
			imageDict/DataSource[1 string dup 0 AGMUTIL_imagefile Decode length 2 idiv string/readstring cvx/pop cvx names_index/get cvx/put cvx]cvx put
			imageDict/Decode[0 1]put
		}ifelse
	}ifelse
	imageDict exch
	load exec
	imageDict/DataSource origDataSource put
	imageDict/MultipleDataSources origMultipleDataSources put
	imageDict/Decode origDecode put	
	end
}bdf
/write_image_file
{
	begin
	{(AGMUTIL_imagefile)(w+)file}stopped{
		false
	}{
		Adobe_AGM_Utils/AGMUTIL_imagefile xddf 
		2 dict begin
		/imbufLen Width BitsPerComponent mul 7 add 8 idiv def
		MultipleDataSources{DataSource 0 get}{DataSource}ifelse type/filetype eq{
			/imbuf imbufLen string def
		}if
		1 1 Height MultipleDataSources not{Decode length 2 idiv mul}if{
			pop
			MultipleDataSources{
			 	0 1 DataSource length 1 sub{
					DataSource type dup
					/arraytype eq{
						pop DataSource exch gx
					}{
						/filetype eq{
							DataSource exch get imbuf readstring pop
						}{
							DataSource exch get
						}ifelse
					}ifelse
					AGMUTIL_imagefile exch writestring
				}for
			}{
				DataSource type dup
				/arraytype eq{
					pop DataSource exec
				}{
					/filetype eq{
						DataSource imbuf readstring pop
					}{
						DataSource
					}ifelse
				}ifelse
				AGMUTIL_imagefile exch writestring
			}ifelse
		}for
		end
		true
	}ifelse
	end
}bdf
/close_image_file
{
	AGMUTIL_imagefile closefile(AGMUTIL_imagefile)deletefile
}def
statusdict/product known userdict/AGMP_current_show known not and{
	/pstr statusdict/product get def
	pstr(HP LaserJet 2200)eq 	
	pstr(HP LaserJet 4000 Series)eq or
	pstr(HP LaserJet 4050 Series )eq or
	pstr(HP LaserJet 8000 Series)eq or
	pstr(HP LaserJet 8100 Series)eq or
	pstr(HP LaserJet 8150 Series)eq or
	pstr(HP LaserJet 5000 Series)eq or
	pstr(HP LaserJet 5100 Series)eq or
	pstr(HP Color LaserJet 4500)eq or
	pstr(HP Color LaserJet 4600)eq or
	pstr(HP LaserJet 5Si)eq or
	pstr(HP LaserJet 1200 Series)eq or
	pstr(HP LaserJet 1300 Series)eq or
	pstr(HP LaserJet 4100 Series)eq or 
	{
 		userdict/AGMP_current_show/show load put
		userdict/show{
		 currentcolorspace 0 get
		 /Pattern eq
		 {false charpath f}
		 {AGMP_current_show}ifelse
		}put
	}if
	currentdict/pstr undef
}if
/consumeimagedata
{
	begin
	AGMIMG_init_common
	currentdict/MultipleDataSources known not
		{/MultipleDataSources false def}if
	MultipleDataSources
		{
		DataSource 0 get type
		dup/filetype eq
			{
			1 dict begin
			/flushbuffer Width cvi string def
			1 1 Height cvi
				{
				pop
				0 1 DataSource length 1 sub
					{
					DataSource exch get
					flushbuffer readstring pop pop
					}for
				}for
			end
			}if
		dup/arraytype eq exch/packedarraytype eq or DataSource 0 get xcheck and
			{
			Width Height mul cvi
				{
				0 1 DataSource length 1 sub
					{dup DataSource exch gx length exch 0 ne{pop}if}for
				dup 0 eq
					{pop exit}if
				sub dup 0 le
					{exit}if
				}loop
			pop
			}if		
		}
		{
		/DataSource load type 
		dup/filetype eq
			{
			1 dict begin
			/flushbuffer Width Decode length 2 idiv mul cvi string def
			1 1 Height{pop DataSource flushbuffer readstring pop pop}for
			end
			}if
		dup/arraytype eq exch/packedarraytype eq or/DataSource load xcheck and
			{
				Height Width BitsPerComponent mul 8 BitsPerComponent sub add 8 idiv Decode length 2 idiv mul mul
					{
					DataSource length dup 0 eq
						{pop exit}if
					sub dup 0 le
						{exit}if
					}loop
				pop
			}if
		}ifelse
	end
}bdf
/addprocs
{
	 2{/exec load}repeat
	 3 1 roll
	 [5 1 roll]bind cvx
}def
/modify_halftone_xfer
{
	currenthalftone dup length dict copy begin
	 currentdict 2 index known{
	 	1 index load dup length dict copy begin
		currentdict/TransferFunction known{
			/TransferFunction load
		}{
			currenttransfer
		}ifelse
		 addprocs/TransferFunction xdf 
		 currentdict end def
		currentdict end sethalftone
	}{
		currentdict/TransferFunction known{
			/TransferFunction load 
		}{
			currenttransfer
		}ifelse
		addprocs/TransferFunction xdf
		currentdict end sethalftone		
		pop
	}ifelse
}def
/clonearray
{
	dup xcheck exch
	dup length array exch
	Adobe_AGM_Core/AGMCORE_tmp -1 ddf 
	{
	Adobe_AGM_Core/AGMCORE_tmp 2 copy get 1 add ddf 
	dup type/dicttype eq
		{
			Adobe_AGM_Core/AGMCORE_tmp get
			exch
			clonedict
			Adobe_AGM_Core/AGMCORE_tmp 4 -1 roll ddf 
		}if
	dup type/arraytype eq
		{
			Adobe_AGM_Core/AGMCORE_tmp get exch
			clonearray
			Adobe_AGM_Core/AGMCORE_tmp 4 -1 roll ddf 
		}if
	exch dup
	Adobe_AGM_Core/AGMCORE_tmp get 4 -1 roll put
	}forall
	exch{cvx}if
}bdf
/clonedict
{
	dup length dict
	begin
	{
		dup type/dicttype eq
			{clonedict}if
		dup type/arraytype eq
			{clonearray}if
		def
	}forall
	currentdict
	end
}bdf
/DeviceN_PS2
{
	/currentcolorspace AGMCORE_gget 0 get/DeviceN eq level3 not and
}bdf
/Indexed_DeviceN
{
	/indexed_colorspace_dict AGMCORE_gget dup null ne{
		dup/CSDBase known{
			/CSDBase get/CSD get_res/Names known 
		}{
			pop false
		}ifelse
	}{
		pop false
	}ifelse
}bdf
/DeviceN_NoneName
{	
	/Names where{
		pop
		false Names
		{
			(None)eq or
		}forall
	}{
		false
	}ifelse
}bdf
/DeviceN_PS2_inRip_seps
{
	/AGMCORE_in_rip_sep where
	{
		pop dup type dup/arraytype eq exch/packedarraytype eq or
		{
			dup 0 get/DeviceN eq level3 not and AGMCORE_in_rip_sep and
			{
				/currentcolorspace exch AGMCORE_gput
				false
			}{
				true
			}ifelse
		}{
			true
		}ifelse
	}{
		true
	}ifelse
}bdf
/base_colorspace_type
{
	dup type/arraytype eq{0 get}if
}bdf
/currentdistillerparams where{pop currentdistillerparams/CoreDistVersion get 5000 lt}{true}ifelse
{
	/pdfmark_5{cleartomark}bind def
}{
	/pdfmark_5{pdfmark}bind def
}ifelse
/ReadBypdfmark_5
{
	currentfile exch 0 exch/SubFileDecode filter
	/currentdistillerparams where 
	{pop currentdistillerparams/CoreDistVersion get 5000 lt}{true}ifelse
	{flushfile cleartomark}
	{/PUT pdfmark}ifelse 	
}bdf
/ReadBypdfmark_5_string
{
	2 dict begin
	/makerString exch def string/tmpString exch def
	{
		currentfile tmpString readline not{pop exit}if
		makerString anchorsearch
		{
			pop pop cleartomark exit
		}{
			3 copy/PUT pdfmark_5 pop 2 copy(\n)/PUT pdfmark_5
		}ifelse
	}loop
	end
}bdf
/xpdfm
{
	{
		dup 0 get/Label eq
		{
			aload length[exch 1 add 1 roll/PAGELABEL
		}{
			aload pop
			[{ThisPage}<<5 -2 roll>>/PUT
		}ifelse
		pdfmark_5
	}forall
}bdf
/lmt{
	dup 2 index le{exch}if pop dup 2 index ge{exch}if pop
}bdf
/int{
	dup 2 index sub 3 index 5 index sub div 6 -2 roll sub mul exch pop add exch pop
}bdf
/ds{
	Adobe_AGM_Utils begin
}bdf
/dt{
	currentdict Adobe_AGM_Utils eq{
		end
	}if
}bdf
systemdict/setpacking known
{setpacking}if
%%EndResource
%%BeginResource: procset Adobe_AGM_Core 2.0 0
%%Version: 2.0 0
%%Copyright: Copyright(C)1997-2007 Adobe Systems, Inc. All Rights Reserved.
systemdict/setpacking known
{
	currentpacking
	true setpacking
}if
userdict/Adobe_AGM_Core 209 dict dup begin put
/Adobe_AGM_Core_Id/Adobe_AGM_Core_2.0_0 def
/AGMCORE_str256 256 string def
/AGMCORE_save nd
/AGMCORE_graphicsave nd
/AGMCORE_c 0 def
/AGMCORE_m 0 def
/AGMCORE_y 0 def
/AGMCORE_k 0 def
/AGMCORE_cmykbuf 4 array def
/AGMCORE_screen[currentscreen]cvx def
/AGMCORE_tmp 0 def
/AGMCORE_&setgray nd
/AGMCORE_&setcolor nd
/AGMCORE_&setcolorspace nd
/AGMCORE_&setcmykcolor nd
/AGMCORE_cyan_plate nd
/AGMCORE_magenta_plate nd
/AGMCORE_yellow_plate nd
/AGMCORE_black_plate nd
/AGMCORE_plate_ndx nd
/AGMCORE_get_ink_data nd
/AGMCORE_is_cmyk_sep nd
/AGMCORE_host_sep nd
/AGMCORE_avoid_L2_sep_space nd
/AGMCORE_distilling nd
/AGMCORE_composite_job nd
/AGMCORE_producing_seps nd
/AGMCORE_ps_level -1 def
/AGMCORE_ps_version -1 def
/AGMCORE_environ_ok nd
/AGMCORE_CSD_cache 0 dict def
/AGMCORE_currentoverprint false def
/AGMCORE_deltaX nd
/AGMCORE_deltaY nd
/AGMCORE_name nd
/AGMCORE_sep_special nd
/AGMCORE_err_strings 4 dict def
/AGMCORE_cur_err nd
/AGMCORE_current_spot_alias false def
/AGMCORE_inverting false def
/AGMCORE_feature_dictCount nd
/AGMCORE_feature_opCount nd
/AGMCORE_feature_ctm nd
/AGMCORE_ConvertToProcess false def
/AGMCORE_Default_CTM matrix def
/AGMCORE_Default_PageSize nd
/AGMCORE_Default_flatness nd
/AGMCORE_currentbg nd
/AGMCORE_currentucr nd
/AGMCORE_pattern_paint_type 0 def
/knockout_unitsq nd
currentglobal true setglobal
[/CSA/Gradient/Procedure]
{
	/Generic/Category findresource dup length dict copy/Category defineresource pop
}forall
setglobal
/AGMCORE_key_known
{
	where{
		/Adobe_AGM_Core_Id known
	}{
		false
	}ifelse
}ndf
/flushinput
{
	save
	2 dict begin
	/CompareBuffer 3 -1 roll def
	/readbuffer 256 string def
	mark
	{
	currentfile readbuffer{readline}stopped
		{cleartomark mark}
		{
		not
			{pop exit}
		if
		CompareBuffer eq
			{exit}
		if
		}ifelse
	}loop
	cleartomark
	end
	restore
}bdf
/getspotfunction
{
	AGMCORE_screen exch pop exch pop
	dup type/dicttype eq{
		dup/HalftoneType get 1 eq{
			/SpotFunction get
		}{
			dup/HalftoneType get 2 eq{
				/GraySpotFunction get
			}{
				pop
				{
					abs exch abs 2 copy add 1 gt{
						1 sub dup mul exch 1 sub dup mul add 1 sub
					}{
						dup mul exch dup mul add 1 exch sub
					}ifelse
				}bind
			}ifelse
		}ifelse
	}if
}def
/np
{newpath}bdf
/clp_npth
{clip np}def
/eoclp_npth
{eoclip np}def
/npth_clp
{np clip}def
/graphic_setup
{
	/AGMCORE_graphicsave save store
	concat
	0 setgray
	0 setlinecap
	0 setlinejoin
	1 setlinewidth
	[]0 setdash
	10 setmiterlimit
	np
	false setoverprint
	false setstrokeadjust
	//Adobe_AGM_Core/spot_alias gx
	/Adobe_AGM_Image where{
		pop
		Adobe_AGM_Image/spot_alias 2 copy known{
			gx
		}{
			pop pop
		}ifelse
	}if
	/sep_colorspace_dict null AGMCORE_gput
	100 dict begin
	/dictstackcount countdictstack def
	/showpage{}def
	mark
}def
/graphic_cleanup
{
	cleartomark
	dictstackcount 1 countdictstack 1 sub{end}for
	end
	AGMCORE_graphicsave restore
}def
/compose_error_msg
{
	grestoreall initgraphics	
	/Helvetica findfont 10 scalefont setfont
	/AGMCORE_deltaY 100 def
	/AGMCORE_deltaX 310 def
	clippath pathbbox np pop pop 36 add exch 36 add exch moveto
	0 AGMCORE_deltaY rlineto AGMCORE_deltaX 0 rlineto
	0 AGMCORE_deltaY neg rlineto AGMCORE_deltaX neg 0 rlineto closepath
	0 AGMCORE_&setgray
	gsave 1 AGMCORE_&setgray fill grestore 
	1 setlinewidth gsave stroke grestore
	currentpoint AGMCORE_deltaY 15 sub add exch 8 add exch moveto
	/AGMCORE_deltaY 12 def
	/AGMCORE_tmp 0 def
	AGMCORE_err_strings exch get
		{
		dup 32 eq
			{
			pop
			AGMCORE_str256 0 AGMCORE_tmp getinterval
			stringwidth pop currentpoint pop add AGMCORE_deltaX 28 add gt
				{
				currentpoint AGMCORE_deltaY sub exch pop
				clippath pathbbox pop pop pop 44 add exch moveto
				}if
			AGMCORE_str256 0 AGMCORE_tmp getinterval show( )show
			0 1 AGMCORE_str256 length 1 sub
				{
				AGMCORE_str256 exch 0 put
				}for
			/AGMCORE_tmp 0 def
			}{
				AGMCORE_str256 exch AGMCORE_tmp xpt
				/AGMCORE_tmp AGMCORE_tmp 1 add def
			}ifelse
		}forall
}bdf
/AGMCORE_CMYKDeviceNColorspaces[
	[/Separation/None/DeviceCMYK{0 0 0}]
	[/Separation(Black)/DeviceCMYK{0 0 0 4 -1 roll}bind]
	[/Separation(Yellow)/DeviceCMYK{0 0 3 -1 roll 0}bind]
	[/DeviceN[(Yellow)(Black)]/DeviceCMYK{0 0 4 2 roll}bind]
	[/Separation(Magenta)/DeviceCMYK{0 exch 0 0}bind]
	[/DeviceN[(Magenta)(Black)]/DeviceCMYK{0 3 1 roll 0 exch}bind]
	[/DeviceN[(Magenta)(Yellow)]/DeviceCMYK{0 3 1 roll 0}bind]
	[/DeviceN[(Magenta)(Yellow)(Black)]/DeviceCMYK{0 4 1 roll}bind]
	[/Separation(Cyan)/DeviceCMYK{0 0 0}]
	[/DeviceN[(Cyan)(Black)]/DeviceCMYK{0 0 3 -1 roll}bind]
	[/DeviceN[(Cyan)(Yellow)]/DeviceCMYK{0 exch 0}bind]
	[/DeviceN[(Cyan)(Yellow)(Black)]/DeviceCMYK{0 3 1 roll}bind]
	[/DeviceN[(Cyan)(Magenta)]/DeviceCMYK{0 0}]
	[/DeviceN[(Cyan)(Magenta)(Black)]/DeviceCMYK{0 exch}bind]
	[/DeviceN[(Cyan)(Magenta)(Yellow)]/DeviceCMYK{0}]
	[/DeviceCMYK]
]def
/ds{
	Adobe_AGM_Core begin
	/currentdistillerparams where
		{
		pop currentdistillerparams/CoreDistVersion get 5000 lt
			{<</DetectBlends false>>setdistillerparams}if
		}if	
	/AGMCORE_ps_version xdf
	/AGMCORE_ps_level xdf
	errordict/AGM_handleerror known not{
		errordict/AGM_handleerror errordict/handleerror get put
		errordict/handleerror{
			Adobe_AGM_Core begin
			$error/newerror get AGMCORE_cur_err null ne and{
				$error/newerror false put
				AGMCORE_cur_err compose_error_msg
			}if
			$error/newerror true put
			end
			errordict/AGM_handleerror get exec
			}bind put
		}if
	/AGMCORE_environ_ok 
		ps_level AGMCORE_ps_level ge
		ps_version AGMCORE_ps_version ge and 
		AGMCORE_ps_level -1 eq or
	def
	AGMCORE_environ_ok not
		{/AGMCORE_cur_err/AGMCORE_bad_environ def}if
	/AGMCORE_&setgray systemdict/setgray get def
	level2{
		/AGMCORE_&setcolor systemdict/setcolor get def
		/AGMCORE_&setcolorspace systemdict/setcolorspace get def
	}if
	/AGMCORE_currentbg currentblackgeneration def
	/AGMCORE_currentucr currentundercolorremoval def
	/AGMCORE_Default_flatness currentflat def
	/AGMCORE_distilling
		/product where{
			pop systemdict/setdistillerparams known product(Adobe PostScript Parser)ne and
		}{
			false
		}ifelse
	def
	/AGMCORE_GSTATE AGMCORE_key_known not{
		/AGMCORE_GSTATE 21 dict def
		/AGMCORE_tmpmatrix matrix def
		/AGMCORE_gstack 64 array def
		/AGMCORE_gstackptr 0 def
		/AGMCORE_gstacksaveptr 0 def
		/AGMCORE_gstackframekeys 14 def
		/AGMCORE_&gsave/gsave ldf
		/AGMCORE_&grestore/grestore ldf
		/AGMCORE_&grestoreall/grestoreall ldf
		/AGMCORE_&save/save ldf
		/AGMCORE_&setoverprint/setoverprint ldf
		/AGMCORE_gdictcopy{
			begin
			{def}forall
			end
		}def
		/AGMCORE_gput{
			AGMCORE_gstack AGMCORE_gstackptr get
			3 1 roll
			put
		}def
		/AGMCORE_gget{
			AGMCORE_gstack AGMCORE_gstackptr get
			exch
			get
		}def
		/gsave{
			AGMCORE_&gsave
			AGMCORE_gstack AGMCORE_gstackptr get
			AGMCORE_gstackptr 1 add
			dup 64 ge{limitcheck}if
			/AGMCORE_gstackptr exch store
			AGMCORE_gstack AGMCORE_gstackptr get
			AGMCORE_gdictcopy
		}def
		/grestore{
			AGMCORE_&grestore
			AGMCORE_gstackptr 1 sub
			dup AGMCORE_gstacksaveptr lt{1 add}if
			dup AGMCORE_gstack exch get dup/AGMCORE_currentoverprint known
				{/AGMCORE_currentoverprint get setoverprint}{pop}ifelse
			/AGMCORE_gstackptr exch store
		}def
		/grestoreall{
			AGMCORE_&grestoreall
			/AGMCORE_gstackptr AGMCORE_gstacksaveptr store 
		}def
		/save{
			AGMCORE_&save
			AGMCORE_gstack AGMCORE_gstackptr get
			AGMCORE_gstackptr 1 add
			dup 64 ge{limitcheck}if
			/AGMCORE_gstackptr exch store
			/AGMCORE_gstacksaveptr AGMCORE_gstackptr store
			AGMCORE_gstack AGMCORE_gstackptr get
			AGMCORE_gdictcopy
		}def
		/setoverprint{
			dup/AGMCORE_currentoverprint exch AGMCORE_gput AGMCORE_&setoverprint
		}def	
		0 1 AGMCORE_gstack length 1 sub{
				AGMCORE_gstack exch AGMCORE_gstackframekeys dict put
		}for
	}if
	level3/AGMCORE_&sysshfill AGMCORE_key_known not and
	{
		/AGMCORE_&sysshfill systemdict/shfill get def
		/AGMCORE_&sysmakepattern systemdict/makepattern get def
		/AGMCORE_&usrmakepattern/makepattern load def
	}if
	/currentcmykcolor[0 0 0 0]AGMCORE_gput
	/currentstrokeadjust false AGMCORE_gput
	/currentcolorspace[/DeviceGray]AGMCORE_gput
	/sep_tint 0 AGMCORE_gput
	/devicen_tints[0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0]AGMCORE_gput
	/sep_colorspace_dict null AGMCORE_gput
	/devicen_colorspace_dict null AGMCORE_gput
	/indexed_colorspace_dict null AGMCORE_gput
	/currentcolor_intent()AGMCORE_gput
	/customcolor_tint 1 AGMCORE_gput
	/absolute_colorimetric_crd null AGMCORE_gput
	/relative_colorimetric_crd null AGMCORE_gput
	/saturation_crd null AGMCORE_gput
	/perceptual_crd null AGMCORE_gput
	currentcolortransfer cvlit/AGMCore_gray_xfer xdf cvlit/AGMCore_b_xfer xdf
		 cvlit/AGMCore_g_xfer xdf cvlit/AGMCore_r_xfer xdf
	<<
	/MaxPatternItem currentsystemparams/MaxPatternCache get
	>>
	setuserparams
	end
}def
/ps
{
	/setcmykcolor where{
		pop
		Adobe_AGM_Core/AGMCORE_&setcmykcolor/setcmykcolor load put
	}if
	Adobe_AGM_Core begin
	/setcmykcolor
	{
		4 copy AGMCORE_cmykbuf astore/currentcmykcolor exch AGMCORE_gput
		1 sub 4 1 roll
		3{
			3 index add neg dup 0 lt{
				pop 0
			}if
			3 1 roll
		}repeat
		setrgbcolor pop
	}ndf
	/currentcmykcolor
	{
		/currentcmykcolor AGMCORE_gget aload pop
	}ndf
	/setoverprint
	{pop}ndf
	/currentoverprint
	{false}ndf
	/AGMCORE_cyan_plate 1 0 0 0 test_cmyk_color_plate def
	/AGMCORE_magenta_plate 0 1 0 0 test_cmyk_color_plate def
	/AGMCORE_yellow_plate 0 0 1 0 test_cmyk_color_plate def
	/AGMCORE_black_plate 0 0 0 1 test_cmyk_color_plate def
	/AGMCORE_plate_ndx 
		AGMCORE_cyan_plate{
			0
		}{
			AGMCORE_magenta_plate{
				1
			}{
				AGMCORE_yellow_plate{
					2
				}{
					AGMCORE_black_plate{
						3
					}{
						4
					}ifelse
				}ifelse
			}ifelse
		}ifelse
		def
	/AGMCORE_have_reported_unsupported_color_space false def
	/AGMCORE_report_unsupported_color_space
	{
		AGMCORE_have_reported_unsupported_color_space false eq
		{
			(Warning: Job contains content that cannot be separated with on-host methods. This content appears on the black plate, and knocks out all other plates.)==
			Adobe_AGM_Core/AGMCORE_have_reported_unsupported_color_space true ddf
		}if
	}def
	/AGMCORE_composite_job
		AGMCORE_cyan_plate AGMCORE_magenta_plate and AGMCORE_yellow_plate and AGMCORE_black_plate and def
	/AGMCORE_in_rip_sep
		/AGMCORE_in_rip_sep where{
			pop AGMCORE_in_rip_sep
		}{
			AGMCORE_distilling 
			{
				false
			}{
				userdict/Adobe_AGM_OnHost_Seps known{
					false
				}{
					level2{
						currentpagedevice/Separations 2 copy known{
							get
						}{
							pop pop false
						}ifelse
					}{
						false
					}ifelse
				}ifelse
			}ifelse
		}ifelse
	def
	/AGMCORE_producing_seps AGMCORE_composite_job not AGMCORE_in_rip_sep or def
	/AGMCORE_host_sep AGMCORE_producing_seps AGMCORE_in_rip_sep not and def
	/AGM_preserve_spots 
		/AGM_preserve_spots where{
			pop AGM_preserve_spots
		}{
			AGMCORE_distilling AGMCORE_producing_seps or
		}ifelse
	def
	/AGM_is_distiller_preserving_spotimages
	{
		currentdistillerparams/PreserveOverprintSettings known
		{
			currentdistillerparams/PreserveOverprintSettings get
				{
					currentdistillerparams/ColorConversionStrategy known
					{
						currentdistillerparams/ColorConversionStrategy get
						/sRGB ne
					}{
						true
					}ifelse
				}{
					false
				}ifelse
		}{
			false
		}ifelse
	}def
	/convert_spot_to_process where{pop}{
		/convert_spot_to_process
		{
			//Adobe_AGM_Core begin
			dup map_alias{
				/Name get exch pop
			}if
			dup dup(None)eq exch(All)eq or
				{
				pop false
				}{
				AGMCORE_host_sep
				{
					gsave
					1 0 0 0 setcmykcolor currentgray 1 exch sub
					0 1 0 0 setcmykcolor currentgray 1 exch sub
					0 0 1 0 setcmykcolor currentgray 1 exch sub
					0 0 0 1 setcmykcolor currentgray 1 exch sub
					add add add 0 eq
					{
						pop false
					}{
						false setoverprint
						current_spot_alias false set_spot_alias
						1 1 1 1 6 -1 roll findcmykcustomcolor 1 setcustomcolor
						set_spot_alias
						currentgray 1 ne
					}ifelse
					grestore
				}{
					AGMCORE_distilling
					{
						pop AGM_is_distiller_preserving_spotimages not
					}{
						//Adobe_AGM_Core/AGMCORE_name xddf
						false
						//Adobe_AGM_Core/AGMCORE_pattern_paint_type get 0 eq
						AGMUTIL_cpd/OverrideSeparations known and
						{
							AGMUTIL_cpd/OverrideSeparations get
							{
								/HqnSpots/ProcSet resourcestatus
								{
									pop pop pop true
								}if
							}if
						}if					
						{
							AGMCORE_name/HqnSpots/ProcSet findresource/TestSpot gx not
						}{
							gsave
							[/Separation AGMCORE_name/DeviceGray{}]AGMCORE_&setcolorspace
							false
							AGMUTIL_cpd/SeparationColorNames 2 copy known
							{
								get
								{AGMCORE_name eq or}forall
								not
							}{
								pop pop pop true
							}ifelse
							grestore
						}ifelse
					}ifelse
				}ifelse
			}ifelse
			end
		}def
	}ifelse
	/convert_to_process where{pop}{
		/convert_to_process
		{
			dup length 0 eq
				{
				pop false
				}{
				AGMCORE_host_sep
				{
				dup true exch
					{
					dup(Cyan)eq exch
					dup(Magenta)eq 3 -1 roll or exch
					dup(Yellow)eq 3 -1 roll or exch
					dup(Black)eq 3 -1 roll or
						{pop}
						{convert_spot_to_process and}ifelse
					}
				forall
					{
					true exch
						{
						dup(Cyan)eq exch
						dup(Magenta)eq 3 -1 roll or exch
						dup(Yellow)eq 3 -1 roll or exch
						(Black)eq or and
						}forall
						not
					}{pop false}ifelse
				}{
				false exch
					{
					/PhotoshopDuotoneList where{pop false}{true}ifelse
						{
						dup(Cyan)eq exch
						dup(Magenta)eq 3 -1 roll or exch
						dup(Yellow)eq 3 -1 roll or exch
						dup(Black)eq 3 -1 roll or
						{pop}
						{convert_spot_to_process or}ifelse
						}
						{
						convert_spot_to_process or
						}
					ifelse
					}
				forall
				}ifelse
			}ifelse
		}def
	}ifelse	
	/AGMCORE_avoid_L2_sep_space 
		version cvr 2012 lt 
		level2 and 
		AGMCORE_producing_seps not and
	def
	/AGMCORE_is_cmyk_sep
		AGMCORE_cyan_plate AGMCORE_magenta_plate or AGMCORE_yellow_plate or AGMCORE_black_plate or
	def
	/AGM_avoid_0_cmyk where{
		pop AGM_avoid_0_cmyk
	}{
		AGM_preserve_spots 
		userdict/Adobe_AGM_OnHost_Seps known 
		userdict/Adobe_AGM_InRip_Seps known or
		not and
	}ifelse
	{
		/setcmykcolor[
			{
				4 copy add add add 0 eq currentoverprint and{
					pop 0.0005
				}if
			}/exec cvx
			/AGMCORE_&setcmykcolor load dup type/operatortype ne{
				/exec cvx
			}if
		]cvx def
	}if
	/AGMCORE_IsSeparationAProcessColor
		{
		dup(Cyan)eq exch dup(Magenta)eq exch dup(Yellow)eq exch(Black)eq or or or
		}def
	AGMCORE_host_sep{
		/setcolortransfer
		{
			AGMCORE_cyan_plate{
				pop pop pop
			}{
			 	AGMCORE_magenta_plate{
			 		4 3 roll pop pop pop
			 	}{
			 		AGMCORE_yellow_plate{
			 			4 2 roll pop pop pop
			 		}{
			 			4 1 roll pop pop pop
			 		}ifelse
			 	}ifelse
			}ifelse
			settransfer 
		}	
		def
		/AGMCORE_get_ink_data
			AGMCORE_cyan_plate{
				{pop pop pop}
			}{
			 	AGMCORE_magenta_plate{
			 		{4 3 roll pop pop pop}
			 	}{
			 		AGMCORE_yellow_plate{
			 			{4 2 roll pop pop pop}
			 		}{
			 			{4 1 roll pop pop pop}
			 		}ifelse
			 	}ifelse
			}ifelse
		def
		/AGMCORE_RemoveProcessColorNames
			{
			1 dict begin
			/filtername
				{
				dup/Cyan eq 1 index(Cyan)eq or
					{pop(_cyan_)}if
				dup/Magenta eq 1 index(Magenta)eq or
					{pop(_magenta_)}if
				dup/Yellow eq 1 index(Yellow)eq or
					{pop(_yellow_)}if
				dup/Black eq 1 index(Black)eq or
					{pop(_black_)}if
				}def
			dup type/arraytype eq
				{[exch{filtername}forall]}
				{filtername}ifelse
			end
			}def
		level3{
			/AGMCORE_IsCurrentColor
				{
				dup AGMCORE_IsSeparationAProcessColor
					{
					AGMCORE_plate_ndx 0 eq
						{dup(Cyan)eq exch/Cyan eq or}if
					AGMCORE_plate_ndx 1 eq
						{dup(Magenta)eq exch/Magenta eq or}if
					AGMCORE_plate_ndx 2 eq
						{dup(Yellow)eq exch/Yellow eq or}if
					AGMCORE_plate_ndx 3 eq
						{dup(Black)eq exch/Black eq or}if
					AGMCORE_plate_ndx 4 eq
						{pop false}if
					}{
					gsave
					false setoverprint
					current_spot_alias false set_spot_alias
					1 1 1 1 6 -1 roll findcmykcustomcolor 1 setcustomcolor
					set_spot_alias
					currentgray 1 ne
					grestore
					}ifelse
				}def
			/AGMCORE_filter_functiondatasource
				{	
				5 dict begin
				/data_in xdf
				data_in type/stringtype eq
					{
					/ncomp xdf
					/comp xdf
					/string_out data_in length ncomp idiv string def
					0 ncomp data_in length 1 sub
						{
						string_out exch dup ncomp idiv exch data_in exch ncomp getinterval comp get 255 exch sub put
						}for
					string_out
					}{
					string/string_in xdf
					/string_out 1 string def
					/component xdf
					[
					data_in string_in/readstring cvx
						[component/get cvx 255/exch cvx/sub cvx string_out/exch cvx 0/exch cvx/put cvx string_out]cvx
						[/pop cvx()]cvx/ifelse cvx
					]cvx/ReusableStreamDecode filter
				}ifelse
				end
				}def
			/AGMCORE_separateShadingFunction
				{
				2 dict begin
				/paint? xdf
				/channel xdf
				dup type/dicttype eq
					{
					begin
					FunctionType 0 eq
						{
						/DataSource channel Range length 2 idiv DataSource AGMCORE_filter_functiondatasource def
						currentdict/Decode known
							{/Decode Decode channel 2 mul 2 getinterval def}if
						paint? not
							{/Decode[1 1]def}if
						}if
					FunctionType 2 eq
						{
						paint?
							{
							/C0[C0 channel get 1 exch sub]def
							/C1[C1 channel get 1 exch sub]def
							}{
							/C0[1]def
							/C1[1]def
							}ifelse			
						}if
					FunctionType 3 eq
						{
						/Functions[Functions{channel paint? AGMCORE_separateShadingFunction}forall]def			
						}if
					currentdict/Range known
						{/Range[0 1]def}if
					currentdict
					end}{
					channel get 0 paint? AGMCORE_separateShadingFunction
					}ifelse
				end
				}def
			/AGMCORE_separateShading
				{
				3 -1 roll begin
				currentdict/Function known
					{
					currentdict/Background known
						{[1 index{Background 3 index get 1 exch sub}{1}ifelse]/Background xdf}if
					Function 3 1 roll AGMCORE_separateShadingFunction/Function xdf
					/ColorSpace[/DeviceGray]def
					}{
					ColorSpace dup type/arraytype eq{0 get}if/DeviceCMYK eq
						{
						/ColorSpace[/DeviceN[/_cyan_/_magenta_/_yellow_/_black_]/DeviceCMYK{}]def
						}{
						ColorSpace dup 1 get AGMCORE_RemoveProcessColorNames 1 exch put
						}ifelse
					ColorSpace 0 get/Separation eq
						{
							{
								[1/exch cvx/sub cvx]cvx
							}{
								[/pop cvx 1]cvx
							}ifelse
							ColorSpace 3 3 -1 roll put
							pop
						}{
							{
								[exch ColorSpace 1 get length 1 sub exch sub/index cvx 1/exch cvx/sub cvx ColorSpace 1 get length 1 add 1/roll cvx ColorSpace 1 get length{/pop cvx}repeat]cvx
							}{
								pop[ColorSpace 1 get length{/pop cvx}repeat cvx 1]cvx
							}ifelse
							ColorSpace 3 3 -1 roll bind put
						}ifelse
					ColorSpace 2/DeviceGray put																		
					}ifelse
				end
				}def
			/AGMCORE_separateShadingDict
				{
				dup/ColorSpace get
				dup type/arraytype ne
					{[exch]}if
				dup 0 get/DeviceCMYK eq
					{
					exch begin 
					currentdict
					AGMCORE_cyan_plate
						{0 true}if
					AGMCORE_magenta_plate
						{1 true}if
					AGMCORE_yellow_plate
						{2 true}if
					AGMCORE_black_plate
						{3 true}if
					AGMCORE_plate_ndx 4 eq
						{0 false}if		
					dup not currentoverprint and
						{/AGMCORE_ignoreshade true def}if
					AGMCORE_separateShading
					currentdict
					end exch
					}if
				dup 0 get/Separation eq
					{
					exch begin
					ColorSpace 1 get dup/None ne exch/All ne and
						{
						ColorSpace 1 get AGMCORE_IsCurrentColor AGMCORE_plate_ndx 4 lt and ColorSpace 1 get AGMCORE_IsSeparationAProcessColor not and
							{
							ColorSpace 2 get dup type/arraytype eq{0 get}if/DeviceCMYK eq 
								{
								/ColorSpace
									[
									/Separation
									ColorSpace 1 get
									/DeviceGray
										[
										ColorSpace 3 get/exec cvx
										4 AGMCORE_plate_ndx sub -1/roll cvx
										4 1/roll cvx
										3[/pop cvx]cvx/repeat cvx
										1/exch cvx/sub cvx
										]cvx									
									]def
								}{
								AGMCORE_report_unsupported_color_space
								AGMCORE_black_plate not
									{
									currentdict 0 false AGMCORE_separateShading
									}if
								}ifelse
							}{
							currentdict ColorSpace 1 get AGMCORE_IsCurrentColor
							0 exch 
							dup not currentoverprint and
								{/AGMCORE_ignoreshade true def}if
							AGMCORE_separateShading
							}ifelse	
						}if			
					currentdict
					end exch
					}if
				dup 0 get/DeviceN eq
					{
					exch begin
					ColorSpace 1 get convert_to_process
						{
						ColorSpace 2 get dup type/arraytype eq{0 get}if/DeviceCMYK eq 
							{
							/ColorSpace
								[
								/DeviceN
								ColorSpace 1 get
								/DeviceGray
									[
									ColorSpace 3 get/exec cvx
									4 AGMCORE_plate_ndx sub -1/roll cvx
									4 1/roll cvx
									3[/pop cvx]cvx/repeat cvx
									1/exch cvx/sub cvx
									]cvx									
								]def
							}{
							AGMCORE_report_unsupported_color_space
							AGMCORE_black_plate not
								{
								currentdict 0 false AGMCORE_separateShading
								/ColorSpace[/DeviceGray]def
								}if
							}ifelse
						}{
						currentdict
						false -1 ColorSpace 1 get
							{
							AGMCORE_IsCurrentColor
								{
								1 add
								exch pop true exch exit
								}if
							1 add
							}forall
						exch 
						dup not currentoverprint and
							{/AGMCORE_ignoreshade true def}if
						AGMCORE_separateShading
						}ifelse
					currentdict
					end exch
					}if
				dup 0 get dup/DeviceCMYK eq exch dup/Separation eq exch/DeviceN eq or or not
					{
					exch begin
					ColorSpace dup type/arraytype eq
						{0 get}if
					/DeviceGray ne
						{
						AGMCORE_report_unsupported_color_space
						AGMCORE_black_plate not
							{
							ColorSpace 0 get/CIEBasedA eq
								{
								/ColorSpace[/Separation/_ciebaseda_/DeviceGray{}]def
								}if
							ColorSpace 0 get dup/CIEBasedABC eq exch dup/CIEBasedDEF eq exch/DeviceRGB eq or or
								{
								/ColorSpace[/DeviceN[/_red_/_green_/_blue_]/DeviceRGB{}]def
								}if
							ColorSpace 0 get/CIEBasedDEFG eq
								{
								/ColorSpace[/DeviceN[/_cyan_/_magenta_/_yellow_/_black_]/DeviceCMYK{}]def
								}if
							currentdict 0 false AGMCORE_separateShading
							}if
						}if
					currentdict
					end exch
					}if
				pop
				dup/AGMCORE_ignoreshade known
					{
					begin
					/ColorSpace[/Separation(None)/DeviceGray{}]def
					currentdict end
					}if
				}def
			/shfill
				{
				AGMCORE_separateShadingDict 
				dup/AGMCORE_ignoreshade known
					{pop}
					{AGMCORE_&sysshfill}ifelse
				}def
			/makepattern
				{
				exch
				dup/PatternType get 2 eq
					{
					clonedict
					begin
					/Shading Shading AGMCORE_separateShadingDict def
					Shading/AGMCORE_ignoreshade known
					currentdict end exch
					{pop<</PatternType 1/PaintProc{pop}/BBox[0 0 1 1]/XStep 1/YStep 1/PaintType 1/TilingType 3>>}if
					exch AGMCORE_&sysmakepattern
					}{
					exch AGMCORE_&usrmakepattern
					}ifelse
				}def
		}if
	}if
	AGMCORE_in_rip_sep{
		/setcustomcolor
		{
			exch aload pop
			dup 7 1 roll inRip_spot_has_ink not	{
				4{4 index mul 4 1 roll}
				repeat
				/DeviceCMYK setcolorspace
				6 -2 roll pop pop
			}{
				//Adobe_AGM_Core begin
					/AGMCORE_k xdf/AGMCORE_y xdf/AGMCORE_m xdf/AGMCORE_c xdf
				end
				[/Separation 4 -1 roll/DeviceCMYK
				{dup AGMCORE_c mul exch dup AGMCORE_m mul exch dup AGMCORE_y mul exch AGMCORE_k mul}
				]
				setcolorspace
			}ifelse
			setcolor
		}ndf
		/setseparationgray
		{
			[/Separation(All)/DeviceGray{}]setcolorspace_opt
			1 exch sub setcolor
		}ndf
	}{
		/setseparationgray
		{
			AGMCORE_&setgray
		}ndf
	}ifelse
	/findcmykcustomcolor
	{
		5 makereadonlyarray
	}ndf
	/setcustomcolor
	{
		exch aload pop pop
		4{4 index mul 4 1 roll}repeat
		setcmykcolor pop
	}ndf
	/has_color
		/colorimage where{
			AGMCORE_producing_seps{
				pop true
			}{
				systemdict eq
			}ifelse
		}{
			false
		}ifelse
	def
	/map_index
	{
		1 index mul exch getinterval{255 div}forall
	}bdf
	/map_indexed_devn
	{
		Lookup Names length 3 -1 roll cvi map_index
	}bdf
	/n_color_components
	{
		base_colorspace_type
		dup/DeviceGray eq{
			pop 1
		}{
			/DeviceCMYK eq{
				4
			}{
				3
			}ifelse
		}ifelse
	}bdf
	level2{
		/mo/moveto ldf
		/li/lineto ldf
		/cv/curveto ldf
		/knockout_unitsq
		{
			1 setgray
			0 0 1 1 rectfill
		}def
		level2/setcolorspace AGMCORE_key_known not and{
			/AGMCORE_&&&setcolorspace/setcolorspace ldf
			/AGMCORE_ReplaceMappedColor
			{
				dup type dup/arraytype eq exch/packedarraytype eq or
				{
					/AGMCORE_SpotAliasAry2 where{
						begin
						dup 0 get dup/Separation eq
						{
							pop
							dup length array copy
							dup dup 1 get
							current_spot_alias
							{
								dup map_alias
								{
									false set_spot_alias
									dup 1 exch setsepcolorspace
									true set_spot_alias
									begin
									/sep_colorspace_dict currentdict AGMCORE_gput
									pop pop	pop
									[
										/Separation Name 
										CSA map_csa
										MappedCSA 
										/sep_colorspace_proc load
									]
									dup Name
									end
								}if
							}if
							map_reserved_ink_name 1 xpt
						}{
							/DeviceN eq 
							{
								dup length array copy
								dup dup 1 get[
									exch{
										current_spot_alias{
											dup map_alias{
												/Name get exch pop
											}if
										}if
										map_reserved_ink_name
									}forall 
								]1 xpt
							}if
						}ifelse
						end
					}if
				}if
			}def
			/setcolorspace
			{
				dup type dup/arraytype eq exch/packedarraytype eq or
				{
					dup 0 get/Indexed eq
					{
						AGMCORE_distilling
						{
							/PhotoshopDuotoneList where
							{
								pop false
							}{
								true
							}ifelse
						}{
							true
						}ifelse
						{
							aload pop 3 -1 roll
							AGMCORE_ReplaceMappedColor
							3 1 roll 4 array astore
						}if
					}{
						AGMCORE_ReplaceMappedColor
					}ifelse
				}if
				DeviceN_PS2_inRip_seps{AGMCORE_&&&setcolorspace}if
			}def
		}if	
	}{
		/adj
		{
			currentstrokeadjust{
				transform
				0.25 sub round 0.25 add exch
				0.25 sub round 0.25 add exch
				itransform
			}if
		}def
		/mo{
			adj moveto
		}def
		/li{
			adj lineto
		}def
		/cv{
			6 2 roll adj
			6 2 roll adj
			6 2 roll adj curveto
		}def
		/knockout_unitsq
		{
			1 setgray
			8 8 1[8 0 0 8 0 0]{<ffffffffffffffff>}image
		}def
		/currentstrokeadjust{
			/currentstrokeadjust AGMCORE_gget
		}def
		/setstrokeadjust{
			/currentstrokeadjust exch AGMCORE_gput
		}def
		/setcolorspace
		{
			/currentcolorspace exch AGMCORE_gput
		}def
		/currentcolorspace
		{
			/currentcolorspace AGMCORE_gget
		}def
		/setcolor_devicecolor
		{
			base_colorspace_type
			dup/DeviceGray eq{
				pop setgray
			}{
				/DeviceCMYK eq{
					setcmykcolor
				}{
					setrgbcolor
				}ifelse
			}ifelse
		}def
		/setcolor
		{
			currentcolorspace 0 get
			dup/DeviceGray ne{
				dup/DeviceCMYK ne{
					dup/DeviceRGB ne{
						dup/Separation eq{
							pop
							currentcolorspace 3 gx
							currentcolorspace 2 get
						}{
							dup/Indexed eq{
								pop
								currentcolorspace 3 get dup type/stringtype eq{
									currentcolorspace 1 get n_color_components
									3 -1 roll map_index
								}{
									exec
								}ifelse
								currentcolorspace 1 get
							}{
								/AGMCORE_cur_err/AGMCORE_invalid_color_space def
								AGMCORE_invalid_color_space
							}ifelse
						}ifelse
					}if
				}if
			}if
			setcolor_devicecolor
		}def
	}ifelse
	/sop/setoverprint ldf
	/lw/setlinewidth ldf
	/lc/setlinecap ldf
	/lj/setlinejoin ldf
	/ml/setmiterlimit ldf
	/dsh/setdash ldf
	/sadj/setstrokeadjust ldf
	/gry/setgray ldf
	/rgb/setrgbcolor ldf
	/cmyk[
		/currentcolorspace[/DeviceCMYK]/AGMCORE_gput cvx
		/setcmykcolor load dup type/operatortype ne{/exec cvx}if
	]cvx bdf
	level3 AGMCORE_host_sep not and{
		/nzopmsc{
			6 dict begin
			/kk exch def
			/yy exch def
			/mm exch def
			/cc exch def
			/sum 0 def
			cc 0 ne{/sum sum 2#1000 or def cc}if
			mm 0 ne{/sum sum 2#0100 or def mm}if
			yy 0 ne{/sum sum 2#0010 or def yy}if
			kk 0 ne{/sum sum 2#0001 or def kk}if
			AGMCORE_CMYKDeviceNColorspaces sum get setcolorspace
			sum 0 eq{0}if
			end
			setcolor
		}bdf
	}{
		/nzopmsc/cmyk ldf
	}ifelse
	/sep/setsepcolor ldf
	/devn/setdevicencolor ldf
	/idx/setindexedcolor ldf
	/colr/setcolor ldf
	/csacrd/set_csa_crd ldf
	/sepcs/setsepcolorspace ldf
	/devncs/setdevicencolorspace ldf
	/idxcs/setindexedcolorspace ldf
	/cp/closepath ldf
	/clp/clp_npth ldf
	/eclp/eoclp_npth ldf
	/f/fill ldf
	/ef/eofill ldf
	/@/stroke ldf
	/nclp/npth_clp ldf
	/gset/graphic_setup ldf
	/gcln/graphic_cleanup ldf
	/ct/concat ldf
	/cf/currentfile ldf
	/fl/filter ldf
	/rs/readstring ldf
	/AGMCORE_def_ht currenthalftone def
	/clonedict Adobe_AGM_Utils begin/clonedict load end def
	/clonearray Adobe_AGM_Utils begin/clonearray load end def
	currentdict{
		dup xcheck 1 index type dup/arraytype eq exch/packedarraytype eq or and{
			bind
		}if
		def
	}forall
	/getrampcolor
	{
		/indx exch def
		0 1 NumComp 1 sub
		{
			dup
			Samples exch get
			dup type/stringtype eq{indx get}if
			exch
			Scaling exch get aload pop
			3 1 roll
			mul add
		}for
		ColorSpaceFamily/Separation eq 
		{sep}
		{
			ColorSpaceFamily/DeviceN eq
			{devn}{setcolor}ifelse
		}ifelse
	}bdf
	/sssetbackground{
		aload pop 
		ColorSpaceFamily/Separation eq 
		{sep}
		{
			ColorSpaceFamily/DeviceN eq
			{devn}{setcolor}ifelse
		}ifelse	
	}bdf
	/RadialShade
	{
		40 dict begin
		/ColorSpaceFamily xdf
		/background xdf
		/ext1 xdf
		/ext0 xdf
		/BBox xdf
		/r2 xdf
		/c2y xdf
		/c2x xdf
		/r1 xdf
		/c1y xdf
		/c1x xdf
		/rampdict xdf
		/setinkoverprint where{pop/setinkoverprint{pop}def}if
		gsave
		BBox length 0 gt
		{
			np
			BBox 0 get BBox 1 get moveto
			BBox 2 get BBox 0 get sub 0 rlineto
			0 BBox 3 get BBox 1 get sub rlineto
			BBox 2 get BBox 0 get sub neg 0 rlineto
			closepath
			clip
			np
		}if
		c1x c2x eq
		{
			c1y c2y lt{/theta 90 def}{/theta 270 def}ifelse
		}{
			/slope c2y c1y sub c2x c1x sub div def
			/theta slope 1 atan def
			c2x c1x lt c2y c1y ge and{/theta theta 180 sub def}if
			c2x c1x lt c2y c1y lt and{/theta theta 180 add def}if
		}ifelse
		gsave
		clippath
		c1x c1y translate
		theta rotate
		-90 rotate
		{pathbbox}stopped
		{0 0 0 0}if
		/yMax xdf
		/xMax xdf
		/yMin xdf
		/xMin xdf
		grestore
		xMax xMin eq yMax yMin eq or
		{
			grestore
			end
		}{
			/max{2 copy gt{pop}{exch pop}ifelse}bdf
			/min{2 copy lt{pop}{exch pop}ifelse}bdf
			rampdict begin
			40 dict begin
			background length 0 gt{background sssetbackground gsave clippath fill grestore}if
			gsave
			c1x c1y translate
			theta rotate
			-90 rotate
			/c2y c1x c2x sub dup mul c1y c2y sub dup mul add sqrt def
			/c1y 0 def
			/c1x 0 def
			/c2x 0 def
			ext0
			{
				0 getrampcolor
				c2y r2 add r1 sub 0.0001 lt
				{
					c1x c1y r1 360 0 arcn
					pathbbox
					/aymax exch def
					/axmax exch def
					/aymin exch def
					/axmin exch def
					/bxMin xMin axmin min def
					/byMin yMin aymin min def
					/bxMax xMax axmax max def
					/byMax yMax aymax max def
					bxMin byMin moveto
					bxMax byMin lineto
					bxMax byMax lineto
					bxMin byMax lineto
					bxMin byMin lineto
					eofill
				}{
					c2y r1 add r2 le
					{
						c1x c1y r1 0 360 arc
						fill
					}
					{
						c2x c2y r2 0 360 arc fill
						r1 r2 eq
						{
							/p1x r1 neg def
							/p1y c1y def
							/p2x r1 def
							/p2y c1y def
							p1x p1y moveto p2x p2y lineto p2x yMin lineto p1x yMin lineto
							fill
						}{
							/AA r2 r1 sub c2y div def
							AA -1 eq
							{/theta 89.99 def}
							{/theta AA 1 AA dup mul sub sqrt div 1 atan def}
							ifelse
							/SS1 90 theta add dup sin exch cos div def
							/p1x r1 SS1 SS1 mul SS1 SS1 mul 1 add div sqrt mul neg def
							/p1y p1x SS1 div neg def
							/SS2 90 theta sub dup sin exch cos div def
							/p2x r1 SS2 SS2 mul SS2 SS2 mul 1 add div sqrt mul def
							/p2y p2x SS2 div neg def
							r1 r2 gt
							{
								/L1maxX p1x yMin p1y sub SS1 div add def
								/L2maxX p2x yMin p2y sub SS2 div add def
							}{
								/L1maxX 0 def
								/L2maxX 0 def
							}ifelse
							p1x p1y moveto p2x p2y lineto L2maxX L2maxX p2x sub SS2 mul p2y add lineto
							L1maxX L1maxX p1x sub SS1 mul p1y add lineto
							fill
						}ifelse
					}ifelse
				}ifelse
			}if
		c1x c2x sub dup mul
		c1y c2y sub dup mul
		add 0.5 exp
		0 dtransform
		dup mul exch dup mul add 0.5 exp 72 div
		0 72 matrix defaultmatrix dtransform dup mul exch dup mul add sqrt
		72 0 matrix defaultmatrix dtransform dup mul exch dup mul add sqrt
		1 index 1 index lt{exch}if pop
		/hires xdf
		hires mul
		/numpix xdf
		/numsteps NumSamples def
		/rampIndxInc 1 def
		/subsampling false def
		numpix 0 ne
		{
			NumSamples numpix div 0.5 gt
			{
				/numsteps numpix 2 div round cvi dup 1 le{pop 2}if def
				/rampIndxInc NumSamples 1 sub numsteps div def
				/subsampling true def
			}if
		}if
		/xInc c2x c1x sub numsteps div def
		/yInc c2y c1y sub numsteps div def
		/rInc r2 r1 sub numsteps div def
		/cx c1x def
		/cy c1y def
		/radius r1 def
		np
		xInc 0 eq yInc 0 eq rInc 0 eq and and
		{
			0 getrampcolor
			cx cy radius 0 360 arc
			stroke
			NumSamples 1 sub getrampcolor
			cx cy radius 72 hires div add 0 360 arc
			0 setlinewidth
			stroke
		}{
			0
			numsteps
			{
				dup
				subsampling{round cvi}if
				getrampcolor
				cx cy radius 0 360 arc
				/cx cx xInc add def
				/cy cy yInc add def
				/radius radius rInc add def
				cx cy radius 360 0 arcn
				eofill
				rampIndxInc add
			}repeat
			pop
		}ifelse
		ext1
		{
			c2y r2 add r1 lt
			{
				c2x c2y r2 0 360 arc
				fill
			}{
				c2y r1 add r2 sub 0.0001 le
				{
					c2x c2y r2 360 0 arcn
					pathbbox
					/aymax exch def
					/axmax exch def
					/aymin exch def
					/axmin exch def
					/bxMin xMin axmin min def
					/byMin yMin aymin min def
					/bxMax xMax axmax max def
					/byMax yMax aymax max def
					bxMin byMin moveto
					bxMax byMin lineto
					bxMax byMax lineto
					bxMin byMax lineto
					bxMin byMin lineto
					eofill
				}{
					c2x c2y r2 0 360 arc fill
					r1 r2 eq
					{
						/p1x r2 neg def
						/p1y c2y def
						/p2x r2 def
						/p2y c2y def
						p1x p1y moveto p2x p2y lineto p2x yMax lineto p1x yMax lineto
						fill
					}{
						/AA r2 r1 sub c2y div def
						AA -1 eq
						{/theta 89.99 def}
						{/theta AA 1 AA dup mul sub sqrt div 1 atan def}
						ifelse
						/SS1 90 theta add dup sin exch cos div def
						/p1x r2 SS1 SS1 mul SS1 SS1 mul 1 add div sqrt mul neg def
						/p1y c2y p1x SS1 div sub def
						/SS2 90 theta sub dup sin exch cos div def
						/p2x r2 SS2 SS2 mul SS2 SS2 mul 1 add div sqrt mul def
						/p2y c2y p2x SS2 div sub def
						r1 r2 lt
						{
							/L1maxX p1x yMax p1y sub SS1 div add def
							/L2maxX p2x yMax p2y sub SS2 div add def
						}{
							/L1maxX 0 def
							/L2maxX 0 def
						}ifelse
						p1x p1y moveto p2x p2y lineto L2maxX L2maxX p2x sub SS2 mul p2y add lineto
						L1maxX L1maxX p1x sub SS1 mul p1y add lineto
						fill
					}ifelse
				}ifelse
			}ifelse
		}if
		grestore
		grestore
		end
		end
		end
		}ifelse
	}bdf
	/GenStrips
	{
		40 dict begin
		/ColorSpaceFamily xdf
		/background xdf
		/ext1 xdf
		/ext0 xdf
		/BBox xdf
		/y2 xdf
		/x2 xdf
		/y1 xdf
		/x1 xdf
		/rampdict xdf
		/setinkoverprint where{pop/setinkoverprint{pop}def}if
		gsave
		BBox length 0 gt
		{
			np
			BBox 0 get BBox 1 get moveto
			BBox 2 get BBox 0 get sub 0 rlineto
			0 BBox 3 get BBox 1 get sub rlineto
			BBox 2 get BBox 0 get sub neg 0 rlineto
			closepath
			clip
			np
		}if
		x1 x2 eq
		{
			y1 y2 lt{/theta 90 def}{/theta 270 def}ifelse
		}{
			/slope y2 y1 sub x2 x1 sub div def
			/theta slope 1 atan def
			x2 x1 lt y2 y1 ge and{/theta theta 180 sub def}if
			x2 x1 lt y2 y1 lt and{/theta theta 180 add def}if
		}
		ifelse
		gsave
		clippath
		x1 y1 translate
		theta rotate
		{pathbbox}stopped
		{0 0 0 0}if
		/yMax exch def
		/xMax exch def
		/yMin exch def
		/xMin exch def
		grestore
		xMax xMin eq yMax yMin eq or
		{
			grestore
			end
		}{
			rampdict begin
			20 dict begin
			background length 0 gt{background sssetbackground gsave clippath fill grestore}if
			gsave
			x1 y1 translate
			theta rotate
			/xStart 0 def
			/xEnd x2 x1 sub dup mul y2 y1 sub dup mul add 0.5 exp def
			/ySpan yMax yMin sub def
			/numsteps NumSamples def
			/rampIndxInc 1 def
			/subsampling false def
			xStart 0 transform
			xEnd 0 transform
			3 -1 roll
			sub dup mul
			3 1 roll
			sub dup mul
			add 0.5 exp 72 div
			0 72 matrix defaultmatrix dtransform dup mul exch dup mul add sqrt
			72 0 matrix defaultmatrix dtransform dup mul exch dup mul add sqrt
			1 index 1 index lt{exch}if pop
			mul
			/numpix xdf
			numpix 0 ne
			{
				NumSamples numpix div 0.5 gt
				{
					/numsteps numpix 2 div round cvi dup 1 le{pop 2}if def
					/rampIndxInc NumSamples 1 sub numsteps div def
					/subsampling true def
				}if
			}if
			ext0
			{
				0 getrampcolor
				xMin xStart lt
				{
					xMin yMin xMin neg ySpan rectfill
				}if
			}if
			/xInc xEnd xStart sub numsteps div def
			/x xStart def
			0
			numsteps
			{
				dup
				subsampling{round cvi}if
				getrampcolor
				x yMin xInc ySpan rectfill
				/x x xInc add def
				rampIndxInc add
			}repeat
			pop
			ext1{
				xMax xEnd gt
				{
					xEnd yMin xMax xEnd sub ySpan rectfill
				}if
			}if
			grestore
			grestore
			end
			end
			end
		}ifelse
	}bdf
}def
/pt
{
	end
}def
/dt{
}def
/pgsv{
	//Adobe_AGM_Core/AGMCORE_save save put
}def
/pgrs{
	//Adobe_AGM_Core/AGMCORE_save get restore
}def
systemdict/findcolorrendering known{
	/findcolorrendering systemdict/findcolorrendering get def
}if
systemdict/setcolorrendering known{
	/setcolorrendering systemdict/setcolorrendering get def
}if
/test_cmyk_color_plate
{
	gsave
	setcmykcolor currentgray 1 ne
	grestore
}def
/inRip_spot_has_ink
{
	dup//Adobe_AGM_Core/AGMCORE_name xddf
	convert_spot_to_process not
}def
/map255_to_range
{
	1 index sub
	3 -1 roll 255 div mul add
}def
/set_csa_crd
{
	/sep_colorspace_dict null AGMCORE_gput
	begin
		CSA get_csa_by_name setcolorspace_opt
		set_crd
	end
}
def
/map_csa
{
	currentdict/MappedCSA known{MappedCSA null ne}{false}ifelse
	{pop}{get_csa_by_name/MappedCSA xdf}ifelse
}def
/setsepcolor
{
	/sep_colorspace_dict AGMCORE_gget begin
		dup/sep_tint exch AGMCORE_gput
		TintProc
	end
}def
/setdevicencolor
{
	/devicen_colorspace_dict AGMCORE_gget begin
		Names length copy
		Names length 1 sub -1 0
		{
			/devicen_tints AGMCORE_gget 3 1 roll xpt
		}for
		TintProc
	end
}def
/sep_colorspace_proc
{
	/AGMCORE_tmp exch store
	/sep_colorspace_dict AGMCORE_gget begin
	currentdict/Components known{
		Components aload pop 
		TintMethod/Lab eq{
			2{AGMCORE_tmp mul NComponents 1 roll}repeat
			LMax sub AGMCORE_tmp mul LMax add NComponents 1 roll
		}{
			TintMethod/Subtractive eq{
				NComponents{
					AGMCORE_tmp mul NComponents 1 roll
				}repeat
			}{
				NComponents{
					1 sub AGMCORE_tmp mul 1 add NComponents 1 roll
				}repeat
			}ifelse
		}ifelse
	}{
		ColorLookup AGMCORE_tmp ColorLookup length 1 sub mul round cvi get
		aload pop
	}ifelse
	end
}def
/sep_colorspace_gray_proc
{
	/AGMCORE_tmp exch store
	/sep_colorspace_dict AGMCORE_gget begin
	GrayLookup AGMCORE_tmp GrayLookup length 1 sub mul round cvi get
	end
}def
/sep_proc_name
{
	dup 0 get 
	dup/DeviceRGB eq exch/DeviceCMYK eq or level2 not and has_color not and{
		pop[/DeviceGray]
		/sep_colorspace_gray_proc
	}{
		/sep_colorspace_proc
	}ifelse
}def
/setsepcolorspace
{
	current_spot_alias{
		dup begin
			Name map_alias{
				exch pop
			}if
		end
	}if
	dup/sep_colorspace_dict exch AGMCORE_gput
	begin
	CSA map_csa
	/AGMCORE_sep_special Name dup()eq exch(All)eq or store
	AGMCORE_avoid_L2_sep_space{
		[/Indexed MappedCSA sep_proc_name 255 exch 
			{255 div}/exec cvx 3 -1 roll[4 1 roll load/exec cvx]cvx 
		]setcolorspace_opt
		/TintProc{
			255 mul round cvi setcolor
		}bdf
	}{
		MappedCSA 0 get/DeviceCMYK eq 
		currentdict/Components known and 
		AGMCORE_sep_special not and{
			/TintProc[
				Components aload pop Name findcmykcustomcolor 
				/exch cvx/setcustomcolor cvx
			]cvx bdf
		}{
 			AGMCORE_host_sep Name(All)eq and{
 				/TintProc{
					1 exch sub setseparationgray 
				}bdf
 			}{
				AGMCORE_in_rip_sep MappedCSA 0 get/DeviceCMYK eq and 
				AGMCORE_host_sep or
				Name()eq and{
					/TintProc[
						MappedCSA sep_proc_name exch 0 get/DeviceCMYK eq{
							cvx/setcmykcolor cvx
						}{
							cvx/setgray cvx
						}ifelse
					]cvx bdf
				}{
					AGMCORE_producing_seps MappedCSA 0 get dup/DeviceCMYK eq exch/DeviceGray eq or and AGMCORE_sep_special not and{
	 					/TintProc[
							/dup cvx
							MappedCSA sep_proc_name cvx exch
							0 get/DeviceGray eq{
								1/exch cvx/sub cvx 0 0 0 4 -1/roll cvx
							}if
							/Name cvx/findcmykcustomcolor cvx/exch cvx
							AGMCORE_host_sep{
								AGMCORE_is_cmyk_sep
								/Name cvx 
								/AGMCORE_IsSeparationAProcessColor load/exec cvx
								/not cvx/and cvx 
							}{
								Name inRip_spot_has_ink not
							}ifelse
							[
		 						/pop cvx 1
							]cvx/if cvx
							/setcustomcolor cvx
						]cvx bdf
 					}{
						/TintProc{setcolor}bdf
						[/Separation Name MappedCSA sep_proc_name load]setcolorspace_opt
					}ifelse
				}ifelse
			}ifelse
		}ifelse
	}ifelse
	set_crd
	setsepcolor
	end
}def
/additive_blend
{
 	3 dict begin
 	/numarrays xdf
 	/numcolors xdf
 	0 1 numcolors 1 sub
 		{
 		/c1 xdf
 		1
 		0 1 numarrays 1 sub
 			{
			1 exch add/index cvx
 			c1/get cvx/mul cvx
 			}for
 		numarrays 1 add 1/roll cvx 
 		}for
 	numarrays[/pop cvx]cvx/repeat cvx
 	end
}def
/subtractive_blend
{
	3 dict begin
	/numarrays xdf
	/numcolors xdf
	0 1 numcolors 1 sub
		{
		/c1 xdf
		1 1
		0 1 numarrays 1 sub
			{
			1 3 3 -1 roll add/index cvx 
			c1/get cvx/sub cvx/mul cvx
			}for
		/sub cvx
		numarrays 1 add 1/roll cvx
		}for
	numarrays[/pop cvx]cvx/repeat cvx
	end
}def
/exec_tint_transform
{
	/TintProc[
		/TintTransform cvx/setcolor cvx
	]cvx bdf
	MappedCSA setcolorspace_opt
}bdf
/devn_makecustomcolor
{
	2 dict begin
	/names_index xdf
	/Names xdf
	1 1 1 1 Names names_index get findcmykcustomcolor
	/devicen_tints AGMCORE_gget names_index get setcustomcolor
	Names length{pop}repeat
	end
}bdf
/setdevicencolorspace
{
	dup/AliasedColorants known{false}{true}ifelse 
	current_spot_alias and{
		7 dict begin
		/names_index 0 def
		dup/names_len exch/Names get length def
		/new_names names_len array def
		/new_LookupTables names_len array def
		/alias_cnt 0 def
		dup/Names get
		{
			dup map_alias{
				exch pop
				dup/ColorLookup known{
					dup begin
					new_LookupTables names_index ColorLookup put
					end
				}{
					dup/Components known{
						dup begin
						new_LookupTables names_index Components put
						end
					}{
						dup begin
						new_LookupTables names_index[null null null null]put
						end
					}ifelse
				}ifelse
				new_names names_index 3 -1 roll/Name get put
				/alias_cnt alias_cnt 1 add def 
			}{
				/name xdf				
				new_names names_index name put
				dup/LookupTables known{
					dup begin
					new_LookupTables names_index LookupTables names_index get put
					end
				}{
					dup begin
					new_LookupTables names_index[null null null null]put
					end
				}ifelse
			}ifelse
			/names_index names_index 1 add def 
		}forall
		alias_cnt 0 gt{
			/AliasedColorants true def
			/lut_entry_len new_LookupTables 0 get dup length 256 ge{0 get length}{length}ifelse def
			0 1 names_len 1 sub{
				/names_index xdf
				new_LookupTables names_index get dup length 256 ge{0 get length}{length}ifelse lut_entry_len ne{
					/AliasedColorants false def
					exit
				}{
					new_LookupTables names_index get 0 get null eq{
						dup/Names get names_index get/name xdf
						name(Cyan)eq name(Magenta)eq name(Yellow)eq name(Black)eq
						or or or not{
							/AliasedColorants false def
							exit
						}if
					}if
				}ifelse
			}for
			lut_entry_len 1 eq{
				/AliasedColorants false def
			}if
			AliasedColorants{
				dup begin
				/Names new_names def
				/LookupTables new_LookupTables def
				/AliasedColorants true def
				/NComponents lut_entry_len def
				/TintMethod NComponents 4 eq{/Subtractive}{/Additive}ifelse def
				/MappedCSA TintMethod/Additive eq{/DeviceRGB}{/DeviceCMYK}ifelse def
				currentdict/TTTablesIdx known not{
					/TTTablesIdx -1 def
				}if
				end
			}if
		}if
		end
	}if
	dup/devicen_colorspace_dict exch AGMCORE_gput
	begin
	currentdict/AliasedColorants known{
		AliasedColorants
	}{
		false
	}ifelse
	dup not{
		CSA map_csa
	}if
	/TintTransform load type/nulltype eq or{
		/TintTransform[
			0 1 Names length 1 sub
				{
				/TTTablesIdx TTTablesIdx 1 add def
				dup LookupTables exch get dup 0 get null eq
					{
					1 index
					Names exch get
					dup(Cyan)eq
						{
						pop exch
						LookupTables length exch sub
						/index cvx
						0 0 0
						}
						{
						dup(Magenta)eq
							{
							pop exch
							LookupTables length exch sub
							/index cvx
							0/exch cvx 0 0
							}{
							(Yellow)eq
								{
								exch
								LookupTables length exch sub
								/index cvx
								0 0 3 -1/roll cvx 0
								}{
								exch
								LookupTables length exch sub
								/index cvx
								0 0 0 4 -1/roll cvx
								}ifelse
							}ifelse
						}ifelse
					5 -1/roll cvx/astore cvx
					}{
					dup length 1 sub
					LookupTables length 4 -1 roll sub 1 add
					/index cvx/mul cvx/round cvx/cvi cvx/get cvx
					}ifelse
					Names length TTTablesIdx add 1 add 1/roll cvx
				}for
			Names length[/pop cvx]cvx/repeat cvx
			NComponents Names length
 			TintMethod/Subtractive eq
 				{
 				subtractive_blend
 				}{
 				additive_blend
 				}ifelse
		]cvx bdf
	}if
	AGMCORE_host_sep{
		Names convert_to_process{
			exec_tint_transform
		}
		{	
			currentdict/AliasedColorants known{
				AliasedColorants not
			}{
				false
			}ifelse
			5 dict begin
			/AvoidAliasedColorants xdf
			/painted? false def
			/names_index 0 def
			/names_len Names length def
			AvoidAliasedColorants{
				/currentspotalias current_spot_alias def
				false set_spot_alias
			}if
			Names{
				AGMCORE_is_cmyk_sep{
					dup(Cyan)eq AGMCORE_cyan_plate and exch
					dup(Magenta)eq AGMCORE_magenta_plate and exch
					dup(Yellow)eq AGMCORE_yellow_plate and exch
					(Black)eq AGMCORE_black_plate and or or or{
						/devicen_colorspace_dict AGMCORE_gget/TintProc[
							Names names_index/devn_makecustomcolor cvx
						]cvx ddf
						/painted? true def
					}if
					painted?{exit}if
				}{
					0 0 0 0 5 -1 roll findcmykcustomcolor 1 setcustomcolor currentgray 0 eq{
					/devicen_colorspace_dict AGMCORE_gget/TintProc[
						Names names_index/devn_makecustomcolor cvx
					]cvx ddf
					/painted? true def
					exit
					}if
				}ifelse
				/names_index names_index 1 add def
			}forall
			AvoidAliasedColorants{
				currentspotalias set_spot_alias
			}if
			painted?{
				/devicen_colorspace_dict AGMCORE_gget/names_index names_index put
			}{
				/devicen_colorspace_dict AGMCORE_gget/TintProc[
					names_len[/pop cvx]cvx/repeat cvx 1/setseparationgray cvx
 					0 0 0 0/setcmykcolor cvx
				]cvx ddf
			}ifelse
			end
		}ifelse
	}
	{
		AGMCORE_in_rip_sep{
			Names convert_to_process not
		}{
			level3
		}ifelse
		{
			[/DeviceN Names MappedCSA/TintTransform load]setcolorspace_opt
			/TintProc level3 not AGMCORE_in_rip_sep and{
				[
					Names/length cvx[/pop cvx]cvx/repeat cvx
				]cvx bdf
			}{
				{setcolor}bdf
			}ifelse
		}{
			exec_tint_transform
		}ifelse
	}ifelse
	set_crd
	/AliasedColorants false def
	end
}def
/setindexedcolorspace
{
	dup/indexed_colorspace_dict exch AGMCORE_gput
	begin
		currentdict/CSDBase known{
			CSDBase/CSD get_res begin
			currentdict/Names known{
				currentdict devncs
			}{
				1 currentdict sepcs
			}ifelse
			AGMCORE_host_sep{
				4 dict begin
				/compCnt/Names where{pop Names length}{1}ifelse def
				/NewLookup HiVal 1 add string def
				0 1 HiVal{
					/tableIndex xdf
					Lookup dup type/stringtype eq{
						compCnt tableIndex map_index
					}{
						exec
					}ifelse
					/Names where{
						pop setdevicencolor
					}{
						setsepcolor
					}ifelse
					currentgray
					tableIndex exch
					255 mul cvi 
					NewLookup 3 1 roll put
				}for
				[/Indexed currentcolorspace HiVal NewLookup]setcolorspace_opt
				end
			}{
				level3
				{
					currentdict/Names known{
						[/Indexed[/DeviceN Names MappedCSA/TintTransform load]HiVal Lookup]setcolorspace_opt
					}{
						[/Indexed[/Separation Name MappedCSA sep_proc_name load]HiVal Lookup]setcolorspace_opt
					}ifelse
				}{
				[/Indexed MappedCSA HiVal
					[
					currentdict/Names known{
						Lookup dup type/stringtype eq
							{/exch cvx CSDBase/CSD get_res/Names get length dup/mul cvx exch/getinterval cvx{255 div}/forall cvx}
							{/exec cvx}ifelse
							/TintTransform load/exec cvx
					}{
						Lookup dup type/stringtype eq
							{/exch cvx/get cvx 255/div cvx}
							{/exec cvx}ifelse
							CSDBase/CSD get_res/MappedCSA get sep_proc_name exch pop/load cvx/exec cvx
					}ifelse
					]cvx
				]setcolorspace_opt
				}ifelse
			}ifelse
			end
			set_crd
		}
		{
			CSA map_csa
			AGMCORE_host_sep level2 not and{
				0 0 0 0 setcmykcolor
			}{
				[/Indexed MappedCSA 
				level2 not has_color not and{
					dup 0 get dup/DeviceRGB eq exch/DeviceCMYK eq or{
						pop[/DeviceGray]
					}if
					HiVal GrayLookup
				}{
					HiVal 
					currentdict/RangeArray known{
						{
							/indexed_colorspace_dict AGMCORE_gget begin
							Lookup exch 
							dup HiVal gt{
								pop HiVal
							}if
							NComponents mul NComponents getinterval{}forall
							NComponents 1 sub -1 0{
								RangeArray exch 2 mul 2 getinterval aload pop map255_to_range
								NComponents 1 roll
							}for
							end
						}bind
					}{
						Lookup
					}ifelse
				}ifelse
				]setcolorspace_opt
				set_crd
			}ifelse
		}ifelse
	end
}def
/setindexedcolor
{
	AGMCORE_host_sep{
		/indexed_colorspace_dict AGMCORE_gget
		begin
		currentdict/CSDBase known{
			CSDBase/CSD get_res begin
			currentdict/Names known{
				map_indexed_devn
				devn
			}
			{
				Lookup 1 3 -1 roll map_index
				sep
			}ifelse
			end
		}{
			Lookup MappedCSA/DeviceCMYK eq{4}{1}ifelse 3 -1 roll
			map_index
			MappedCSA/DeviceCMYK eq{setcmykcolor}{setgray}ifelse
		}ifelse
		end
	}{
		level3 not AGMCORE_in_rip_sep and/indexed_colorspace_dict AGMCORE_gget/CSDBase known and{
			/indexed_colorspace_dict AGMCORE_gget/CSDBase get/CSD get_res begin
			map_indexed_devn
			devn
			end
		}
		{
			setcolor
		}ifelse
	}ifelse
}def
/ignoreimagedata
{
	currentoverprint not{
		gsave
		dup clonedict begin
		1 setgray
		/Decode[0 1]def
		/DataSource<FF>def
		/MultipleDataSources false def
		/BitsPerComponent 8 def
		currentdict end
		systemdict/image gx
		grestore
		}if
	consumeimagedata
}def
/add_res
{
	dup/CSD eq{
		pop 
		//Adobe_AGM_Core begin
		/AGMCORE_CSD_cache load 3 1 roll put
		end
	}{
		defineresource pop
	}ifelse
}def
/del_res
{
	{
		aload pop exch
		dup/CSD eq{
			pop 
			{//Adobe_AGM_Core/AGMCORE_CSD_cache get exch undef}forall
		}{
			exch
			{1 index undefineresource}forall
			pop
		}ifelse
	}forall
}def
/get_res
{
	dup/CSD eq{
		pop
		dup type dup/nametype eq exch/stringtype eq or{
			AGMCORE_CSD_cache exch get
		}if
	}{
		findresource
	}ifelse
}def
/get_csa_by_name
{
	dup type dup/nametype eq exch/stringtype eq or{
		/CSA get_res
	}if
}def
/paintproc_buf_init
{
	/count get 0 0 put
}def
/paintproc_buf_next
{
	dup/count get dup 0 get
	dup 3 1 roll
	1 add 0 xpt
	get				
}def
/cachepaintproc_compress
{
	5 dict begin
	currentfile exch 0 exch/SubFileDecode filter/ReadFilter exch def
	/ppdict 20 dict def
	/string_size 16000 def
	/readbuffer string_size string def
	currentglobal true setglobal 
	ppdict 1 array dup 0 1 put/count xpt
	setglobal
	/LZWFilter 
	{
		exch
		dup length 0 eq{
			pop
		}{
			ppdict dup length 1 sub 3 -1 roll put
		}ifelse
		{string_size}{0}ifelse string
	}/LZWEncode filter def
	{		
		ReadFilter readbuffer readstring
		exch LZWFilter exch writestring
		not{exit}if
	}loop
	LZWFilter closefile
	ppdict				
	end
}def
/cachepaintproc
{
	2 dict begin
	currentfile exch 0 exch/SubFileDecode filter/ReadFilter exch def
	/ppdict 20 dict def
	currentglobal true setglobal 
	ppdict 1 array dup 0 1 put/count xpt
	setglobal
	{
		ReadFilter 16000 string readstring exch
		ppdict dup length 1 sub 3 -1 roll put
		not{exit}if
	}loop
	ppdict dup dup length 1 sub()put					
	end	
}def
/make_pattern
{
	exch clonedict exch
	dup matrix currentmatrix matrix concatmatrix 0 0 3 2 roll itransform
	exch 3 index/XStep get 1 index exch 2 copy div cvi mul sub sub
	exch 3 index/YStep get 1 index exch 2 copy div cvi mul sub sub
	matrix translate exch matrix concatmatrix
			 1 index begin
		BBox 0 get XStep div cvi XStep mul/xshift exch neg def
		BBox 1 get YStep div cvi YStep mul/yshift exch neg def
		BBox 0 get xshift add
		BBox 1 get yshift add
		BBox 2 get xshift add
		BBox 3 get yshift add
		4 array astore
		/BBox exch def
		[xshift yshift/translate load null/exec load]dup
		3/PaintProc load put cvx/PaintProc exch def
		end
	gsave 0 setgray
	makepattern
	grestore
}def
/set_pattern
{
	dup/PatternType get 1 eq{
		dup/PaintType get 1 eq{
			currentoverprint sop[/DeviceGray]setcolorspace 0 setgray
		}if
	}if
	setpattern
}def
/setcolorspace_opt
{
	dup currentcolorspace eq{pop}{setcolorspace}ifelse
}def
/updatecolorrendering
{
	currentcolorrendering/RenderingIntent known{
		currentcolorrendering/RenderingIntent get
	}
	{
		Intent/AbsoluteColorimetric eq 
		{
			/absolute_colorimetric_crd AGMCORE_gget dup null eq
		}
		{
			Intent/RelativeColorimetric eq
			{
				/relative_colorimetric_crd AGMCORE_gget dup null eq
			}
			{
				Intent/Saturation eq
				{
					/saturation_crd AGMCORE_gget dup null eq
				}
				{
					/perceptual_crd AGMCORE_gget dup null eq
				}ifelse
			}ifelse
		}ifelse
		{
			pop null	
		}
		{
			/RenderingIntent known{null}{Intent}ifelse
		}ifelse
	}ifelse
	Intent ne{
		Intent/ColorRendering{findresource}stopped
		{
			pop pop systemdict/findcolorrendering known
			{
 				Intent findcolorrendering
 				{
 					/ColorRendering findresource true exch
 				}
 				{
 					/ColorRendering findresource
					product(Xerox Phaser 5400)ne
					exch
 				}ifelse
				dup Intent/AbsoluteColorimetric eq 
				{
					/absolute_colorimetric_crd exch AGMCORE_gput
				}
				{
					Intent/RelativeColorimetric eq
					{
						/relative_colorimetric_crd exch AGMCORE_gput
					}
					{
						Intent/Saturation eq
						{
							/saturation_crd exch AGMCORE_gput
						}
						{
							Intent/Perceptual eq
							{
								/perceptual_crd exch AGMCORE_gput
							}
							{
								pop
							}ifelse
						}ifelse
					}ifelse
				}ifelse
				1 index{exch}{pop}ifelse
			}
			{false}ifelse
		}
		{true}ifelse
		{
			dup begin
			currentdict/TransformPQR known{
				currentdict/TransformPQR get aload pop
				3{{}eq 3 1 roll}repeat or or
			}
			{true}ifelse
			currentdict/MatrixPQR known{
				currentdict/MatrixPQR get aload pop
				1.0 eq 9 1 roll 0.0 eq 9 1 roll 0.0 eq 9 1 roll
				0.0 eq 9 1 roll 1.0 eq 9 1 roll 0.0 eq 9 1 roll
				0.0 eq 9 1 roll 0.0 eq 9 1 roll 1.0 eq
				and and and and and and and and
			}
			{true}ifelse
			end
			or
			{
				clonedict begin
				/TransformPQR[
					{4 -1 roll 3 get dup 3 1 roll sub 5 -1 roll 3 get 3 -1 roll sub div
					3 -1 roll 3 get 3 -1 roll 3 get dup 4 1 roll sub mul add}bind
					{4 -1 roll 4 get dup 3 1 roll sub 5 -1 roll 4 get 3 -1 roll sub div
					3 -1 roll 4 get 3 -1 roll 4 get dup 4 1 roll sub mul add}bind
					{4 -1 roll 5 get dup 3 1 roll sub 5 -1 roll 5 get 3 -1 roll sub div
					3 -1 roll 5 get 3 -1 roll 5 get dup 4 1 roll sub mul add}bind
				]def
				/MatrixPQR[0.8951 -0.7502 0.0389 0.2664 1.7135 -0.0685 -0.1614 0.0367 1.0296]def
				/RangePQR[-0.3227950745 2.3229645538 -1.5003771057 3.5003465881 -0.1369979095 2.136967392]def
				currentdict end
			}if
			setcolorrendering_opt
		}if		
	}if
}def
/set_crd
{
	AGMCORE_host_sep not level2 and{
		currentdict/ColorRendering known{
			ColorRendering/ColorRendering{findresource}stopped not{setcolorrendering_opt}if
		}{
			currentdict/Intent known{
				updatecolorrendering
			}if
		}ifelse
		currentcolorspace dup type/arraytype eq
			{0 get}if
		/DeviceRGB eq
			{
			currentdict/UCR known
				{/UCR}{/AGMCORE_currentucr}ifelse
			load setundercolorremoval
			currentdict/BG known 
				{/BG}{/AGMCORE_currentbg}ifelse
			load setblackgeneration
			}if
	}if
}def
/set_ucrbg
{
	dup null eq {pop /AGMCORE_currentbg load}{/Procedure get_res}ifelse
	dup currentblackgeneration eq {pop}{setblackgeneration}ifelse
	dup null eq {pop /AGMCORE_currentucr load}{/Procedure get_res}ifelse
	dup currentundercolorremoval eq {pop}{setundercolorremoval}ifelse
}def
/setcolorrendering_opt
{
	dup currentcolorrendering eq{
		pop
	}{
		product(HP Color LaserJet 2605)anchorsearch{
			pop pop pop
		}{
			pop
			clonedict
			begin
				/Intent Intent def
				currentdict
			end
			setcolorrendering
		}ifelse
	}ifelse
}def
/cpaint_gcomp
{
	convert_to_process//Adobe_AGM_Core/AGMCORE_ConvertToProcess xddf
	//Adobe_AGM_Core/AGMCORE_ConvertToProcess get not
	{
		(%end_cpaint_gcomp)flushinput
	}if
}def
/cpaint_gsep
{
	//Adobe_AGM_Core/AGMCORE_ConvertToProcess get
	{	
		(%end_cpaint_gsep)flushinput
	}if
}def
/cpaint_gend
{np}def
/T1_path
{
	currentfile token pop currentfile token pop mo
	{
		currentfile token pop dup type/stringtype eq
			{pop exit}if 
		0 exch rlineto 
		currentfile token pop dup type/stringtype eq
			{pop exit}if 
		0 rlineto
	}loop
}def
/T1_gsave
	level3
	{/clipsave}
	{/gsave}ifelse
	load def
/T1_grestore
	level3
	{/cliprestore}
	{/grestore}ifelse 
	load def
/set_spot_alias_ary
{
	dup inherit_aliases
	//Adobe_AGM_Core/AGMCORE_SpotAliasAry xddf
}def
/set_spot_normalization_ary
{
	dup inherit_aliases
	dup length
	/AGMCORE_SpotAliasAry where{pop AGMCORE_SpotAliasAry length add}if
	array
	//Adobe_AGM_Core/AGMCORE_SpotAliasAry2 xddf
	/AGMCORE_SpotAliasAry where{
		pop
		AGMCORE_SpotAliasAry2 0 AGMCORE_SpotAliasAry putinterval
		AGMCORE_SpotAliasAry length
	}{0}ifelse
	AGMCORE_SpotAliasAry2 3 1 roll exch putinterval
	true set_spot_alias
}def
/inherit_aliases
{
	{dup/Name get map_alias{/CSD put}{pop}ifelse}forall
}def
/set_spot_alias
{
	/AGMCORE_SpotAliasAry2 where{
		/AGMCORE_current_spot_alias 3 -1 roll put
	}{
		pop
	}ifelse
}def
/current_spot_alias
{
	/AGMCORE_SpotAliasAry2 where{
		/AGMCORE_current_spot_alias get
	}{
		false
	}ifelse
}def
/map_alias
{
	/AGMCORE_SpotAliasAry2 where{
		begin
			/AGMCORE_name xdf
			false	
			AGMCORE_SpotAliasAry2{
				dup/Name get AGMCORE_name eq{
					/CSD get/CSD get_res
					exch pop true
					exit
				}{
					pop
				}ifelse
			}forall
		end
	}{
		pop false
	}ifelse
}bdf
/spot_alias
{
	true set_spot_alias
	/AGMCORE_&setcustomcolor AGMCORE_key_known not{
		//Adobe_AGM_Core/AGMCORE_&setcustomcolor/setcustomcolor load put
	}if
	/customcolor_tint 1 AGMCORE_gput
	//Adobe_AGM_Core begin
	/setcustomcolor
	{
		//Adobe_AGM_Core begin
		dup/customcolor_tint exch AGMCORE_gput
		1 index aload pop pop 1 eq exch 1 eq and exch 1 eq and exch 1 eq and not
		current_spot_alias and{1 index 4 get map_alias}{false}ifelse
		{
			false set_spot_alias
			/sep_colorspace_dict AGMCORE_gget null ne
			{/sep_colorspace_dict AGMCORE_gget/ForeignContent known not}{false}ifelse
			3 1 roll 2 index{
				exch pop/sep_tint AGMCORE_gget exch
			}if
			mark 3 1 roll
			setsepcolorspace
			counttomark 0 ne{
				setsepcolor
			}if
			pop
			not{/sep_tint 1.0 AGMCORE_gput/sep_colorspace_dict AGMCORE_gget/ForeignContent true put}if
			pop
			true set_spot_alias
		}{
			AGMCORE_&setcustomcolor
		}ifelse
		end
	}bdf
	end
}def
/begin_feature
{
	Adobe_AGM_Core/AGMCORE_feature_dictCount countdictstack put
	count Adobe_AGM_Core/AGMCORE_feature_opCount 3 -1 roll put
	{Adobe_AGM_Core/AGMCORE_feature_ctm matrix currentmatrix put}if
}def
/end_feature
{
	2 dict begin
	/spd/setpagedevice load def
	/setpagedevice{get_gstate spd set_gstate}def
	stopped{$error/newerror false put}if
	end
	count Adobe_AGM_Core/AGMCORE_feature_opCount get sub dup 0 gt{{pop}repeat}{pop}ifelse
	countdictstack Adobe_AGM_Core/AGMCORE_feature_dictCount get sub dup 0 gt{{end}repeat}{pop}ifelse
	{Adobe_AGM_Core/AGMCORE_feature_ctm get setmatrix}if
}def
/set_negative
{
	//Adobe_AGM_Core begin
	/AGMCORE_inverting exch def
	level2{
		currentpagedevice/NegativePrint known AGMCORE_distilling not and{
			currentpagedevice/NegativePrint get//Adobe_AGM_Core/AGMCORE_inverting get ne{
				true begin_feature true{
						<</NegativePrint//Adobe_AGM_Core/AGMCORE_inverting get>>setpagedevice
				}end_feature
			}if
			/AGMCORE_inverting false def
		}if
	}if
	AGMCORE_inverting{
		[{1 exch sub}/exec load dup currenttransfer exch]cvx bind settransfer
 		AGMCORE_distilling{
 			erasepage
 		}{
 			gsave np clippath 1/setseparationgray where{pop setseparationgray}{setgray}ifelse
 			/AGMIRS_&fill where{pop AGMIRS_&fill}{fill}ifelse grestore
 		}ifelse
	}if
	end
}def
/lw_save_restore_override{
	/md where{
		pop
		md begin
		initializepage
		/initializepage{}def
		/pmSVsetup{}def
		/endp{}def
		/pse{}def
		/psb{}def
		/orig_showpage where
			{pop}
			{/orig_showpage/showpage load def}
		ifelse
		/showpage{orig_showpage gR}def
		end
	}if
}def
/pscript_showpage_override{
	/NTPSOct95 where
	{
		begin
		showpage
		save
		/showpage/restore load def
		/restore{exch pop}def
		end
	}if
}def
/driver_media_override
{
	/md where{
		pop
		md/initializepage known{
			md/initializepage{}put
		}if
		md/rC known{
			md/rC{4{pop}repeat}put
		}if
	}if
	/mysetup where{
		/mysetup[1 0 0 1 0 0]put
	}if
	Adobe_AGM_Core/AGMCORE_Default_CTM matrix currentmatrix put
	level2
		{Adobe_AGM_Core/AGMCORE_Default_PageSize currentpagedevice/PageSize get put}if
}def
/capture_mysetup
{
	/Pscript_Win_Data where{
		pop
		Pscript_Win_Data/mysetup known{
			Adobe_AGM_Core/save_mysetup Pscript_Win_Data/mysetup get put
		}if
	}if
}def
/restore_mysetup
{
	/Pscript_Win_Data where{
		pop
		Pscript_Win_Data/mysetup known{
			Adobe_AGM_Core/save_mysetup known{
				Pscript_Win_Data/mysetup Adobe_AGM_Core/save_mysetup get put
				Adobe_AGM_Core/save_mysetup undef
			}if
		}if
	}if
}def
/driver_check_media_override
{
 	/PrepsDict where
 		{pop}
		{
		Adobe_AGM_Core/AGMCORE_Default_CTM get matrix currentmatrix ne
		Adobe_AGM_Core/AGMCORE_Default_PageSize get type/arraytype eq
			{
			Adobe_AGM_Core/AGMCORE_Default_PageSize get 0 get currentpagedevice/PageSize get 0 get eq and
			Adobe_AGM_Core/AGMCORE_Default_PageSize get 1 get currentpagedevice/PageSize get 1 get eq and
			}if
			{
			Adobe_AGM_Core/AGMCORE_Default_CTM get setmatrix
			}if
		}ifelse
}def
AGMCORE_err_strings begin
	/AGMCORE_bad_environ(Environment not satisfactory for this job. Ensure that the PPD is correct or that the PostScript level requested is supported by this printer. )def
	/AGMCORE_color_space_onhost_seps(This job contains colors that will not separate with on-host methods. )def
	/AGMCORE_invalid_color_space(This job contains an invalid color space. )def
end
/set_def_ht
{AGMCORE_def_ht sethalftone}def
/set_def_flat
{AGMCORE_Default_flatness setflat}def
end
systemdict/setpacking known
{setpacking}if
%%EndResource
%%BeginResource: procset Adobe_CoolType_Core 2.31 0
%%Copyright: Copyright 1997-2006 Adobe Systems Incorporated. All Rights Reserved.
%%Version: 2.31 0
10 dict begin
/Adobe_CoolType_Passthru currentdict def
/Adobe_CoolType_Core_Defined userdict/Adobe_CoolType_Core known def
Adobe_CoolType_Core_Defined
	{/Adobe_CoolType_Core userdict/Adobe_CoolType_Core get def}
if
userdict/Adobe_CoolType_Core 70 dict dup begin put
/Adobe_CoolType_Version 2.31 def
/Level2?
	systemdict/languagelevel known dup
		{pop systemdict/languagelevel get 2 ge}
	if def
Level2? not
	{
	/currentglobal false def
	/setglobal/pop load def
	/gcheck{pop false}bind def
	/currentpacking false def
	/setpacking/pop load def
	/SharedFontDirectory 0 dict def
	}
if
currentpacking
true setpacking
currentglobal false setglobal
userdict/Adobe_CoolType_Data 2 copy known not
	{2 copy 10 dict put}
if
get
	 begin
	/@opStackCountByLevel 32 dict def
	/@opStackLevel 0 def
	/@dictStackCountByLevel 32 dict def
	/@dictStackLevel 0 def
	 end
setglobal
currentglobal true setglobal
userdict/Adobe_CoolType_GVMFonts known not
	{userdict/Adobe_CoolType_GVMFonts 10 dict put}
if
setglobal
currentglobal false setglobal
userdict/Adobe_CoolType_LVMFonts known not
	{userdict/Adobe_CoolType_LVMFonts 10 dict put}
if
setglobal
/ct_VMDictPut
	{
	dup gcheck{Adobe_CoolType_GVMFonts}{Adobe_CoolType_LVMFonts}ifelse
	3 1 roll put
	}bind def
/ct_VMDictUndef
	{
	dup Adobe_CoolType_GVMFonts exch known
		{Adobe_CoolType_GVMFonts exch undef}
		{
			dup Adobe_CoolType_LVMFonts exch known
			{Adobe_CoolType_LVMFonts exch undef}
			{pop}
			ifelse
		}ifelse
	}bind def
/ct_str1 1 string def
/ct_xshow
{
	/_ct_na exch def
	/_ct_i 0 def
	currentpoint
	/_ct_y exch def
	/_ct_x exch def
	{
		pop pop
		ct_str1 exch 0 exch put
		ct_str1 show
		{_ct_na _ct_i get}stopped 
		{pop pop}
		{
			_ct_x _ct_y moveto
			0
			rmoveto
		}
		ifelse
		/_ct_i _ct_i 1 add def
		currentpoint
		/_ct_y exch def
		/_ct_x exch def
	}
	exch
	@cshow
}bind def
/ct_yshow
{
	/_ct_na exch def
	/_ct_i 0 def
	currentpoint
	/_ct_y exch def
	/_ct_x exch def
	{
		pop pop
		ct_str1 exch 0 exch put
		ct_str1 show
		{_ct_na _ct_i get}stopped 
		{pop pop}
		{
			_ct_x _ct_y moveto
			0 exch
			rmoveto
		}
		ifelse
		/_ct_i _ct_i 1 add def
		currentpoint
		/_ct_y exch def
		/_ct_x exch def
	}
	exch
	@cshow
}bind def
/ct_xyshow
{
	/_ct_na exch def
	/_ct_i 0 def
	currentpoint
	/_ct_y exch def
	/_ct_x exch def
	{
		pop pop
		ct_str1 exch 0 exch put
		ct_str1 show
		{_ct_na _ct_i get}stopped 
		{pop pop}
		{
			{_ct_na _ct_i 1 add get}stopped 
			{pop pop pop}
			{
				_ct_x _ct_y moveto
				rmoveto
			}
			ifelse
		}
		ifelse
		/_ct_i _ct_i 2 add def
		currentpoint
		/_ct_y exch def
		/_ct_x exch def
	}
	exch
	@cshow
}bind def
/xsh{{@xshow}stopped{Adobe_CoolType_Data begin ct_xshow end}if}bind def
/ysh{{@yshow}stopped{Adobe_CoolType_Data begin ct_yshow end}if}bind def
/xysh{{@xyshow}stopped{Adobe_CoolType_Data begin ct_xyshow end}if}bind def
currentglobal true setglobal
/ct_T3Defs
{
/BuildChar
{
	1 index/Encoding get exch get
	1 index/BuildGlyph get exec
}bind def
/BuildGlyph
{
	exch begin
	GlyphProcs exch get exec
	end
}bind def
}bind def
setglobal
/@_SaveStackLevels
	{
	Adobe_CoolType_Data
		begin
		/@vmState currentglobal def false setglobal
		@opStackCountByLevel
		@opStackLevel
		2 copy known not
			{
			2 copy
			3 dict dup/args
			7 index
			5 add array put
			put get
			}
			{
			get dup/args get dup length 3 index lt
				{
				dup length 5 add array exch
				1 index exch 0 exch putinterval
				1 index exch/args exch put
				}
				{pop}
			ifelse
			}
		ifelse
			begin
			count 1 sub
			1 index lt
				{pop count}
			if
			dup/argCount exch def
			dup 0 gt
				{
				args exch 0 exch getinterval 
			astore pop
				}
				{pop}
			ifelse
			count
			/restCount exch def
			end
		/@opStackLevel @opStackLevel 1 add def
		countdictstack 1 sub
		@dictStackCountByLevel exch @dictStackLevel exch put
		/@dictStackLevel @dictStackLevel 1 add def
		@vmState setglobal
		end
	}bind def
/@_RestoreStackLevels
	{
	Adobe_CoolType_Data
		begin
		/@opStackLevel @opStackLevel 1 sub def
		@opStackCountByLevel @opStackLevel get
			begin
			count restCount sub dup 0 gt
				{{pop}repeat}
				{pop}
			ifelse
			args 0 argCount getinterval{}forall
			end
		/@dictStackLevel @dictStackLevel 1 sub def
		@dictStackCountByLevel @dictStackLevel get
		end
	countdictstack exch sub dup 0 gt
		{{end}repeat}
		{pop}
	ifelse
	}bind def
/@_PopStackLevels
	{
	Adobe_CoolType_Data
		begin
		/@opStackLevel @opStackLevel 1 sub def
		/@dictStackLevel @dictStackLevel 1 sub def
		end
	}bind def
/@Raise
	{
	exch cvx exch errordict exch get exec
	stop
	}bind def
/@ReRaise
	{
	cvx $error/errorname get errordict exch get exec
	stop
	}bind def
/@Stopped
	{
	0 @#Stopped
	}bind def
/@#Stopped
	{
	@_SaveStackLevels
	stopped
		{@_RestoreStackLevels true}
		{@_PopStackLevels false}
	ifelse
	}bind def
/@Arg
	{
	Adobe_CoolType_Data
		begin
		@opStackCountByLevel @opStackLevel 1 sub get
		begin
		args exch
		argCount 1 sub exch sub get
		end
		end
	}bind def
currentglobal true setglobal
/CTHasResourceForAllBug
	Level2?
		{
		1 dict dup
				/@shouldNotDisappearDictValue true def
				Adobe_CoolType_Data exch/@shouldNotDisappearDict exch put
				begin
				count @_SaveStackLevels
					{(*){pop stop}128 string/Category resourceforall}
				stopped pop
				@_RestoreStackLevels
				currentdict Adobe_CoolType_Data/@shouldNotDisappearDict get dup 3 1 roll ne dup 3 1 roll
					{
						 /@shouldNotDisappearDictValue known
								{
										 {
												end
												currentdict 1 index eq
													{pop exit}
												if
										 }
									 loop
								}
						 if
					}
					{
						 pop
						 end
					}
				ifelse
		}
		{false}
	ifelse
	def
true setglobal
/CTHasResourceStatusBug
	Level2?
		{
		mark
			{/steveamerige/Category resourcestatus}
		stopped
			{cleartomark true}
			{cleartomark currentglobal not}
		ifelse
		}
		{false}
	ifelse
	def
setglobal
/CTResourceStatus
		{
		mark 3 1 roll
		/Category findresource
			begin
			({ResourceStatus}stopped)0()/SubFileDecode filter cvx exec
				{cleartomark false}
				{{3 2 roll pop true}{cleartomark false}ifelse}
			ifelse
			end
		}bind def
/CTWorkAroundBugs
	{
	Level2?
		{
		/cid_PreLoad/ProcSet resourcestatus
			{
			pop pop
			currentglobal
			mark
				{
				(*)
					{
					dup/CMap CTHasResourceStatusBug
						{CTResourceStatus}
						{resourcestatus}
					ifelse
						{
						pop dup 0 eq exch 1 eq or
							{
							dup/CMap findresource gcheck setglobal
							/CMap undefineresource
							}
							{
							pop CTHasResourceForAllBug
								{exit}
								{stop}
							ifelse
							}
						ifelse
						}
						{pop}
					ifelse
					}
				128 string/CMap resourceforall
				}
			stopped
				{cleartomark}
			stopped pop
			setglobal
			}
		if
		}
	if
	}bind def
/ds
	{
	Adobe_CoolType_Core
		begin
		CTWorkAroundBugs
		/mo/moveto load def
		/nf/newencodedfont load def
		/msf{makefont setfont}bind def
		/uf{dup undefinefont ct_VMDictUndef}bind def
		/ur/undefineresource load def
		/chp/charpath load def
		/awsh/awidthshow load def
		/wsh/widthshow load def
		/ash/ashow load def
		/@xshow/xshow load def
		/@yshow/yshow load def
		/@xyshow/xyshow load def
		/@cshow/cshow load def
		/sh/show load def
		/rp/repeat load def
		/.n/.notdef def
		end
		currentglobal false setglobal
	 userdict/Adobe_CoolType_Data 2 copy known not
		 {2 copy 10 dict put}
		if
		get
		begin
		/AddWidths? false def
		/CC 0 def
		/charcode 2 string def
		/@opStackCountByLevel 32 dict def
		/@opStackLevel 0 def
		/@dictStackCountByLevel 32 dict def
		/@dictStackLevel 0 def
		/InVMFontsByCMap 10 dict def
		/InVMDeepCopiedFonts 10 dict def
		end
		setglobal
	}bind def
/dt
	{
	currentdict Adobe_CoolType_Core eq
		{end}
	if
	}bind def
/ps
	{
	Adobe_CoolType_Core begin
	Adobe_CoolType_GVMFonts begin
	Adobe_CoolType_LVMFonts begin
	SharedFontDirectory begin
	}bind def
/pt
	{
	end
	end
	end
	end
	}bind def
/unload
	{
	systemdict/languagelevel known
		{
		systemdict/languagelevel get 2 ge
			{
			userdict/Adobe_CoolType_Core 2 copy known
				{undef}
				{pop pop}
			ifelse
			}
		if
		}
	if
	}bind def
/ndf
	{
	1 index where
		{pop pop pop}
		{dup xcheck{bind}if def}
	ifelse
	}def
/findfont systemdict
	begin
	userdict
		begin
		/globaldict where{/globaldict get begin}if
			dup where pop exch get
		/globaldict where{pop end}if
		end
	end
Adobe_CoolType_Core_Defined
	{/systemfindfont exch def}
	{
	/findfont 1 index def
	/systemfindfont exch def
	}
ifelse
/undefinefont
	{pop}ndf
/copyfont
	{
	currentglobal 3 1 roll
	1 index gcheck setglobal
	dup null eq{0}{dup length}ifelse
	2 index length add 1 add dict
		begin
		exch
			{
			1 index/FID eq
				{pop pop}
				{def}
			ifelse
			}
		forall
		dup null eq
			{pop}
			{{def}forall}
		ifelse
		currentdict
		end
	exch setglobal
	}bind def
/copyarray
	{
	currentglobal exch
	dup gcheck setglobal
	dup length array copy
	exch setglobal
	}bind def
/newencodedfont
	{
	currentglobal
		{
		SharedFontDirectory 3 index known
			{SharedFontDirectory 3 index get/FontReferenced known}
			{false}
		ifelse
		}
		{
		FontDirectory 3 index known
			{FontDirectory 3 index get/FontReferenced known}
			{
			SharedFontDirectory 3 index known
				{SharedFontDirectory 3 index get/FontReferenced known}
				{false}
			ifelse
			}
		ifelse
		}
	ifelse
	dup
		{
		3 index findfont/FontReferenced get
		2 index dup type/nametype eq
			{findfont}
		if ne
			{pop false}
		if
		}
	if
	dup
		{
		1 index dup type/nametype eq
			{findfont}
		 if
		dup/CharStrings known
			{
			/CharStrings get length
			4 index findfont/CharStrings get length
			ne
				{
				pop false
				}
			if 
			}
			{pop}
			ifelse
		}
	if
		{
		pop
		1 index findfont
		/Encoding get exch
		0 1 255
			{2 copy get 3 index 3 1 roll put}
		for
		pop pop pop
		}
		{
		currentglobal
	 4 1 roll
		dup type/nametype eq
		 {findfont}
	 if
	 dup gcheck setglobal
		dup dup maxlength 2 add dict
			begin
			exch
				{
				1 index/FID ne
				2 index/Encoding ne and
					{def}
					{pop pop}
				ifelse
				}
			forall
			/FontReferenced exch def
			/Encoding exch dup length array copy def
			/FontName 1 index dup type/stringtype eq{cvn}if def dup
			currentdict
			end
		definefont ct_VMDictPut
		setglobal
		}
	ifelse
	}bind def
/SetSubstituteStrategy
	{
	$SubstituteFont
		begin
		dup type/dicttype ne
			{0 dict}
		if
		currentdict/$Strategies known
			{
			exch $Strategies exch 
			2 copy known
				{
				get
				2 copy maxlength exch maxlength add dict
					begin
					{def}forall
					{def}forall
					currentdict
					dup/$Init known
						{dup/$Init get exec}
					if
					end
				/$Strategy exch def
				}
				{pop pop pop}
			ifelse
			}
			{pop pop}
		ifelse
		end
	}bind def
/scff
	{
	$SubstituteFont
		begin
		dup type/stringtype eq
			{dup length exch}
			{null}
		ifelse
		/$sname exch def
		/$slen exch def
		/$inVMIndex
			$sname null eq
				{
				1 index $str cvs
				dup length $slen sub $slen getinterval cvn
				}
				{$sname}
			ifelse def
		end
		{findfont}
	@Stopped
		{
		dup length 8 add string exch
		1 index 0(BadFont:)putinterval
		1 index exch 8 exch dup length string cvs putinterval cvn
			{findfont}
		@Stopped
			{pop/Courier findfont}
		if
		}
	if
	$SubstituteFont
		begin
		/$sname null def
		/$slen 0 def
		/$inVMIndex null def
		end
	}bind def
/isWidthsOnlyFont
	{
	dup/WidthsOnly known
		{pop pop true}
		{
		dup/FDepVector known
			{/FDepVector get{isWidthsOnlyFont dup{exit}if}forall}
			{
			dup/FDArray known
				{/FDArray get{isWidthsOnlyFont dup{exit}if}forall}
				{pop}
			ifelse
			}
		ifelse
		}
	ifelse
	}bind def
/ct_StyleDicts 4 dict dup begin
		 /Adobe-Japan1 4 dict dup begin
					 Level2?
								{
								/Serif
								/HeiseiMin-W3-83pv-RKSJ-H/Font resourcestatus
								{pop pop/HeiseiMin-W3}
								{
							/CIDFont/Category resourcestatus
							{
								pop pop
								/HeiseiMin-W3/CIDFont resourcestatus
								{pop pop/HeiseiMin-W3}
								{/Ryumin-Light}
								ifelse
							}
							{/Ryumin-Light}
							ifelse
								}
								ifelse
								def
								/SansSerif
								/HeiseiKakuGo-W5-83pv-RKSJ-H/Font resourcestatus
								{pop pop/HeiseiKakuGo-W5}
								{
							/CIDFont/Category resourcestatus
							{
								pop pop
								/HeiseiKakuGo-W5/CIDFont resourcestatus
								{pop pop/HeiseiKakuGo-W5}
								{/GothicBBB-Medium}
								ifelse
							}
							{/GothicBBB-Medium}
							ifelse
								}
								ifelse
								def
								/HeiseiMaruGo-W4-83pv-RKSJ-H/Font resourcestatus
								{pop pop/HeiseiMaruGo-W4}
								{
							/CIDFont/Category resourcestatus
							{
								pop pop
								/HeiseiMaruGo-W4/CIDFont resourcestatus
								{pop pop/HeiseiMaruGo-W4}
								{
									/Jun101-Light-RKSJ-H/Font resourcestatus
									{pop pop/Jun101-Light}
									{SansSerif}
									ifelse
								}
								ifelse
							}
							{
								/Jun101-Light-RKSJ-H/Font resourcestatus
								{pop pop/Jun101-Light}
								{SansSerif}
								ifelse
							}
							ifelse
								}
								ifelse
								/RoundSansSerif exch def
								/Default Serif def
								}
								{
								/Serif/Ryumin-Light def
								/SansSerif/GothicBBB-Medium def
								{
								(fonts/Jun101-Light-83pv-RKSJ-H)status
								}stopped
								{pop}{
										 {pop pop pop pop/Jun101-Light}
										 {SansSerif}
										 ifelse
										 /RoundSansSerif exch def
								}ifelse
								/Default Serif def
								}
					 ifelse
		 end
		 def
		 /Adobe-Korea1 4 dict dup begin
					/Serif/HYSMyeongJo-Medium def
					/SansSerif/HYGoThic-Medium def
					/RoundSansSerif SansSerif def
					/Default Serif def
		 end
		 def
		 /Adobe-GB1 4 dict dup begin
					/Serif/STSong-Light def
					/SansSerif/STHeiti-Regular def
					/RoundSansSerif SansSerif def
					/Default Serif def
		 end
		 def
		 /Adobe-CNS1 4 dict dup begin
					/Serif/MKai-Medium def
					/SansSerif/MHei-Medium def
					/RoundSansSerif SansSerif def
					/Default Serif def
		 end
		 def
end
def
Level2?{currentglobal true setglobal}if
/ct_BoldRomanWidthProc 
	{
	stringwidth 1 index 0 ne{exch .03 add exch}if setcharwidth
	0 0
	}bind def
/ct_Type0WidthProc 
	{
	 dup stringwidth 0 0 moveto 
	 2 index true charpath pathbbox
	 0 -1 
	 7 index 2 div .88 
	 setcachedevice2
	 pop
	0 0
	}bind def
/ct_Type0WMode1WidthProc 
	{
	 dup stringwidth 
	 pop 2 div neg -0.88
	2 copy
	moveto 
	0 -1
	 5 -1 roll true charpath pathbbox
	 setcachedevice
	}bind def
/cHexEncoding
[/c00/c01/c02/c03/c04/c05/c06/c07/c08/c09/c0A/c0B/c0C/c0D/c0E/c0F/c10/c11/c12
/c13/c14/c15/c16/c17/c18/c19/c1A/c1B/c1C/c1D/c1E/c1F/c20/c21/c22/c23/c24/c25
/c26/c27/c28/c29/c2A/c2B/c2C/c2D/c2E/c2F/c30/c31/c32/c33/c34/c35/c36/c37/c38
/c39/c3A/c3B/c3C/c3D/c3E/c3F/c40/c41/c42/c43/c44/c45/c46/c47/c48/c49/c4A/c4B
/c4C/c4D/c4E/c4F/c50/c51/c52/c53/c54/c55/c56/c57/c58/c59/c5A/c5B/c5C/c5D/c5E
/c5F/c60/c61/c62/c63/c64/c65/c66/c67/c68/c69/c6A/c6B/c6C/c6D/c6E/c6F/c70/c71
/c72/c73/c74/c75/c76/c77/c78/c79/c7A/c7B/c7C/c7D/c7E/c7F/c80/c81/c82/c83/c84
/c85/c86/c87/c88/c89/c8A/c8B/c8C/c8D/c8E/c8F/c90/c91/c92/c93/c94/c95/c96/c97
/c98/c99/c9A/c9B/c9C/c9D/c9E/c9F/cA0/cA1/cA2/cA3/cA4/cA5/cA6/cA7/cA8/cA9/cAA
/cAB/cAC/cAD/cAE/cAF/cB0/cB1/cB2/cB3/cB4/cB5/cB6/cB7/cB8/cB9/cBA/cBB/cBC/cBD
/cBE/cBF/cC0/cC1/cC2/cC3/cC4/cC5/cC6/cC7/cC8/cC9/cCA/cCB/cCC/cCD/cCE/cCF/cD0
/cD1/cD2/cD3/cD4/cD5/cD6/cD7/cD8/cD9/cDA/cDB/cDC/cDD/cDE/cDF/cE0/cE1/cE2/cE3
/cE4/cE5/cE6/cE7/cE8/cE9/cEA/cEB/cEC/cED/cEE/cEF/cF0/cF1/cF2/cF3/cF4/cF5/cF6
/cF7/cF8/cF9/cFA/cFB/cFC/cFD/cFE/cFF]def
/ct_BoldBaseFont 
	 11 dict begin
		/FontType 3 def
		/FontMatrix[1 0 0 1 0 0]def
		/FontBBox[0 0 1 1]def
		/Encoding cHexEncoding def 
		/_setwidthProc/ct_BoldRomanWidthProc load def
		/_bcstr1 1 string def
		/BuildChar
		{
			exch begin
				_basefont setfont
				_bcstr1 dup 0 4 -1 roll put
				dup 
				_setwidthProc
				3 copy 
				moveto				
				show
				_basefonto setfont
				moveto
				show
			end
		}bind def
		 currentdict
	 end 
def
systemdict/composefont known
{
/ct_DefineIdentity-H
{
	/Identity-H/CMap resourcestatus
	{
		pop pop
	}
	{
		/CIDInit/ProcSet findresource begin
		 12 dict begin
		 begincmap
		 /CIDSystemInfo 3 dict dup begin
			 /Registry(Adobe)def
			 /Ordering(Identity)def
			 /Supplement 0 def
		 end def
		 /CMapName/Identity-H def
		 /CMapVersion 1.000 def
		 /CMapType 1 def
		 1 begincodespacerange
		 <0000><FFFF>
		 endcodespacerange
		 1 begincidrange
		 <0000><FFFF>0
		 endcidrange
		 endcmap
		 CMapName currentdict/CMap defineresource pop
		 end
		 end
	 }
	 ifelse
}
def
/ct_BoldBaseCIDFont 
	 11 dict begin
		/CIDFontType 1 def
		/CIDFontName/ct_BoldBaseCIDFont def
		/FontMatrix[1 0 0 1 0 0]def
		/FontBBox[0 0 1 1]def
		/_setwidthProc/ct_Type0WidthProc load def
		/_bcstr2 2 string def
		/BuildGlyph
		{
			exch begin		 
				_basefont setfont
				_bcstr2 1 2 index 256 mod put
				_bcstr2 0 3 -1 roll 256 idiv put
				_bcstr2 dup _setwidthProc		 
				3 copy 
				moveto
				show
				_basefonto setfont
				moveto
				show
			end
		}bind def
		 currentdict
	 end 
def
}if
Level2?{setglobal}if
/ct_CopyFont{
	{
		1 index/FID ne 2 index/UniqueID ne and
		{def}{pop pop}ifelse
	}forall
}bind def
/ct_Type0CopyFont 
{
	exch
	dup length dict
	begin
	ct_CopyFont
	[
	exch
	FDepVector 
	{
		 dup/FontType get 0 eq
		{	
		1 index ct_Type0CopyFont 
		/_ctType0 exch definefont
		}
		{
		/_ctBaseFont exch
		2 index exec
		}
		 ifelse 
		 exch
	}
	forall 
	pop
	]				
	/FDepVector exch def
	currentdict
	end
}bind def
/ct_MakeBoldFont
{
	 dup/ct_SyntheticBold known
	{
		dup length 3 add dict begin 
		ct_CopyFont 
		/ct_StrokeWidth .03 0 FontMatrix idtransform pop def 
		/ct_SyntheticBold true def
		currentdict 
		end 
		definefont
	}
	{
		dup dup length 3 add dict
		begin
			ct_CopyFont
			/PaintType 2 def
			/StrokeWidth .03 0 FontMatrix idtransform pop def
			/dummybold currentdict
		end
		definefont
		dup/FontType get dup 9 ge exch 11 le and 
		{
			ct_BoldBaseCIDFont
			dup length 3 add dict copy begin
			dup/CIDSystemInfo get/CIDSystemInfo exch def
			ct_DefineIdentity-H
			/_Type0Identity/Identity-H 3 -1 roll[exch]composefont
			/_basefont exch def
			/_Type0Identity/Identity-H 3 -1 roll[exch]composefont
			/_basefonto exch def
			currentdict
			end
			/CIDFont defineresource
		}
		{
			ct_BoldBaseFont
			dup length 3 add dict copy begin
			/_basefont exch def
			/_basefonto exch def
			currentdict
			end
			definefont
		}
		ifelse
	}
	ifelse
}bind def
/ct_MakeBold{
	1 index 
	1 index
	findfont
	currentglobal 5 1 roll
	dup gcheck setglobal
		dup
		 /FontType get 0 eq
			{
				dup/WMode known{dup/WMode get 1 eq}{false}ifelse
				version length 4 ge
				and
					{version 0 4 getinterval cvi 2015 ge}
					{true}
				ifelse 
					{/ct_Type0WidthProc}
					{/ct_Type0WMode1WidthProc}
				ifelse
				ct_BoldBaseFont/_setwidthProc 3 -1 roll load put
						{ct_MakeBoldFont}ct_Type0CopyFont definefont
			}
			{
				dup/_fauxfont known not 1 index/SubstMaster known not and
				{
					 ct_BoldBaseFont/_setwidthProc /ct_BoldRomanWidthProc load put
					 ct_MakeBoldFont 
				}
				{
				2 index 2 index eq
					{exch pop	}
					{
						dup length dict begin
						ct_CopyFont
						currentdict
						end
						definefont 
					}
				ifelse
				}
			ifelse
			}
		 ifelse
		 pop pop pop
		 setglobal
}bind def
/?str1 256 string def
/?set
	{
	$SubstituteFont
		begin
		/$substituteFound false def
		/$fontname 1 index def
		/$doSmartSub false def
		end
	dup
	 findfont
	$SubstituteFont
		begin
		$substituteFound
			{false}
			{
			dup/FontName known
				{
				dup/FontName get $fontname eq
				1 index/DistillerFauxFont known not and
				/currentdistillerparams where
					{pop false 2 index isWidthsOnlyFont not and}
				if
				}
				{false}
			ifelse
			}
		ifelse
		exch pop
		/$doSmartSub true def
		end
		{
		5 1 roll pop pop pop pop
		findfont
		}
		{
		1 index
		findfont
		dup/FontType get 3 eq
		{
			6 1 roll pop pop pop pop pop false
		}
		{pop true}
		ifelse
		{
		$SubstituteFont
		begin
		pop pop
		/$styleArray 1 index def
		/$regOrdering 2 index def
		pop pop
		0 1 $styleArray length 1 sub
		{
			$styleArray exch get
			ct_StyleDicts $regOrdering
			2 copy known
			{
				get
				exch 2 copy known not
				{pop/Default}
				if
				get
				dup type/nametype eq
				{
				?str1 cvs length dup 1 add exch
				?str1 exch(-)putinterval
				exch dup length exch ?str1 exch 3 index exch putinterval
				add ?str1 exch 0 exch getinterval cvn
				}
				{
				pop pop/Unknown
				}
				ifelse
			}
			{
				pop pop pop pop/Unknown
			}
			ifelse
		}
		for
		end
		findfont 
		}if
		}
	ifelse
	currentglobal false setglobal 3 1 roll
	null copyfont definefont pop
	setglobal
	}bind def
setpacking
userdict/$SubstituteFont 25 dict put
1 dict
	begin
	/SubstituteFont
		dup $error exch 2 copy known
			{get}
			{pop pop{pop/Courier}bind}
		ifelse def
	/currentdistillerparams where dup
		{
		pop pop
		currentdistillerparams/CannotEmbedFontPolicy 2 copy known
			{get/Error eq}
			{pop pop false}
		ifelse
		}
	if not
		{
		countdictstack array dictstack 0 get
			begin
			userdict
				begin
				$SubstituteFont
					begin
					/$str 128 string def
					/$fontpat 128 string def
					/$slen 0 def
					/$sname null def
					/$match false def
					/$fontname null def
					/$substituteFound false def
					/$inVMIndex null def
					/$doSmartSub true def
					/$depth 0 def
					/$fontname null def
					/$italicangle 26.5 def
					/$dstack null def
					/$Strategies 10 dict dup
						begin
						/$Type3Underprint
							{
							currentglobal exch false setglobal
							11 dict
								begin
								/UseFont exch
									$WMode 0 ne
										{
										dup length dict copy
										dup/WMode $WMode put
										/UseFont exch definefont
										}
									if def
								/FontName $fontname dup type/stringtype eq{cvn}if def
								/FontType 3 def
								/FontMatrix[.001 0 0 .001 0 0]def
								/Encoding 256 array dup 0 1 255{/.notdef put dup}for pop def
								/FontBBox[0 0 0 0]def
								/CCInfo 7 dict dup
									begin
									/cc null def
									/x 0 def
									/y 0 def
									end def
								/BuildChar
									{
									exch
										begin
										CCInfo
											begin
											1 string dup 0 3 index put exch pop
											/cc exch def
											UseFont 1000 scalefont setfont
											cc stringwidth/y exch def/x exch def
											x y setcharwidth
											$SubstituteFont/$Strategy get/$Underprint get exec
											0 0 moveto cc show
											x y moveto
											end
										end
									}bind def
								currentdict
								end
							exch setglobal
							}bind def
						/$GetaTint
							2 dict dup
								begin
								/$BuildFont
									{
									dup/WMode known
										{dup/WMode get}
										{0}
									ifelse
									/$WMode exch def
									$fontname exch
									dup/FontName known
										{
										dup/FontName get
										dup type/stringtype eq{cvn}if
										}
										{/unnamedfont}
									ifelse
									exch
									Adobe_CoolType_Data/InVMDeepCopiedFonts get
									1 index/FontName get known
										{
										pop
										Adobe_CoolType_Data/InVMDeepCopiedFonts get
										1 index get
										null copyfont
										}
										{$deepcopyfont}
									ifelse
									exch 1 index exch/FontBasedOn exch put
									dup/FontName $fontname dup type/stringtype eq{cvn}if put
									definefont
									Adobe_CoolType_Data/InVMDeepCopiedFonts get
										begin
										dup/FontBasedOn get 1 index def
										end
									}bind def
								/$Underprint
									{
									gsave
									x abs y abs gt
										{/y 1000 def}
										{/x -1000 def 500 120 translate}
									ifelse
									Level2?
										{
										[/Separation(All)/DeviceCMYK{0 0 0 1 pop}]
										setcolorspace
										}
										{0 setgray}
									ifelse
									10 setlinewidth
									x .8 mul
									[7 3]
										{
										y mul 8 div 120 sub x 10 div exch moveto
										0 y 4 div neg rlineto
										dup 0 rlineto
										0 y 4 div rlineto
										closepath
										gsave
										Level2?
											{.2 setcolor}
											{.8 setgray}
										ifelse
										fill grestore
										stroke
										}
									forall
									pop
									grestore
									}bind def
								end def
						/$Oblique
							1 dict dup
								begin
								/$BuildFont
									{
									currentglobal exch dup gcheck setglobal
									null copyfont
										begin
										/FontBasedOn
										currentdict/FontName known
											{
											FontName
											dup type/stringtype eq{cvn}if
											}
											{/unnamedfont}
										ifelse
										def
										/FontName $fontname dup type/stringtype eq{cvn}if def
										/currentdistillerparams where
											{pop}
											{
											/FontInfo currentdict/FontInfo known
												{FontInfo null copyfont}
												{2 dict}
											ifelse
											dup
												begin
												/ItalicAngle $italicangle def
												/FontMatrix FontMatrix
												[1 0 ItalicAngle dup sin exch cos div 1 0 0]
												matrix concatmatrix readonly
												end
											4 2 roll def
											def
											}
										ifelse
										FontName currentdict
										end
									definefont
									exch setglobal
									}bind def
								end def
						/$None
							1 dict dup
								begin
								/$BuildFont{}bind def
								end def
						end def
					/$Oblique SetSubstituteStrategy
					/$findfontByEnum
						{
						dup type/stringtype eq{cvn}if
						dup/$fontname exch def
						$sname null eq
							{$str cvs dup length $slen sub $slen getinterval}
							{pop $sname}
						ifelse
						$fontpat dup 0(fonts/*)putinterval exch 7 exch putinterval
						/$match false def
						$SubstituteFont/$dstack countdictstack array dictstack put
						mark
							{
							$fontpat 0 $slen 7 add getinterval
								{/$match exch def exit}
							$str filenameforall
							}
						stopped
							{
							cleardictstack
							currentdict
							true
							$SubstituteFont/$dstack get
								{
								exch
									{
									1 index eq
										{pop false}
										{true}
									ifelse
									}
									{begin false}
								ifelse
								}
							forall
							pop
							}
						if
						cleartomark
						/$slen 0 def
						$match false ne
							{$match(fonts/)anchorsearch pop pop cvn}
							{/Courier}
						ifelse
						}bind def
					/$ROS 1 dict dup
						begin
						/Adobe 4 dict dup
							begin
							/Japan1 [/Ryumin-Light/HeiseiMin-W3
										 /GothicBBB-Medium/HeiseiKakuGo-W5
										 /HeiseiMaruGo-W4/Jun101-Light]def
							/Korea1 [/HYSMyeongJo-Medium/HYGoThic-Medium]def
							/GB1	 [/STSong-Light/STHeiti-Regular]def
							/CNS1	[/MKai-Medium/MHei-Medium]def
							end def
						end def
					/$cmapname null def
					/$deepcopyfont
						{
						dup/FontType get 0 eq
							{
							1 dict dup/FontName/copied put copyfont
								begin
								/FDepVector FDepVector copyarray
								0 1 2 index length 1 sub
									{
									2 copy get $deepcopyfont
									dup/FontName/copied put
									/copied exch definefont
									3 copy put pop pop
									}
								for
								def
								currentdict
								end
							}
							{$Strategies/$Type3Underprint get exec}
						ifelse
						}bind def
					/$buildfontname
						{
						dup/CIDFont findresource/CIDSystemInfo get
							begin
							Registry length Ordering length Supplement 8 string cvs
							3 copy length 2 add add add string
							dup 5 1 roll dup 0 Registry putinterval
							dup 4 index(-)putinterval
							dup 4 index 1 add Ordering putinterval
							4 2 roll add 1 add 2 copy(-)putinterval
							end
						1 add 2 copy 0 exch getinterval $cmapname $fontpat cvs exch
						anchorsearch
							{pop pop 3 2 roll putinterval cvn/$cmapname exch def}
							{pop pop pop pop pop}
						ifelse
						length
						$str 1 index(-)putinterval 1 add
						$str 1 index $cmapname $fontpat cvs putinterval
						$cmapname length add
						$str exch 0 exch getinterval cvn
						}bind def
					/$findfontByROS
						{
						/$fontname exch def
						$ROS Registry 2 copy known
							{
							get Ordering 2 copy known
								{get}
								{pop pop[]}
							ifelse
							}
							{pop pop[]}
						ifelse
						false exch
							{
							dup/CIDFont resourcestatus
								{
								pop pop
								save
								1 index/CIDFont findresource
								dup/WidthsOnly known
									{dup/WidthsOnly get}
									{false}
								ifelse
								exch pop
								exch restore
									{pop}
									{exch pop true exit}
								ifelse
								}
								{pop}
							ifelse
							}
						forall
							{$str cvs $buildfontname}
							{
							false(*)
								{
								save exch
								dup/CIDFont findresource
								dup/WidthsOnly known
									{dup/WidthsOnly get not}
									{true}
								ifelse
								exch/CIDSystemInfo get
								dup/Registry get Registry eq
								exch/Ordering get Ordering eq and and
									{exch restore exch pop true exit}
									{pop restore}
								ifelse
								}
							$str/CIDFont resourceforall
								{$buildfontname}
								{$fontname $findfontByEnum}
							ifelse
							}
						ifelse
						}bind def
					end
				end
				currentdict/$error known currentdict/languagelevel known and dup
					{pop $error/SubstituteFont known}
				if
				dup
					{$error}
					{Adobe_CoolType_Core}
				ifelse
				begin
					{
					/SubstituteFont
					/CMap/Category resourcestatus
						{
						pop pop
						{
						$SubstituteFont
							begin
							/$substituteFound true def
							dup length $slen gt
							$sname null ne or
							$slen 0 gt and
								{
								$sname null eq
									{dup $str cvs dup length $slen sub $slen getinterval cvn}
									{$sname}
								ifelse
								Adobe_CoolType_Data/InVMFontsByCMap get
								1 index 2 copy known
									{
									get
									false exch
										{
										pop
										currentglobal
											{
											GlobalFontDirectory 1 index known
												{exch pop true exit}
												{pop}
											ifelse
											}
											{
											FontDirectory 1 index known
												{exch pop true exit}
												{
												GlobalFontDirectory 1 index known
													{exch pop true exit}
													{pop}
												ifelse
												}
											ifelse
											}
										ifelse
										}
									forall
									}
									{pop pop false}
								ifelse
									{
									exch pop exch pop
									}
									{
									dup/CMap resourcestatus
										{
										pop pop
										dup/$cmapname exch def
										/CMap findresource/CIDSystemInfo get{def}forall
										$findfontByROS
										}
										{
										128 string cvs
										dup(-)search
											{
											3 1 roll search
												{
												3 1 roll pop
													{dup cvi}
												stopped
													{pop pop pop pop pop $findfontByEnum}
													{
													4 2 roll pop pop
													exch length
													exch
													2 index length
													2 index
													sub
													exch 1 sub -1 0
														{
														$str cvs dup length
														4 index
														0
														4 index
														4 3 roll add
														getinterval
														exch 1 index exch 3 index exch
														putinterval
														dup/CMap resourcestatus
															{
															pop pop
															4 1 roll pop pop pop
															dup/$cmapname exch def
															/CMap findresource/CIDSystemInfo get{def}forall
															$findfontByROS
															true exit
															}
															{pop}
														ifelse
														}
													for
													dup type/booleantype eq
														{pop}
														{pop pop pop $findfontByEnum}
													ifelse
													}
												ifelse
												}
												{pop pop pop $findfontByEnum}
											ifelse
											}
											{pop pop $findfontByEnum}
										ifelse
										}
									ifelse
									}
								ifelse
								}
								{//SubstituteFont exec}
							ifelse
							/$slen 0 def
							end
						}
						}
						{
						{
						$SubstituteFont
							begin
							/$substituteFound true def
							dup length $slen gt
							$sname null ne or
							$slen 0 gt and
								{$findfontByEnum}
								{//SubstituteFont exec}
							ifelse
							end
						}
						}
					ifelse
					bind readonly def
					Adobe_CoolType_Core/scfindfont/systemfindfont load put
					}
					{
					/scfindfont
						{
						$SubstituteFont
							begin
							dup systemfindfont
							dup/FontName known
								{dup/FontName get dup 3 index ne}
								{/noname true}
							ifelse
							dup
								{
								/$origfontnamefound 2 index def
								/$origfontname 4 index def/$substituteFound true def
								}
							if
							exch pop
								{
								$slen 0 gt
								$sname null ne
								3 index length $slen gt or and
									{
									pop dup $findfontByEnum findfont
									dup maxlength 1 add dict
										begin
											{1 index/FID eq{pop pop}{def}ifelse}
										forall
										currentdict
										end
									definefont
									dup/FontName known{dup/FontName get}{null}ifelse
									$origfontnamefound ne
										{
										$origfontname $str cvs print
										( substitution revised, using )print
										dup/FontName known
											{dup/FontName get}{(unspecified font)}
										ifelse
										$str cvs print(.\n)print
										}
									if
									}
									{exch pop}
								ifelse
								}
								{exch pop}
							ifelse
							end
						}bind def
					}
				ifelse
				end
			end
		Adobe_CoolType_Core_Defined not
			{
			Adobe_CoolType_Core/findfont
				{
				$SubstituteFont
					begin
					$depth 0 eq
						{
						/$fontname 1 index dup type/stringtype ne{$str cvs}if def
						/$substituteFound false def
						}
					if
					/$depth $depth 1 add def
					end
				scfindfont
				$SubstituteFont
					begin
					/$depth $depth 1 sub def
					$substituteFound $depth 0 eq and
						{
						$inVMIndex null ne
							{dup $inVMIndex $AddInVMFont}
						if
						$doSmartSub
							{
							currentdict/$Strategy known
								{$Strategy/$BuildFont get exec}
							if
							}
						if
						}
					if
					end
				}bind put
			}
		if
		}
	if
	end
/$AddInVMFont
	{
	exch/FontName 2 copy known
		{
		get
		1 dict dup begin exch 1 index gcheck def end exch
		Adobe_CoolType_Data/InVMFontsByCMap get exch
		$DictAdd
		}
		{pop pop pop}
	ifelse
	}bind def
/$DictAdd
	{
	2 copy known not
		{2 copy 4 index length dict put}
	if
	Level2? not
		{
		2 copy get dup maxlength exch length 4 index length add lt
		2 copy get dup length 4 index length add exch maxlength 1 index lt
			{
			2 mul dict
				begin
				2 copy get{forall}def
				2 copy currentdict put
				end
			}
			{pop}
		ifelse
		}
	if
	get
		begin
			{def}
		forall
		end
	}bind def
end
end
%%EndResource
currentglobal true setglobal
%%BeginResource: procset Adobe_CoolType_Utility_MAKEOCF 1.23 0
%%Copyright: Copyright 1987-2006 Adobe Systems Incorporated.
%%Version: 1.23 0
systemdict/languagelevel known dup
	{currentglobal false setglobal}
	{false}
ifelse
exch
userdict/Adobe_CoolType_Utility 2 copy known
	{2 copy get dup maxlength 27 add dict copy}
	{27 dict}
ifelse put
Adobe_CoolType_Utility
	begin
	/@eexecStartData
		 <BAB431EA07F209EB8C4348311481D9D3F76E3D15246555577D87BC510ED54E
		 118C39697FA9F6DB58128E60EB8A12FA24D7CDD2FA94D221FA9EC8DA3E5E6A1C
		 4ACECC8C2D39C54E7C946031DD156C3A6B4A09AD29E1867A>def
	/@recognizeCIDFont null def
	/ct_Level2? exch def
	/ct_Clone? 1183615869 internaldict dup
			/CCRun known not
			exch/eCCRun known not
			ct_Level2? and or def
ct_Level2?
	{globaldict begin currentglobal true setglobal}
if
	/ct_AddStdCIDMap
		ct_Level2?
			{{
				mark
				Adobe_CoolType_Utility/@recognizeCIDFont currentdict put
					{
					((Hex)57 StartData
					 0615 1e27 2c39 1c60 d8a8 cc31 fe2b f6e0
					 7aa3 e541 e21c 60d8 a8c9 c3d0 6d9e 1c60
					 d8a8 c9c2 02d7 9a1c 60d8 a849 1c60 d8a8
					 cc36 74f4 1144 b13b 77)0()/SubFileDecode filter cvx exec
					}
				stopped
					{
					 cleartomark
					 Adobe_CoolType_Utility/@recognizeCIDFont get
					 countdictstack dup array dictstack
					 exch 1 sub -1 0
						 {
						 2 copy get 3 index eq
								{1 index length exch sub 1 sub{end}repeat exit}
								{pop}
						 ifelse
						 }
					 for
					 pop pop
					 Adobe_CoolType_Utility/@eexecStartData get eexec
					}
					{cleartomark}
				ifelse
			}}
			{{
				Adobe_CoolType_Utility/@eexecStartData get eexec
			}}
		ifelse bind def
userdict/cid_extensions known
dup{cid_extensions/cid_UpdateDB known and}if
	{
	 cid_extensions
	 begin
	/cid_GetCIDSystemInfo
		{
		 1 index type/stringtype eq
			{exch cvn exch}
		 if
		 cid_extensions
			 begin
			 dup load 2 index known
				{
				 2 copy
				 cid_GetStatusInfo
				 dup null ne
					{
					 1 index load
					 3 index get
					 dup null eq
						 {pop pop cid_UpdateDB}
						 {
						 exch
						 1 index/Created get eq
							 {exch pop exch pop}
							 {pop cid_UpdateDB}
						 ifelse
						 }
					 ifelse
					}
					{pop cid_UpdateDB}
				 ifelse
				}
				{cid_UpdateDB}
			 ifelse
			 end
		}bind def
	 end
	}
if
ct_Level2?
	{end setglobal}
if
	/ct_UseNativeCapability? systemdict/composefont known def
	/ct_MakeOCF 35 dict def
	/ct_Vars 25 dict def
	/ct_GlyphDirProcs 6 dict def
	/ct_BuildCharDict 15 dict dup
		begin
		/charcode 2 string def
		/dst_string 1500 string def
		/nullstring()def
		/usewidths? true def
		end def
	ct_Level2?{setglobal}{pop}ifelse
	ct_GlyphDirProcs
		begin
		/GetGlyphDirectory
			{
			systemdict/languagelevel known
				{pop/CIDFont findresource/GlyphDirectory get}
				{
				1 index/CIDFont findresource/GlyphDirectory
				get dup type/dicttype eq
					{
					dup dup maxlength exch length sub 2 index lt
						{
						dup length 2 index add dict copy 2 index
						/CIDFont findresource/GlyphDirectory 2 index put
						}
					if
					}
				if
				exch pop exch pop
				}
			ifelse
			+
			}def
		/+
			{
			systemdict/languagelevel known
				{
				currentglobal false setglobal
				3 dict begin
					/vm exch def
				}
				{1 dict begin}
			ifelse
			/$ exch def
			systemdict/languagelevel known
				{
				vm setglobal
				/gvm currentglobal def
				$ gcheck setglobal
				}
			if
			?{$ begin}if
			}def
		/?{$ type/dicttype eq}def
		/|{
			userdict/Adobe_CoolType_Data known
				{
			Adobe_CoolType_Data/AddWidths? known
				{
				 currentdict Adobe_CoolType_Data
					begin
					 begin
						AddWidths?
								{
								Adobe_CoolType_Data/CC 3 index put
								?{def}{$ 3 1 roll put}ifelse
								CC charcode exch 1 index 0 2 index 256 idiv put
								1 index exch 1 exch 256 mod put
								stringwidth 2 array astore
								currentfont/Widths get exch CC exch put
								}
								{?{def}{$ 3 1 roll put}ifelse}
							ifelse
					end
				end
				}
				{?{def}{$ 3 1 roll put}ifelse}	ifelse
				}
				{?{def}{$ 3 1 roll put}ifelse}
			ifelse
			}def
		/!
			{
			?{end}if
			systemdict/languagelevel known
				{gvm setglobal}
			if
			end
			}def
		/:{string currentfile exch readstring pop}executeonly def
		end
	ct_MakeOCF
		begin
		/ct_cHexEncoding
		[/c00/c01/c02/c03/c04/c05/c06/c07/c08/c09/c0A/c0B/c0C/c0D/c0E/c0F/c10/c11/c12
		/c13/c14/c15/c16/c17/c18/c19/c1A/c1B/c1C/c1D/c1E/c1F/c20/c21/c22/c23/c24/c25
		/c26/c27/c28/c29/c2A/c2B/c2C/c2D/c2E/c2F/c30/c31/c32/c33/c34/c35/c36/c37/c38
		/c39/c3A/c3B/c3C/c3D/c3E/c3F/c40/c41/c42/c43/c44/c45/c46/c47/c48/c49/c4A/c4B
		/c4C/c4D/c4E/c4F/c50/c51/c52/c53/c54/c55/c56/c57/c58/c59/c5A/c5B/c5C/c5D/c5E
		/c5F/c60/c61/c62/c63/c64/c65/c66/c67/c68/c69/c6A/c6B/c6C/c6D/c6E/c6F/c70/c71
		/c72/c73/c74/c75/c76/c77/c78/c79/c7A/c7B/c7C/c7D/c7E/c7F/c80/c81/c82/c83/c84
		/c85/c86/c87/c88/c89/c8A/c8B/c8C/c8D/c8E/c8F/c90/c91/c92/c93/c94/c95/c96/c97
		/c98/c99/c9A/c9B/c9C/c9D/c9E/c9F/cA0/cA1/cA2/cA3/cA4/cA5/cA6/cA7/cA8/cA9/cAA
		/cAB/cAC/cAD/cAE/cAF/cB0/cB1/cB2/cB3/cB4/cB5/cB6/cB7/cB8/cB9/cBA/cBB/cBC/cBD
		/cBE/cBF/cC0/cC1/cC2/cC3/cC4/cC5/cC6/cC7/cC8/cC9/cCA/cCB/cCC/cCD/cCE/cCF/cD0
		/cD1/cD2/cD3/cD4/cD5/cD6/cD7/cD8/cD9/cDA/cDB/cDC/cDD/cDE/cDF/cE0/cE1/cE2/cE3
		/cE4/cE5/cE6/cE7/cE8/cE9/cEA/cEB/cEC/cED/cEE/cEF/cF0/cF1/cF2/cF3/cF4/cF5/cF6
		/cF7/cF8/cF9/cFA/cFB/cFC/cFD/cFE/cFF]def
		/ct_CID_STR_SIZE 8000 def
		/ct_mkocfStr100 100 string def
		/ct_defaultFontMtx[.001 0 0 .001 0 0]def
		/ct_1000Mtx[1000 0 0 1000 0 0]def
		/ct_raise{exch cvx exch errordict exch get exec stop}bind def
		/ct_reraise
			{cvx $error/errorname get(Error: )print dup(						 )cvs print
					errordict exch get exec stop
			}bind def
		/ct_cvnsi
			{
			1 index add 1 sub 1 exch 0 4 1 roll
				{
				2 index exch get
				exch 8 bitshift
				add
				}
			for
			exch pop
			}bind def
		/ct_GetInterval
			{
			Adobe_CoolType_Utility/ct_BuildCharDict get
				begin
				/dst_index 0 def
				dup dst_string length gt
					{dup string/dst_string exch def}
				if
				1 index ct_CID_STR_SIZE idiv
				/arrayIndex exch def
				2 index arrayIndex get
				2 index
				arrayIndex ct_CID_STR_SIZE mul
				sub
					{
					dup 3 index add 2 index length le
						{
						2 index getinterval
						dst_string dst_index 2 index putinterval
						length dst_index add/dst_index exch def
						exit
						}
						{
						1 index length 1 index sub
						dup 4 1 roll
						getinterval
						dst_string dst_index 2 index putinterval
						pop dup dst_index add/dst_index exch def
						sub
						/arrayIndex arrayIndex 1 add def
						2 index dup length arrayIndex gt
							 {arrayIndex get}
							 {
							 pop
							 exit
							 }
						ifelse
						0
						}
					ifelse
					}
				loop
				pop pop pop
				dst_string 0 dst_index getinterval
				end
			}bind def
		ct_Level2?
			{
			/ct_resourcestatus
			currentglobal mark true setglobal
				{/unknowninstancename/Category resourcestatus}
			stopped
				{cleartomark setglobal true}
				{cleartomark currentglobal not exch setglobal}
			ifelse
				{
					{
					mark 3 1 roll/Category findresource
						begin
						ct_Vars/vm currentglobal put
						({ResourceStatus}stopped)0()/SubFileDecode filter cvx exec
							{cleartomark false}
							{{3 2 roll pop true}{cleartomark false}ifelse}
						ifelse
						ct_Vars/vm get setglobal
						end
					}
				}
				{{resourcestatus}}
			ifelse bind def
			/CIDFont/Category ct_resourcestatus
				{pop pop}
				{
				currentglobal true setglobal
				/Generic/Category findresource
				dup length dict copy
				dup/InstanceType/dicttype put
				/CIDFont exch/Category defineresource pop
				setglobal
				}
			ifelse
			ct_UseNativeCapability?
				{
				/CIDInit/ProcSet findresource begin
				12 dict begin
				begincmap
				/CIDSystemInfo 3 dict dup begin
				 /Registry(Adobe)def
				 /Ordering(Identity)def
				 /Supplement 0 def
				end def
				/CMapName/Identity-H def
				/CMapVersion 1.000 def
				/CMapType 1 def
				1 begincodespacerange
				<0000><FFFF>
				endcodespacerange
				1 begincidrange
				<0000><FFFF>0
				endcidrange
				endcmap
				CMapName currentdict/CMap defineresource pop
				end
				end
				}
			if
			}
			{
			/ct_Category 2 dict begin
			/CIDFont 10 dict def
			/ProcSet	2 dict def
			currentdict
			end
			def
			/defineresource
				{
				ct_Category 1 index 2 copy known
					{
					get
					dup dup maxlength exch length eq
						{
						dup length 10 add dict copy
						ct_Category 2 index 2 index put
						}
					if
					3 index 3 index put
					pop exch pop
					}
					{pop pop/defineresource/undefined ct_raise}
				ifelse
				}bind def
			/findresource
				{
				ct_Category 1 index 2 copy known
					{
					get
					2 index 2 copy known
						{get 3 1 roll pop pop}
						{pop pop/findresource/undefinedresource ct_raise}
					ifelse
					}
					{pop pop/findresource/undefined ct_raise}
				ifelse
				}bind def
			/resourcestatus
				{
				ct_Category 1 index 2 copy known
					{
					get
					2 index known
					exch pop exch pop
						{
						0 -1 true
						}
						{
						false
						}
					ifelse
					}
					{pop pop/findresource/undefined ct_raise}
				ifelse
				}bind def
			/ct_resourcestatus/resourcestatus load def
			}
		ifelse
		/ct_CIDInit 2 dict
			begin
			/ct_cidfont_stream_init
				{
					{
					dup(Binary)eq
						{
						pop
						null
						currentfile
						ct_Level2?
							{
								{cid_BYTE_COUNT()/SubFileDecode filter}
							stopped
								{pop pop pop}
							if
							}
						if
						/readstring load
						exit
						}
					if
					dup(Hex)eq
						{
						pop
						currentfile
						ct_Level2?
							{
								{null exch/ASCIIHexDecode filter/readstring}
							stopped
								{pop exch pop(>)exch/readhexstring}
							if
							}
							{(>)exch/readhexstring}
						ifelse
						load
						exit
						}
					if
					/StartData/typecheck ct_raise
					}
				loop
				cid_BYTE_COUNT ct_CID_STR_SIZE le
					{
					2 copy cid_BYTE_COUNT string exch exec
					pop
					1 array dup
					3 -1 roll
					0 exch put
					}
					{
					cid_BYTE_COUNT ct_CID_STR_SIZE div ceiling cvi
					dup array exch 2 sub 0 exch 1 exch
						{
						2 copy
						5 index
						ct_CID_STR_SIZE
						string
						6 index exec
						pop
						put
						pop
						}
					for
					2 index
					cid_BYTE_COUNT ct_CID_STR_SIZE mod string
					3 index exec
					pop
					1 index exch
					1 index length 1 sub
					exch put
					}
				ifelse
				cid_CIDFONT exch/GlyphData exch put
				2 index null eq
					{
					pop pop pop
					}
					{
					pop/readstring load
					1 string exch
						{
						3 copy exec
						pop
						dup length 0 eq
							{
							pop pop pop pop pop
							true exit
							}
						if
						4 index
						eq
							{
							pop pop pop pop
							false exit
							}
						if
						}
					loop
					pop
					}
				ifelse
				}bind def
			/StartData
				{
				mark
					{
					currentdict
					dup/FDArray get 0 get/FontMatrix get
					0 get 0.001 eq
						{
						dup/CDevProc known not
							{
							/CDevProc 1183615869 internaldict/stdCDevProc 2 copy known
								{get}
								{
								pop pop
								{pop pop pop pop pop 0 -1000 7 index 2 div 880}
								}
							ifelse
							def
							}
						if
						}
						{
						/CDevProc
							{
							 pop pop pop pop pop
							 0
							 1 cid_temp/cid_CIDFONT get
							/FDArray get 0 get
							/FontMatrix get 0 get div
							 7 index 2 div
							 1 index 0.88 mul
							}def
						}
					ifelse
					/cid_temp 15 dict def
					cid_temp
						begin
						/cid_CIDFONT exch def
						3 copy pop
						dup/cid_BYTE_COUNT exch def 0 gt
							{
							ct_cidfont_stream_init
							FDArray
								{
								/Private get
								dup/SubrMapOffset known
									{
									begin
									/Subrs SubrCount array def
									Subrs
									SubrMapOffset
									SubrCount
									SDBytes
									ct_Level2?
										{
										currentdict dup/SubrMapOffset undef
										dup/SubrCount undef
										/SDBytes undef
										}
									if
									end
									/cid_SD_BYTES exch def
									/cid_SUBR_COUNT exch def
									/cid_SUBR_MAP_OFFSET exch def
									/cid_SUBRS exch def
									cid_SUBR_COUNT 0 gt
										{
										GlyphData cid_SUBR_MAP_OFFSET cid_SD_BYTES ct_GetInterval
										0 cid_SD_BYTES ct_cvnsi
										0 1 cid_SUBR_COUNT 1 sub
											{
											exch 1 index
											1 add
											cid_SD_BYTES mul cid_SUBR_MAP_OFFSET add
											GlyphData exch cid_SD_BYTES ct_GetInterval
											0 cid_SD_BYTES ct_cvnsi
											cid_SUBRS 4 2 roll
											GlyphData exch
											4 index
											1 index
											sub
											ct_GetInterval
											dup length string copy put
											}
										for
										pop
										}
									if
									}
									{pop}
								ifelse
								}
							forall
							}
						if
						cleartomark pop pop
						end
					CIDFontName currentdict/CIDFont defineresource pop
					end end
					}
				stopped
					{cleartomark/StartData ct_reraise}
				if
				}bind def
			currentdict
			end def
		/ct_saveCIDInit
			{
			/CIDInit/ProcSet ct_resourcestatus
				{true}
				{/CIDInitC/ProcSet ct_resourcestatus}
			ifelse
				{
				pop pop
				/CIDInit/ProcSet findresource
				ct_UseNativeCapability?
					{pop null}
					{/CIDInit ct_CIDInit/ProcSet defineresource pop}
				ifelse
				}
				{/CIDInit ct_CIDInit/ProcSet defineresource pop null}
			ifelse
			ct_Vars exch/ct_oldCIDInit exch put
			}bind def
		/ct_restoreCIDInit
			{
			ct_Vars/ct_oldCIDInit get dup null ne
				{/CIDInit exch/ProcSet defineresource pop}
				{pop}
			ifelse
			}bind def
		/ct_BuildCharSetUp
			{
			1 index
				begin
				CIDFont
					begin
					Adobe_CoolType_Utility/ct_BuildCharDict get
						begin
						/ct_dfCharCode exch def
						/ct_dfDict exch def
						CIDFirstByte ct_dfCharCode add
						dup CIDCount ge
							{pop 0}
						if
						/cid exch def
							{
							GlyphDirectory cid 2 copy known
								{get}
								{pop pop nullstring}
							ifelse
							dup length FDBytes sub 0 gt
								{
								dup
								FDBytes 0 ne
									{0 FDBytes ct_cvnsi}
									{pop 0}
								ifelse
								/fdIndex exch def
								dup length FDBytes sub FDBytes exch getinterval
								/charstring exch def
								exit
								}
								{
								pop
								cid 0 eq
									{/charstring nullstring def exit}
								if
								/cid 0 def
								}
							ifelse
							}
						loop
			}def
		/ct_SetCacheDevice
			{
			0 0 moveto
			dup stringwidth
			3 -1 roll
			true charpath
			pathbbox
			0 -1000
			7 index 2 div 880
			setcachedevice2
			0 0 moveto
			}def
		/ct_CloneSetCacheProc
			{
			1 eq
				{
				stringwidth
				pop -2 div -880
				0 -1000 setcharwidth
				moveto
				}
				{
				usewidths?
					{
					currentfont/Widths get cid
					2 copy known
						{get exch pop aload pop}
						{pop pop stringwidth}
					ifelse
					}
					{stringwidth}
				ifelse
				setcharwidth
				0 0 moveto
				}
			ifelse
			}def
		/ct_Type3ShowCharString
			{
			ct_FDDict fdIndex 2 copy known
				{get}
				{
				currentglobal 3 1 roll
				1 index gcheck setglobal
				ct_Type1FontTemplate dup maxlength dict copy
					begin
					FDArray fdIndex get
					dup/FontMatrix 2 copy known
						{get}
						{pop pop ct_defaultFontMtx}
					ifelse
					/FontMatrix exch dup length array copy def
					/Private get
					/Private exch def
					/Widths rootfont/Widths get def
					/CharStrings 1 dict dup/.notdef
						<d841272cf18f54fc13>dup length string copy put def
					currentdict
					end
				/ct_Type1Font exch definefont
				dup 5 1 roll put
				setglobal
				}
			ifelse
			dup/CharStrings get 1 index/Encoding get
			ct_dfCharCode get charstring put
			rootfont/WMode 2 copy known
				{get}
				{pop pop 0}
			ifelse
			exch
			1000 scalefont setfont
			ct_str1 0 ct_dfCharCode put
			ct_str1 exch ct_dfSetCacheProc
			ct_SyntheticBold
				{
				currentpoint
				ct_str1 show
				newpath
				moveto
				ct_str1 true charpath
				ct_StrokeWidth setlinewidth
				stroke
				}
				{ct_str1 show}
			ifelse
			}def
		/ct_Type4ShowCharString
			{
			ct_dfDict ct_dfCharCode charstring
			FDArray fdIndex get
			dup/FontMatrix get dup ct_defaultFontMtx ct_matrixeq not
				{ct_1000Mtx matrix concatmatrix concat}
				{pop}
			ifelse
			/Private get
			Adobe_CoolType_Utility/ct_Level2? get not
				{
				ct_dfDict/Private
				3 -1 roll
					{put}
				1183615869 internaldict/superexec get exec
				}
			if
			1183615869 internaldict
			Adobe_CoolType_Utility/ct_Level2? get
				{1 index}
				{3 index/Private get mark 6 1 roll}
			ifelse
			dup/RunInt known
				{/RunInt get}
				{pop/CCRun}
			ifelse
			get exec
			Adobe_CoolType_Utility/ct_Level2? get not
				{cleartomark}
			if
			}bind def
		/ct_BuildCharIncremental
			{
				{
				Adobe_CoolType_Utility/ct_MakeOCF get begin
				ct_BuildCharSetUp
				ct_ShowCharString
				}
			stopped
				{stop}
			if
			end
			end
			end
			end
			}bind def
		/BaseFontNameStr(BF00)def
		/ct_Type1FontTemplate 14 dict
			begin
			/FontType 1 def
			/FontMatrix [0.001 0 0 0.001 0 0]def
			/FontBBox [-250 -250 1250 1250]def
			/Encoding ct_cHexEncoding def
			/PaintType 0 def
			currentdict
			end def
		/BaseFontTemplate 11 dict
			begin
			/FontMatrix [0.001 0 0 0.001 0 0]def
			/FontBBox [-250 -250 1250 1250]def
			/Encoding ct_cHexEncoding def
			/BuildChar/ct_BuildCharIncremental load def
			ct_Clone?
				{
				/FontType 3 def
				/ct_ShowCharString/ct_Type3ShowCharString load def
				/ct_dfSetCacheProc/ct_CloneSetCacheProc load def
				/ct_SyntheticBold false def
				/ct_StrokeWidth 1 def
				}
				{
				/FontType 4 def
				/Private 1 dict dup/lenIV 4 put def
				/CharStrings 1 dict dup/.notdef<d841272cf18f54fc13>put def
				/PaintType 0 def
				/ct_ShowCharString/ct_Type4ShowCharString load def
				}
			ifelse
			/ct_str1 1 string def
			currentdict
			end def
		/BaseFontDictSize BaseFontTemplate length 5 add def
		/ct_matrixeq
			{
			true 0 1 5
				{
				dup 4 index exch get exch 3 index exch get eq and
				dup not
					{exit}
				if
				}
			for
			exch pop exch pop
			}bind def
		/ct_makeocf
			{
			15 dict
				begin
				exch/WMode exch def
				exch/FontName exch def
				/FontType 0 def
				/FMapType 2 def
			dup/FontMatrix known
				{dup/FontMatrix get/FontMatrix exch def}
				{/FontMatrix matrix def}
			ifelse
				/bfCount 1 index/CIDCount get 256 idiv 1 add
					dup 256 gt{pop 256}if def
				/Encoding
					256 array 0 1 bfCount 1 sub{2 copy dup put pop}for
					bfCount 1 255{2 copy bfCount put pop}for
					def
				/FDepVector bfCount dup 256 lt{1 add}if array def
				BaseFontTemplate BaseFontDictSize dict copy
					begin
					/CIDFont exch def
					CIDFont/FontBBox known
						{CIDFont/FontBBox get/FontBBox exch def}
					if
					CIDFont/CDevProc known
						{CIDFont/CDevProc get/CDevProc exch def}
					if
					currentdict
					end
				BaseFontNameStr 3(0)putinterval
				0 1 bfCount dup 256 eq{1 sub}if
					{
					FDepVector exch
					2 index BaseFontDictSize dict copy
						begin
						dup/CIDFirstByte exch 256 mul def
						FontType 3 eq
							{/ct_FDDict 2 dict def}
						if
						currentdict
						end
					1 index 16
					BaseFontNameStr 2 2 getinterval cvrs pop
					BaseFontNameStr exch definefont
					put
					}
				for
				ct_Clone?
					{/Widths 1 index/CIDFont get/GlyphDirectory get length dict def}
				if
				FontName
				currentdict
				end
			definefont
			ct_Clone?
				{
				gsave
				dup 1000 scalefont setfont
				ct_BuildCharDict
					begin
					/usewidths? false def
					currentfont/Widths get
						begin
						exch/CIDFont get/GlyphDirectory get
							{
							pop
							dup charcode exch 1 index 0 2 index 256 idiv put
							1 index exch 1 exch 256 mod put
							stringwidth 2 array astore def
							}
						forall
						end
					/usewidths? true def
					end
				grestore
				}
				{exch pop}
			ifelse
			}bind def
		currentglobal true setglobal
		/ct_ComposeFont
			{
			ct_UseNativeCapability?
				{				
				2 index/CMap ct_resourcestatus
					{pop pop exch pop}
					{
					/CIDInit/ProcSet findresource
						begin
						12 dict
							begin
							begincmap
							/CMapName 3 index def
							/CMapVersion 1.000 def
							/CMapType 1 def
							exch/WMode exch def
							/CIDSystemInfo 3 dict dup
								begin
								/Registry(Adobe)def
								/Ordering
								CMapName ct_mkocfStr100 cvs
								(Adobe-)search
									{
									pop pop
									(-)search
										{
										dup length string copy
										exch pop exch pop
										}
										{pop(Identity)}
									ifelse
									}
									{pop (Identity)}
								ifelse
								def
								/Supplement 0 def
								end def
							1 begincodespacerange
							<0000><FFFF>
							endcodespacerange
							1 begincidrange
							<0000><FFFF>0
							endcidrange
							endcmap
							CMapName currentdict/CMap defineresource pop
							end
						end
					}
				ifelse
				composefont
				}
				{
				3 2 roll pop
				0 get/CIDFont findresource
				ct_makeocf
				}
			ifelse
			}bind def
			setglobal
		/ct_MakeIdentity
			{
			ct_UseNativeCapability?
				{
				1 index/CMap ct_resourcestatus
					{pop pop}
					{
					/CIDInit/ProcSet findresource begin
					12 dict begin
					begincmap
					/CMapName 2 index def
					/CMapVersion 1.000 def
					/CMapType 1 def
					/CIDSystemInfo 3 dict dup
						begin
						/Registry(Adobe)def
						/Ordering
						CMapName ct_mkocfStr100 cvs
						(Adobe-)search
							{
							pop pop
							(-)search
								{dup length string copy exch pop exch pop}
								{pop(Identity)}
							ifelse
							}
							{pop(Identity)}
						ifelse
						def
						/Supplement 0 def
						end def
					1 begincodespacerange
					<0000><FFFF>
					endcodespacerange
					1 begincidrange
					<0000><FFFF>0
					endcidrange
					endcmap
					CMapName currentdict/CMap defineresource pop
					end
					end
					}
				ifelse
				composefont
				}
				{
				exch pop
				0 get/CIDFont findresource
				ct_makeocf
				}
			ifelse
			}bind def
		currentdict readonly pop
		end
	end
%%EndResource
setglobal
%%BeginResource: procset Adobe_CoolType_Utility_T42 1.0 0
%%Copyright: Copyright 1987-2004 Adobe Systems Incorporated.
%%Version: 1.0 0
userdict/ct_T42Dict 15 dict put
ct_T42Dict begin
/Is2015?
{
 version
 cvi
 2015
 ge
}bind def
/AllocGlyphStorage
{
 Is2015?
 {	
	pop
 }
 {
	{string}forall
 }ifelse
}bind def
/Type42DictBegin
{
25 dict begin
 /FontName exch def
 /CharStrings 256 dict 
begin
	 /.notdef 0 def
	 currentdict 
end def
 /Encoding exch def
 /PaintType 0 def
 /FontType 42 def
 /FontMatrix[1 0 0 1 0 0]def
 4 array astore cvx/FontBBox exch def
 /sfnts
}bind def
/Type42DictEnd 
{
 currentdict dup/FontName get exch definefont end
ct_T42Dict exch
dup/FontName get exch put
}bind def
/RD{string currentfile exch readstring pop}executeonly def
/PrepFor2015
{
Is2015?
{		 
	/GlyphDirectory 
	 16
	 dict def
	 sfnts 0 get
	 dup
	 2 index
	(glyx)
	 putinterval
	 2 index 
	(locx)
	 putinterval
	 pop
	 pop
}
{
	 pop
	 pop
}ifelse			
}bind def
/AddT42Char
{
Is2015?
{
	/GlyphDirectory get 
	begin
	def
	end
	pop
	pop
}
{
	/sfnts get
	4 index
	get
	3 index
 2 index
	putinterval
	pop
	pop
	pop
	pop
}ifelse
}bind def
/T0AddT42Mtx2
{
/CIDFont findresource/Metrics2 get begin def end
}bind def
end
%%EndResource
currentglobal true setglobal
%%BeginFile: MMFauxFont.prc
%%Copyright: Copyright 1987-2001 Adobe Systems Incorporated. 
%%All Rights Reserved.
userdict /ct_EuroDict 10 dict put
ct_EuroDict begin
/ct_CopyFont 
{
    { 1 index /FID ne {def} {pop pop} ifelse} forall
} def
/ct_GetGlyphOutline
{
   gsave
   initmatrix newpath
   exch findfont dup 
   length 1 add dict 
   begin 
		ct_CopyFont 
		/Encoding Encoding dup length array copy 
		dup
		4 -1 roll
		0 exch put   
		def
		currentdict
   end
   /ct_EuroFont exch definefont
   1000 scalefont setfont
   0 0 moveto
   [
       <00> stringwidth 
       <00> false charpath
       pathbbox
       [
       {/m cvx} {/l cvx} {/c cvx} {/cp cvx} pathforall
   grestore
   counttomark 8 add
}
def
/ct_MakeGlyphProc
{
   ] cvx
   /ct_PSBuildGlyph cvx
   ] cvx
} def
/ct_PSBuildGlyph 
{ 
 	gsave 
	8 -1 roll pop 
	7 1 roll 
        6 -2 roll ct_FontMatrix transform 6 2 roll
        4 -2 roll ct_FontMatrix transform 4 2 roll
        ct_FontMatrix transform 
	currentdict /PaintType 2 copy known {get 2 eq}{pop pop false} ifelse  
	dup  9 1 roll 
	{  
		currentdict /StrokeWidth 2 copy known  
		{   
			get 2 div   
			0 ct_FontMatrix dtransform pop
			5 1 roll  
			4 -1 roll 4 index sub   
			4 1 roll   
			3 -1 roll 4 index sub  
			3 1 roll   
			exch 4 index add exch  
			4 index add  
			5 -1 roll pop  
		}  
		{	 
			pop pop 
		}  
		ifelse  
	}       
    if  
	setcachedevice  
        ct_FontMatrix concat
        ct_PSPathOps begin 
		exec 
	end 
	{  
		currentdict /StrokeWidth 2 copy known  
			{ get }  
			{ pop pop 0 }  
  	    ifelse  
		setlinewidth stroke  
	}  
	{   
	    fill  
	}  
	ifelse  
    grestore
} def 
/ct_PSPathOps 4 dict dup begin 
	/m {moveto} def 
	/l {lineto} def 
	/c {curveto} def 
	/cp {closepath} def 
end 
def 
/ct_matrix1000 [1000 0 0 1000 0 0] def
/ct_AddGlyphProc  
{
   2 index findfont dup length 4 add dict 
   begin 
	ct_CopyFont 
	/CharStrings CharStrings dup length 1 add dict copy
      begin
         3 1 roll def  
         currentdict 
      end 
      def
      /ct_FontMatrix ct_matrix1000 FontMatrix matrix concatmatrix def
      /ct_PSBuildGlyph /ct_PSBuildGlyph load def
      /ct_PSPathOps /ct_PSPathOps load def
      currentdict
   end
   definefont pop
}
def
systemdict /languagelevel known
{
	/ct_AddGlyphToPrinterFont {
		2 copy
		ct_GetGlyphOutline 3 add -1 roll restore 
		ct_MakeGlyphProc 
		ct_AddGlyphProc
	} def
}
{
	/ct_AddGlyphToPrinterFont {
	    pop pop restore
		Adobe_CTFauxDict /$$$FONTNAME get
		/Euro
		Adobe_CTFauxDict /$$$SUBSTITUTEBASE get
		ct_EuroDict exch get
		ct_AddGlyphProc
	} def
} ifelse
/AdobeSansMM 
{ 
556 0 24 -19 541 703 
	{ 
	541 628 m 
	510 669 442 703 354 703 c 
	201 703 117 607 101 444 c 
	50 444 l 
	25 372 l 
	97 372 l 
	97 301 l 
	49 301 l 
	24 229 l 
	103 229 l 
	124 67 209 -19 350 -19 c 
	435 -19 501 25 509 32 c 
	509 131 l 
	492 105 417 60 343 60 c 
	267 60 204 127 197 229 c 
	406 229 l 
	430 301 l 
	191 301 l 
	191 372 l 
	455 372 l 
	479 444 l 
	194 444 l 
	201 531 245 624 348 624 c 
	433 624 484 583 509 534 c 
	cp 
	556 0 m 
	}
ct_PSBuildGlyph
} def
/AdobeSerifMM 
{ 
500 0 10 -12 484 692 
	{ 
	347 298 m 
	171 298 l 
	170 310 170 322 170 335 c 
	170 362 l 
	362 362 l 
	374 403 l 
	172 403 l 
	184 580 244 642 308 642 c 
	380 642 434 574 457 457 c 
	481 462 l 
	474 691 l 
	449 691 l 
	433 670 429 657 410 657 c 
	394 657 360 692 299 692 c 
	204 692 94 604 73 403 c 
	22 403 l 
	10 362 l 
	70 362 l 
	69 352 69 341 69 330 c 
	69 319 69 308 70 298 c 
	22 298 l 
	10 257 l 
	73 257 l 
	97 57 216 -12 295 -12 c 
	364 -12 427 25 484 123 c 
	458 142 l 
	425 101 384 37 316 37 c 
	256 37 189 84 173 257 c 
	335 257 l 
	cp 
	500 0 m 
	} 
ct_PSBuildGlyph 
} def 
end		
%%EndFile
setglobal
Adobe_CoolType_Core begin /$Oblique SetSubstituteStrategy end
%%BeginResource: procset Adobe_AGM_Image 1.0 0
%%Version: 1.0 0
%%Copyright: Copyright(C)2000-2006 Adobe Systems, Inc. All Rights Reserved.
systemdict/setpacking known
{
	currentpacking
	true setpacking
}if
userdict/Adobe_AGM_Image 71 dict dup begin put
/Adobe_AGM_Image_Id/Adobe_AGM_Image_1.0_0 def
/nd{
	null def
}bind def
/AGMIMG_&image nd
/AGMIMG_&colorimage nd
/AGMIMG_&imagemask nd
/AGMIMG_mbuf()def
/AGMIMG_ybuf()def
/AGMIMG_kbuf()def
/AGMIMG_c 0 def
/AGMIMG_m 0 def
/AGMIMG_y 0 def
/AGMIMG_k 0 def
/AGMIMG_tmp nd
/AGMIMG_imagestring0 nd
/AGMIMG_imagestring1 nd
/AGMIMG_imagestring2 nd
/AGMIMG_imagestring3 nd
/AGMIMG_imagestring4 nd
/AGMIMG_imagestring5 nd
/AGMIMG_cnt nd
/AGMIMG_fsave nd
/AGMIMG_colorAry nd
/AGMIMG_override nd
/AGMIMG_name nd
/AGMIMG_maskSource nd
/AGMIMG_flushfilters nd
/invert_image_samples nd
/knockout_image_samples	nd
/img nd
/sepimg nd
/devnimg nd
/idximg nd
/ds
{
	Adobe_AGM_Core begin
	Adobe_AGM_Image begin
	/AGMIMG_&image systemdict/image get def
	/AGMIMG_&imagemask systemdict/imagemask get def
	/colorimage where{
		pop
		/AGMIMG_&colorimage/colorimage ldf
	}if
	end
	end
}def
/ps
{
	Adobe_AGM_Image begin
	/AGMIMG_ccimage_exists{/customcolorimage where 
		{
			pop
			/Adobe_AGM_OnHost_Seps where
			{
			pop false
			}{
			/Adobe_AGM_InRip_Seps where
				{
				pop false
				}{
					true
				}ifelse
			}ifelse
			}{
			false
		}ifelse 
	}bdf
	level2{
		/invert_image_samples
		{
			Adobe_AGM_Image/AGMIMG_tmp Decode length ddf
			/Decode[Decode 1 get Decode 0 get]def
		}def
		/knockout_image_samples
		{
			Operator/imagemask ne{
				/Decode[1 1]def
			}if
		}def
	}{	
		/invert_image_samples
		{
			{1 exch sub}currenttransfer addprocs settransfer
		}def
		/knockout_image_samples
		{
			{pop 1}currenttransfer addprocs settransfer
		}def
	}ifelse
	/img/imageormask ldf
	/sepimg/sep_imageormask ldf
	/devnimg/devn_imageormask ldf
	/idximg/indexed_imageormask ldf
	/_ctype 7 def
	currentdict{
		dup xcheck 1 index type dup/arraytype eq exch/packedarraytype eq or and{
			bind
		}if
		def
	}forall
}def
/pt
{
	end
}def
/dt
{
}def
/AGMIMG_flushfilters
{
	dup type/arraytype ne
		{1 array astore}if
	dup 0 get currentfile ne
		{dup 0 get flushfile}if
		{
		dup type/filetype eq
			{
			dup status 1 index currentfile ne and
				{closefile}
				{pop}
			ifelse
			}{pop}ifelse
		}forall
}def
/AGMIMG_init_common
{
	currentdict/T known{/ImageType/T ldf currentdict/T undef}if
	currentdict/W known{/Width/W ldf currentdict/W undef}if
	currentdict/H known{/Height/H ldf currentdict/H undef}if
	currentdict/M known{/ImageMatrix/M ldf currentdict/M undef}if
	currentdict/BC known{/BitsPerComponent/BC ldf currentdict/BC undef}if
	currentdict/D known{/Decode/D ldf currentdict/D undef}if
	currentdict/DS known{/DataSource/DS ldf currentdict/DS undef}if
	currentdict/O known{
		/Operator/O load 1 eq{
			/imagemask
		}{
			/O load 2 eq{
				/image 
			}{
				/colorimage
			}ifelse
		}ifelse
		def
		currentdict/O undef
	}if
	currentdict/HSCI known{/HostSepColorImage/HSCI ldf currentdict/HSCI undef}if
	currentdict/MD known{/MultipleDataSources/MD ldf currentdict/MD undef}if
	currentdict/I known{/Interpolate/I ldf currentdict/I undef}if
	currentdict/SI known{/SkipImageProc/SI ldf currentdict/SI undef}if
	/DataSource load xcheck not{
		DataSource type/arraytype eq{
			DataSource 0 get type/filetype eq{
				/_Filters DataSource def
				currentdict/MultipleDataSources known not{
					/DataSource DataSource dup length 1 sub get def 
				}if
			}if
		}if
		currentdict/MultipleDataSources known not{
			/MultipleDataSources DataSource type/arraytype eq{
				DataSource length 1 gt
			}
			{false}ifelse def
		}if
	}if
	/NComponents Decode length 2 div def
	currentdict/SkipImageProc known not{/SkipImageProc{false}def}if
}bdf
/imageormask_sys
{
	begin
		AGMIMG_init_common
		save mark
		level2{
			currentdict
			Operator/imagemask eq{
				AGMIMG_&imagemask
			}{
				use_mask{
					process_mask AGMIMG_&image
				}{
					AGMIMG_&image
				}ifelse
			}ifelse
		}{
			Width Height
			Operator/imagemask eq{
				Decode 0 get 1 eq Decode 1 get 0 eq	and
				ImageMatrix/DataSource load
				AGMIMG_&imagemask
			}{
				BitsPerComponent ImageMatrix/DataSource load
				AGMIMG_&image
			}ifelse
		}ifelse
		currentdict/_Filters known{_Filters AGMIMG_flushfilters}if
		cleartomark restore
	end
}def
/overprint_plate
{
	currentoverprint{
		0 get dup type/nametype eq{
			dup/DeviceGray eq{
				pop AGMCORE_black_plate not
			}{
				/DeviceCMYK eq{
					AGMCORE_is_cmyk_sep not
				}if
			}ifelse
		}{
			false exch
			{
				 AGMOHS_sepink eq or
			}forall
			not
		}ifelse
	}{
		pop false
	}ifelse
}def
/process_mask
{
	level3{
		dup begin
		/ImageType 1 def
		end
		4 dict begin
			/DataDict exch def
			/ImageType 3 def
			/InterleaveType 3 def
			/MaskDict 9 dict begin
				/ImageType 1 def
				/Width DataDict dup/MaskWidth known{/MaskWidth}{/Width}ifelse get def
				/Height DataDict dup/MaskHeight known{/MaskHeight}{/Height}ifelse get def
				/ImageMatrix[Width 0 0 Height neg 0 Height]def
				/NComponents 1 def
				/BitsPerComponent 1 def
				/Decode DataDict dup/MaskD known{/MaskD}{[1 0]}ifelse get def
				/DataSource Adobe_AGM_Core/AGMIMG_maskSource get def
			currentdict end def
		currentdict end
	}if
}def
/use_mask
{
	dup/Mask known	{dup/Mask get}{false}ifelse
}def
/imageormask
{
	begin
		AGMIMG_init_common
		SkipImageProc{
			currentdict consumeimagedata
		}
		{
			save mark
			level2 AGMCORE_host_sep not and{
				currentdict
				Operator/imagemask eq DeviceN_PS2 not and{
					imagemask
				}{
					AGMCORE_in_rip_sep currentoverprint and currentcolorspace 0 get/DeviceGray eq and{
						[/Separation/Black/DeviceGray{}]setcolorspace
						/Decode[Decode 1 get Decode 0 get]def
					}if
					use_mask{
						process_mask image
					}{
						DeviceN_NoneName DeviceN_PS2 Indexed_DeviceN level3 not and or or AGMCORE_in_rip_sep and 
						{
							Names convert_to_process not{
								2 dict begin
								/imageDict xdf
								/names_index 0 def
								gsave
								imageDict write_image_file{
									Names{
										dup(None)ne{
											[/Separation 3 -1 roll/DeviceGray{1 exch sub}]setcolorspace
											Operator imageDict read_image_file
											names_index 0 eq{true setoverprint}if
											/names_index names_index 1 add def
										}{
											pop
										}ifelse
									}forall
									close_image_file
								}if
								grestore
								end
							}{
								Operator/imagemask eq{
									imagemask
								}{
									image
								}ifelse
							}ifelse
						}{
							Operator/imagemask eq{
								imagemask
							}{
								image
							}ifelse
						}ifelse
					}ifelse
				}ifelse
			}{
				Width Height
				Operator/imagemask eq{
					Decode 0 get 1 eq Decode 1 get 0 eq	and
					ImageMatrix/DataSource load
					/Adobe_AGM_OnHost_Seps where{
						pop imagemask
					}{
						currentgray 1 ne{
							currentdict imageormask_sys
						}{
							currentoverprint not{
								1 AGMCORE_&setgray
								currentdict imageormask_sys
							}{
								currentdict ignoreimagedata
							}ifelse				 		
						}ifelse
					}ifelse
				}{
					BitsPerComponent ImageMatrix 
					MultipleDataSources{
						0 1 NComponents 1 sub{
							DataSource exch get
						}for
					}{
						/DataSource load
					}ifelse
					Operator/colorimage eq{
						AGMCORE_host_sep{
							MultipleDataSources level2 or NComponents 4 eq and{
								AGMCORE_is_cmyk_sep{
									MultipleDataSources{
										/DataSource DataSource 0 get xcheck
											{
											[
											DataSource 0 get/exec cvx
											DataSource 1 get/exec cvx
											DataSource 2 get/exec cvx
											DataSource 3 get/exec cvx
											/AGMCORE_get_ink_data cvx
											]cvx
											}{
											DataSource aload pop AGMCORE_get_ink_data
											}ifelse def
									}{
										/DataSource 
										Width BitsPerComponent mul 7 add 8 idiv Height mul 4 mul 
										/DataSource load
										filter_cmyk 0()/SubFileDecode filter def
									}ifelse
									/Decode[Decode 0 get Decode 1 get]def
									/MultipleDataSources false def
									/NComponents 1 def
									/Operator/image def
									invert_image_samples
						 			1 AGMCORE_&setgray
									currentdict imageormask_sys
								}{
									currentoverprint not Operator/imagemask eq and{
 			 							1 AGMCORE_&setgray
 			 							currentdict imageormask_sys
 			 						}{
 			 							currentdict ignoreimagedata
 			 						}ifelse
								}ifelse
							}{	
								MultipleDataSources NComponents AGMIMG_&colorimage						
							}ifelse
						}{
							true NComponents colorimage
						}ifelse
					}{
						Operator/image eq{
							AGMCORE_host_sep{
								/DoImage true def
								currentdict/HostSepColorImage known{HostSepColorImage not}{false}ifelse
								{
									AGMCORE_black_plate not Operator/imagemask ne and{
										/DoImage false def
										currentdict ignoreimagedata
					 				}if
								}if
						 		1 AGMCORE_&setgray
								DoImage
									{currentdict imageormask_sys}if
							}{
								use_mask{
									process_mask image
								}{
									image
								}ifelse
							}ifelse
						}{
							Operator/knockout eq{
								pop pop pop pop pop
								currentcolorspace overprint_plate not{
									knockout_unitsq
								}if
							}if
						}ifelse
					}ifelse
				}ifelse
			}ifelse
			cleartomark restore
		}ifelse
		currentdict/_Filters known{_Filters AGMIMG_flushfilters}if
	end
}def
/sep_imageormask
{
 	/sep_colorspace_dict AGMCORE_gget begin
	CSA map_csa
	begin
	AGMIMG_init_common
	SkipImageProc{
		currentdict consumeimagedata
	}{
		save mark 
		AGMCORE_avoid_L2_sep_space{
			/Decode[Decode 0 get 255 mul Decode 1 get 255 mul]def
		}if
 		AGMIMG_ccimage_exists 
		MappedCSA 0 get/DeviceCMYK eq and
		currentdict/Components known and 
		Name()ne and 
		Name(All)ne and 
		Operator/image eq and
		AGMCORE_producing_seps not and
		level2 not and
		{
			Width Height BitsPerComponent ImageMatrix 
			[
			/DataSource load/exec cvx
			{
				0 1 2 index length 1 sub{
					1 index exch
					2 copy get 255 xor put
				}for
			}/exec cvx
			]cvx bind
			MappedCSA 0 get/DeviceCMYK eq{
				Components aload pop
			}{
				0 0 0 Components aload pop 1 exch sub
			}ifelse
			Name findcmykcustomcolor
			customcolorimage
		}{
			AGMCORE_producing_seps not{
				level2{
 					//Adobe_AGM_Core/AGMCORE_pattern_paint_type get 2 ne AGMCORE_avoid_L2_sep_space not and currentcolorspace 0 get/Separation ne and{
						[/Separation Name MappedCSA sep_proc_name exch dup 0 get 15 string cvs(/Device)anchorsearch{pop pop 0 get}{pop}ifelse exch load]setcolorspace_opt
						/sep_tint AGMCORE_gget setcolor
					}if
					currentdict imageormask
				}{
					currentdict
					Operator/imagemask eq{
						imageormask
					}{
						sep_imageormask_lev1
					}ifelse
				}ifelse
 			}{
				AGMCORE_host_sep{
					Operator/knockout eq{
						currentdict/ImageMatrix get concat
						knockout_unitsq
					}{
						currentgray 1 ne{
 							AGMCORE_is_cmyk_sep Name(All)ne and{
 								level2{
 									Name AGMCORE_IsSeparationAProcessColor 
 									{
 										Operator/imagemask eq{
 											//Adobe_AGM_Core/AGMCORE_pattern_paint_type get 2 ne{
 												/sep_tint AGMCORE_gget 1 exch sub AGMCORE_&setcolor
 											}if
 										}{
											invert_image_samples
 										}ifelse
	 								}{
	 									//Adobe_AGM_Core/AGMCORE_pattern_paint_type get 2 ne{
	 										[/Separation Name[/DeviceGray]
	 										{
	 											sep_colorspace_proc AGMCORE_get_ink_data
												1 exch sub
	 										}bind
											]AGMCORE_&setcolorspace
											/sep_tint AGMCORE_gget AGMCORE_&setcolor
										}if
 									}ifelse
 									currentdict imageormask_sys
	 							}{
	 								currentdict
									Operator/imagemask eq{
										imageormask_sys
									}{
										sep_image_lev1_sep
									}ifelse
	 							}ifelse
 							}{
 								Operator/imagemask ne{
									invert_image_samples
 								}if
		 						currentdict imageormask_sys
 							}ifelse
 						}{
 							currentoverprint not Name(All)eq or Operator/imagemask eq and{
								currentdict imageormask_sys 
								}{
								currentoverprint not
									{
 									gsave 
 									knockout_unitsq
 									grestore
									}if
								currentdict consumeimagedata 
		 					}ifelse
 						}ifelse
		 			}ifelse
 				}{
					//Adobe_AGM_Core/AGMCORE_pattern_paint_type get 2 ne{
						currentcolorspace 0 get/Separation ne{
							[/Separation Name MappedCSA sep_proc_name exch 0 get exch load]setcolorspace_opt
							/sep_tint AGMCORE_gget setcolor
						}if
					}if
					currentoverprint 
					MappedCSA 0 get/DeviceCMYK eq and 
					Name AGMCORE_IsSeparationAProcessColor not and
					//Adobe_AGM_Core/AGMCORE_pattern_paint_type get 2 ne{Name inRip_spot_has_ink not and}{false}ifelse 
					Name(All)ne and{
						imageormask_l2_overprint
					}{
						currentdict imageormask
 					}ifelse
				}ifelse
			}ifelse
		}ifelse
		cleartomark restore
	}ifelse
	currentdict/_Filters known{_Filters AGMIMG_flushfilters}if
	end
	end
}def
/colorSpaceElemCnt
{
	mark currentcolor counttomark dup 2 add 1 roll cleartomark
}bdf
/devn_sep_datasource
{
	1 dict begin
	/dataSource xdf
	[
		0 1 dataSource length 1 sub{
			dup currentdict/dataSource get/exch cvx/get cvx/exec cvx
			/exch cvx names_index/ne cvx[/pop cvx]cvx/if cvx
		}for
	]cvx bind
	end
}bdf		
/devn_alt_datasource
{
	11 dict begin
	/convProc xdf
	/origcolorSpaceElemCnt xdf
	/origMultipleDataSources xdf
	/origBitsPerComponent xdf
	/origDecode xdf
	/origDataSource xdf
	/dsCnt origMultipleDataSources{origDataSource length}{1}ifelse def
	/DataSource origMultipleDataSources
		{
			[
			BitsPerComponent 8 idiv origDecode length 2 idiv mul string
			0 1 origDecode length 2 idiv 1 sub
				{
				dup 7 mul 1 add index exch dup BitsPerComponent 8 idiv mul exch
				origDataSource exch get 0()/SubFileDecode filter
				BitsPerComponent 8 idiv string/readstring cvx/pop cvx/putinterval cvx
				}for 
			]bind cvx
		}{origDataSource}ifelse 0()/SubFileDecode filter def		
	[
		origcolorSpaceElemCnt string
		0 2 origDecode length 2 sub
			{
			dup origDecode exch get dup 3 -1 roll 1 add origDecode exch get exch sub 2 BitsPerComponent exp 1 sub div
			1 BitsPerComponent 8 idiv{DataSource/read cvx/not cvx{0}/if cvx/mul cvx}repeat/mul cvx/add cvx
			}for
		/convProc load/exec cvx
		origcolorSpaceElemCnt 1 sub -1 0
			{
			/dup cvx 2/add cvx/index cvx
			3 1/roll cvx/exch cvx 255/mul cvx/cvi cvx/put cvx
			}for
	]bind cvx 0()/SubFileDecode filter
	end
}bdf
/devn_imageormask
{
 	/devicen_colorspace_dict AGMCORE_gget begin
	CSA map_csa
	2 dict begin
	dup
	/srcDataStrs[3 -1 roll begin
		AGMIMG_init_common
		currentdict/MultipleDataSources known{MultipleDataSources{DataSource length}{1}ifelse}{1}ifelse
		{
			Width Decode length 2 div mul cvi
			{
				dup 65535 gt{1 add 2 div cvi}{exit}ifelse
			}loop
			string
		}repeat
		end]def
	/dstDataStr srcDataStrs 0 get length string def
	begin
	AGMIMG_init_common
	SkipImageProc{
		currentdict consumeimagedata
	}{
		save mark 
		AGMCORE_producing_seps not{
			level3 not{
				Operator/imagemask ne{
					/DataSource[[
						DataSource Decode BitsPerComponent currentdict/MultipleDataSources known{MultipleDataSources}{false}ifelse
						colorSpaceElemCnt/devicen_colorspace_dict AGMCORE_gget/TintTransform get 
						devn_alt_datasource 1/string cvx/readstring cvx/pop cvx]cvx colorSpaceElemCnt 1 sub{dup}repeat]def				
					/MultipleDataSources true def
					/Decode colorSpaceElemCnt[exch{0 1}repeat]def
				}if
			}if
			currentdict imageormask
 		}{
			AGMCORE_host_sep{
				Names convert_to_process{
					CSA get_csa_by_name 0 get/DeviceCMYK eq{
						/DataSource
							Width BitsPerComponent mul 7 add 8 idiv Height mul 4 mul 
							DataSource Decode BitsPerComponent currentdict/MultipleDataSources known{MultipleDataSources}{false}ifelse
							4/devicen_colorspace_dict AGMCORE_gget/TintTransform get 
							devn_alt_datasource
						filter_cmyk 0()/SubFileDecode filter def
						/MultipleDataSources false def
						/Decode[1 0]def
						/DeviceGray setcolorspace
			 			currentdict imageormask_sys
 					}{
						AGMCORE_report_unsupported_color_space
						AGMCORE_black_plate{
							/DataSource
								DataSource Decode BitsPerComponent currentdict/MultipleDataSources known{MultipleDataSources}{false}ifelse
								CSA get_csa_by_name 0 get/DeviceRGB eq{3}{1}ifelse/devicen_colorspace_dict AGMCORE_gget/TintTransform get
								devn_alt_datasource
							/MultipleDataSources false def
							/Decode colorSpaceElemCnt[exch{0 1}repeat]def
				 			currentdict imageormask_sys
				 		}{
	 						gsave 
	 						knockout_unitsq
	 						grestore
							currentdict consumeimagedata 
						}ifelse
 					}ifelse
				}
				{	
					/devicen_colorspace_dict AGMCORE_gget/names_index known{
	 					Operator/imagemask ne{
	 						MultipleDataSources{
		 						/DataSource[DataSource devn_sep_datasource/exec cvx]cvx def
								/MultipleDataSources false def
	 						}{
								/DataSource/DataSource load dstDataStr srcDataStrs 0 get filter_devn def
	 						}ifelse
							invert_image_samples
	 					}if
			 			currentdict imageormask_sys
	 				}{
	 					currentoverprint not Operator/imagemask eq and{
							currentdict imageormask_sys 
							}{
							currentoverprint not
								{
	 							gsave 
	 							knockout_unitsq
	 							grestore
								}if
							currentdict consumeimagedata 
			 			}ifelse
	 				}ifelse
	 			}ifelse
 			}{
				currentdict imageormask
			}ifelse
		}ifelse
		cleartomark restore
	}ifelse
	currentdict/_Filters known{_Filters AGMIMG_flushfilters}if
	end
	end
	end
}def
/imageormask_l2_overprint
{
	currentdict
	currentcmykcolor add add add 0 eq{
		currentdict consumeimagedata
	}{
		level3{			
			currentcmykcolor 
			/AGMIMG_k xdf 
			/AGMIMG_y xdf 
			/AGMIMG_m xdf 
			/AGMIMG_c xdf
			Operator/imagemask eq{
				[/DeviceN[
				AGMIMG_c 0 ne{/Cyan}if
				AGMIMG_m 0 ne{/Magenta}if
				AGMIMG_y 0 ne{/Yellow}if
				AGMIMG_k 0 ne{/Black}if
				]/DeviceCMYK{}]setcolorspace
				AGMIMG_c 0 ne{AGMIMG_c}if
				AGMIMG_m 0 ne{AGMIMG_m}if
				AGMIMG_y 0 ne{AGMIMG_y}if
				AGMIMG_k 0 ne{AGMIMG_k}if
				setcolor			
			}{	
				/Decode[Decode 0 get 255 mul Decode 1 get 255 mul]def
				[/Indexed 				
					[
						/DeviceN[
							AGMIMG_c 0 ne{/Cyan}if
							AGMIMG_m 0 ne{/Magenta}if
							AGMIMG_y 0 ne{/Yellow}if
							AGMIMG_k 0 ne{/Black}if
						]
						/DeviceCMYK{
							AGMIMG_k 0 eq{0}if
							AGMIMG_y 0 eq{0 exch}if
							AGMIMG_m 0 eq{0 3 1 roll}if
							AGMIMG_c 0 eq{0 4 1 roll}if						
						}
					]
					255
					{
						255 div 
						mark exch
						dup	dup dup
						AGMIMG_k 0 ne{
							/sep_tint AGMCORE_gget mul MappedCSA sep_proc_name exch pop load exec 4 1 roll pop pop pop		
							counttomark 1 roll
						}{
							pop
						}ifelse
						AGMIMG_y 0 ne{
							/sep_tint AGMCORE_gget mul MappedCSA sep_proc_name exch pop load exec 4 2 roll pop pop pop		
							counttomark 1 roll
						}{
							pop
						}ifelse
						AGMIMG_m 0 ne{
							/sep_tint AGMCORE_gget mul MappedCSA sep_proc_name exch pop load exec 4 3 roll pop pop pop		
							counttomark 1 roll
						}{
							pop
						}ifelse
						AGMIMG_c 0 ne{
							/sep_tint AGMCORE_gget mul MappedCSA sep_proc_name exch pop load exec pop pop pop		
							counttomark 1 roll
						}{
							pop
						}ifelse
						counttomark 1 add -1 roll pop
					}
				]setcolorspace
			}ifelse
			imageormask_sys
		}{
	write_image_file{
		currentcmykcolor
		0 ne{
			[/Separation/Black/DeviceGray{}]setcolorspace
			gsave
			/Black
			[{1 exch sub/sep_tint AGMCORE_gget mul}/exec cvx MappedCSA sep_proc_name cvx exch pop{4 1 roll pop pop pop 1 exch sub}/exec cvx]
			cvx modify_halftone_xfer
			Operator currentdict read_image_file
			grestore
		}if
		0 ne{
			[/Separation/Yellow/DeviceGray{}]setcolorspace
			gsave
			/Yellow
			[{1 exch sub/sep_tint AGMCORE_gget mul}/exec cvx MappedCSA sep_proc_name cvx exch pop{4 2 roll pop pop pop 1 exch sub}/exec cvx]
			cvx modify_halftone_xfer
			Operator currentdict read_image_file
			grestore
		}if
		0 ne{
			[/Separation/Magenta/DeviceGray{}]setcolorspace
			gsave
			/Magenta
			[{1 exch sub/sep_tint AGMCORE_gget mul}/exec cvx MappedCSA sep_proc_name cvx exch pop{4 3 roll pop pop pop 1 exch sub}/exec cvx]
			cvx modify_halftone_xfer
			Operator currentdict read_image_file
			grestore
		}if
		0 ne{
			[/Separation/Cyan/DeviceGray{}]setcolorspace
			gsave
			/Cyan 
			[{1 exch sub/sep_tint AGMCORE_gget mul}/exec cvx MappedCSA sep_proc_name cvx exch pop{pop pop pop 1 exch sub}/exec cvx]
			cvx modify_halftone_xfer
			Operator currentdict read_image_file
			grestore
		}if
				close_image_file
			}{
				imageormask
			}ifelse
		}ifelse
	}ifelse
}def
/indexed_imageormask
{
	begin
		AGMIMG_init_common
		save mark 
 		currentdict
 		AGMCORE_host_sep{
			Operator/knockout eq{
				/indexed_colorspace_dict AGMCORE_gget dup/CSA known{
					/CSA get get_csa_by_name
				}{
					/Names get
				}ifelse
				overprint_plate not{
					knockout_unitsq
				}if
			}{
				Indexed_DeviceN{
					/devicen_colorspace_dict AGMCORE_gget dup/names_index known exch/Names get convert_to_process or{
			 			indexed_image_lev2_sep
					}{
						currentoverprint not{
							knockout_unitsq
			 			}if
			 			currentdict consumeimagedata
					}ifelse
				}{
		 			AGMCORE_is_cmyk_sep{
						Operator/imagemask eq{
							imageormask_sys
						}{
							level2{
								indexed_image_lev2_sep
							}{
								indexed_image_lev1_sep
							}ifelse
						}ifelse
					}{
						currentoverprint not{
							knockout_unitsq
			 			}if
			 			currentdict consumeimagedata
					}ifelse
				}ifelse
			}ifelse
 		}{
			level2{
				Indexed_DeviceN{
					/indexed_colorspace_dict AGMCORE_gget begin
				}{
					/indexed_colorspace_dict AGMCORE_gget dup null ne
					{
						begin
						currentdict/CSDBase known{CSDBase/CSD get_res/MappedCSA get}{CSA}ifelse
						get_csa_by_name 0 get/DeviceCMYK eq ps_level 3 ge and ps_version 3015.007 lt and
						AGMCORE_in_rip_sep and{
							[/Indexed[/DeviceN[/Cyan/Magenta/Yellow/Black]/DeviceCMYK{}]HiVal Lookup]
							setcolorspace
						}if
						end
					}
					{pop}ifelse
				}ifelse
				imageormask
				Indexed_DeviceN{
					end
				}if
			}{
				Operator/imagemask eq{
					imageormask
				}{
					indexed_imageormask_lev1
				}ifelse
			}ifelse
 		}ifelse
		cleartomark restore
	currentdict/_Filters known{_Filters AGMIMG_flushfilters}if
	end
}def
/indexed_image_lev2_sep
{
	/indexed_colorspace_dict AGMCORE_gget begin
	begin
		Indexed_DeviceN not{
			currentcolorspace 
			dup 1/DeviceGray put
			dup 3
			currentcolorspace 2 get 1 add string
			0 1 2 3 AGMCORE_get_ink_data 4 currentcolorspace 3 get length 1 sub
			{
			dup 4 idiv exch currentcolorspace 3 get exch get 255 exch sub 2 index 3 1 roll put
			}for 
			put	setcolorspace
		}if
		currentdict 
		Operator/imagemask eq{
			AGMIMG_&imagemask
		}{
			use_mask{
				process_mask AGMIMG_&image
			}{
				AGMIMG_&image
			}ifelse
		}ifelse
	end end
}def
 /OPIimage
 {
 	dup type/dicttype ne{
 		10 dict begin
 			/DataSource xdf
 			/ImageMatrix xdf
 			/BitsPerComponent xdf
 			/Height xdf
 			/Width xdf
 			/ImageType 1 def
 			/Decode[0 1 def]
 			currentdict
 		end
 	}if
 	dup begin
 		/NComponents 1 cdndf
 		/MultipleDataSources false cdndf
 		/SkipImageProc{false}cdndf
 		/Decode[
 				0 
 				currentcolorspace 0 get/Indexed eq{
 					2 BitsPerComponent exp 1 sub
 				}{
 					1
 				}ifelse
 		]cdndf
 		/Operator/image cdndf
 	end
 	/sep_colorspace_dict AGMCORE_gget null eq{
 		imageormask
 	}{
 		gsave
 		dup begin invert_image_samples end
 		sep_imageormask
 		grestore
 	}ifelse
 }def
/cachemask_level2
{
	3 dict begin
	/LZWEncode filter/WriteFilter xdf
	/readBuffer 256 string def
	/ReadFilter
		currentfile
		0(%EndMask)/SubFileDecode filter
		/ASCII85Decode filter
		/RunLengthDecode filter
	def
	{
		ReadFilter readBuffer readstring exch
		WriteFilter exch writestring
		not{exit}if
	}loop
	WriteFilter closefile
	end
}def
/spot_alias
{
	/mapto_sep_imageormask 
	{
		dup type/dicttype ne{
			12 dict begin
				/ImageType 1 def
				/DataSource xdf
				/ImageMatrix xdf
				/BitsPerComponent xdf
				/Height xdf
				/Width xdf
				/MultipleDataSources false def
		}{
			begin
		}ifelse
				/Decode[/customcolor_tint AGMCORE_gget 0]def
				/Operator/image def
				/SkipImageProc{false}def
				currentdict 
			end
		sep_imageormask
	}bdf
	/customcolorimage
	{
		Adobe_AGM_Image/AGMIMG_colorAry xddf
		/customcolor_tint AGMCORE_gget
		<<
			/Name AGMIMG_colorAry 4 get
			/CSA[/DeviceCMYK]
			/TintMethod/Subtractive
			/TintProc null
			/MappedCSA null
			/NComponents 4 
			/Components[AGMIMG_colorAry aload pop pop]
		>>
		setsepcolorspace
		mapto_sep_imageormask
	}ndf
	Adobe_AGM_Image/AGMIMG_&customcolorimage/customcolorimage load put
	/customcolorimage
	{
		Adobe_AGM_Image/AGMIMG_override false put
		current_spot_alias{dup 4 get map_alias}{false}ifelse
		{
			false set_spot_alias
			/customcolor_tint AGMCORE_gget exch setsepcolorspace
			pop
			mapto_sep_imageormask
			true set_spot_alias
		}{
			//Adobe_AGM_Image/AGMIMG_&customcolorimage get exec
		}ifelse			
	}bdf
}def
/snap_to_device
{
	6 dict begin
	matrix currentmatrix
	dup 0 get 0 eq 1 index 3 get 0 eq and
	1 index 1 get 0 eq 2 index 2 get 0 eq and or exch pop
	{
		1 1 dtransform 0 gt exch 0 gt/AGMIMG_xSign? exch def/AGMIMG_ySign? exch def
		0 0 transform
		AGMIMG_ySign?{floor 0.1 sub}{ceiling 0.1 add}ifelse exch
		AGMIMG_xSign?{floor 0.1 sub}{ceiling 0.1 add}ifelse exch
		itransform/AGMIMG_llY exch def/AGMIMG_llX exch def
		1 1 transform
		AGMIMG_ySign?{ceiling 0.1 add}{floor 0.1 sub}ifelse exch
		AGMIMG_xSign?{ceiling 0.1 add}{floor 0.1 sub}ifelse exch
		itransform/AGMIMG_urY exch def/AGMIMG_urX exch def			
		[AGMIMG_urX AGMIMG_llX sub 0 0 AGMIMG_urY AGMIMG_llY sub AGMIMG_llX AGMIMG_llY]concat
	}{
	}ifelse
	end
}def
level2 not{
	/colorbuf
	{
		0 1 2 index length 1 sub{
			dup 2 index exch get 
			255 exch sub 
			2 index 
			3 1 roll 
			put
		}for
	}def
	/tint_image_to_color
	{
		begin
			Width Height BitsPerComponent ImageMatrix 
			/DataSource load
		end
		Adobe_AGM_Image begin
			/AGMIMG_mbuf 0 string def
			/AGMIMG_ybuf 0 string def
			/AGMIMG_kbuf 0 string def
			{
				colorbuf dup length AGMIMG_mbuf length ne
					{
					dup length dup dup
					/AGMIMG_mbuf exch string def
					/AGMIMG_ybuf exch string def
					/AGMIMG_kbuf exch string def
					}if
				dup AGMIMG_mbuf copy AGMIMG_ybuf copy AGMIMG_kbuf copy pop
			}
			addprocs
			{AGMIMG_mbuf}{AGMIMG_ybuf}{AGMIMG_kbuf}true 4 colorimage	
		end
	}def			
	/sep_imageormask_lev1
	{
		begin
			MappedCSA 0 get dup/DeviceRGB eq exch/DeviceCMYK eq or has_color not and{
				{
					255 mul round cvi GrayLookup exch get
				}currenttransfer addprocs settransfer
				currentdict imageormask
			}{
				/sep_colorspace_dict AGMCORE_gget/Components known{
					MappedCSA 0 get/DeviceCMYK eq{
						Components aload pop
					}{
						0 0 0 Components aload pop 1 exch sub
					}ifelse
					Adobe_AGM_Image/AGMIMG_k xddf 
					Adobe_AGM_Image/AGMIMG_y xddf 
					Adobe_AGM_Image/AGMIMG_m xddf 
					Adobe_AGM_Image/AGMIMG_c xddf 
					AGMIMG_y 0.0 eq AGMIMG_m 0.0 eq and AGMIMG_c 0.0 eq and{
						{AGMIMG_k mul 1 exch sub}currenttransfer addprocs settransfer
						currentdict imageormask
					}{
						currentcolortransfer
						{AGMIMG_k mul 1 exch sub}exch addprocs 4 1 roll
						{AGMIMG_y mul 1 exch sub}exch addprocs 4 1 roll
						{AGMIMG_m mul 1 exch sub}exch addprocs 4 1 roll
						{AGMIMG_c mul 1 exch sub}exch addprocs 4 1 roll
						setcolortransfer
						currentdict tint_image_to_color
					}ifelse
				}{
					MappedCSA 0 get/DeviceGray eq{
						{255 mul round cvi ColorLookup exch get 0 get}currenttransfer addprocs settransfer
						currentdict imageormask
					}{
						MappedCSA 0 get/DeviceCMYK eq{
							currentcolortransfer
							{255 mul round cvi ColorLookup exch get 3 get 1 exch sub}exch addprocs 4 1 roll
							{255 mul round cvi ColorLookup exch get 2 get 1 exch sub}exch addprocs 4 1 roll
							{255 mul round cvi ColorLookup exch get 1 get 1 exch sub}exch addprocs 4 1 roll
							{255 mul round cvi ColorLookup exch get 0 get 1 exch sub}exch addprocs 4 1 roll
							setcolortransfer 
							currentdict tint_image_to_color
						}{
							currentcolortransfer
							{pop 1}exch addprocs 4 1 roll
							{255 mul round cvi ColorLookup exch get 2 get}exch addprocs 4 1 roll
							{255 mul round cvi ColorLookup exch get 1 get}exch addprocs 4 1 roll
							{255 mul round cvi ColorLookup exch get 0 get}exch addprocs 4 1 roll
							setcolortransfer 
							currentdict tint_image_to_color
						}ifelse
					}ifelse
				}ifelse
			}ifelse
		end
	}def
	/sep_image_lev1_sep
	{
		begin
			/sep_colorspace_dict AGMCORE_gget/Components known{
				Components aload pop
				Adobe_AGM_Image/AGMIMG_k xddf 
				Adobe_AGM_Image/AGMIMG_y xddf 
				Adobe_AGM_Image/AGMIMG_m xddf 
				Adobe_AGM_Image/AGMIMG_c xddf 
				{AGMIMG_c mul 1 exch sub}
				{AGMIMG_m mul 1 exch sub}
				{AGMIMG_y mul 1 exch sub}
				{AGMIMG_k mul 1 exch sub}
			}{
				{255 mul round cvi ColorLookup exch get 0 get 1 exch sub}
				{255 mul round cvi ColorLookup exch get 1 get 1 exch sub}
				{255 mul round cvi ColorLookup exch get 2 get 1 exch sub}
				{255 mul round cvi ColorLookup exch get 3 get 1 exch sub}
			}ifelse
			AGMCORE_get_ink_data currenttransfer addprocs settransfer
			currentdict imageormask_sys
		end
	}def
	/indexed_imageormask_lev1
	{
		/indexed_colorspace_dict AGMCORE_gget begin
		begin
			currentdict
			MappedCSA 0 get dup/DeviceRGB eq exch/DeviceCMYK eq or has_color not and{
				{HiVal mul round cvi GrayLookup exch get HiVal div}currenttransfer addprocs settransfer
				imageormask
			}{
				MappedCSA 0 get/DeviceGray eq{
					{HiVal mul round cvi Lookup exch get HiVal div}currenttransfer addprocs settransfer
					imageormask
				}{
					MappedCSA 0 get/DeviceCMYK eq{
						currentcolortransfer
						{4 mul HiVal mul round cvi 3 add Lookup exch get HiVal div 1 exch sub}exch addprocs 4 1 roll
						{4 mul HiVal mul round cvi 2 add Lookup exch get HiVal div 1 exch sub}exch addprocs 4 1 roll
						{4 mul HiVal mul round cvi 1 add Lookup exch get HiVal div 1 exch sub}exch addprocs 4 1 roll
						{4 mul HiVal mul round cvi		 Lookup exch get HiVal div 1 exch sub}exch addprocs 4 1 roll
						setcolortransfer 
						tint_image_to_color
					}{
						currentcolortransfer
						{pop 1}exch addprocs 4 1 roll
						{3 mul HiVal mul round cvi 2 add Lookup exch get HiVal div}exch addprocs 4 1 roll
						{3 mul HiVal mul round cvi 1 add Lookup exch get HiVal div}exch addprocs 4 1 roll
						{3 mul HiVal mul round cvi 		Lookup exch get HiVal div}exch addprocs 4 1 roll
						setcolortransfer 
						tint_image_to_color
					}ifelse
				}ifelse
			}ifelse
		end end
	}def
	/indexed_image_lev1_sep
	{
		/indexed_colorspace_dict AGMCORE_gget begin
		begin
			{4 mul HiVal mul round cvi		 Lookup exch get HiVal div 1 exch sub}
			{4 mul HiVal mul round cvi 1 add Lookup exch get HiVal div 1 exch sub}
			{4 mul HiVal mul round cvi 2 add Lookup exch get HiVal div 1 exch sub}
			{4 mul HiVal mul round cvi 3 add Lookup exch get HiVal div 1 exch sub}
			AGMCORE_get_ink_data currenttransfer addprocs settransfer
			currentdict imageormask_sys
		end end
	}def
}if
end
systemdict/setpacking known
{setpacking}if
%%EndResource
currentdict Adobe_AGM_Utils eq {end} if
%%EndProlog
%%BeginSetup
Adobe_AGM_Utils begin
2 2010 Adobe_AGM_Core/ds gx
Adobe_CoolType_Core/ds get exec
Adobe_AGM_Image/ds gx
currentdict Adobe_AGM_Utils eq {end} if
%%EndSetup
%%Page: 12 1
%%EndPageComments
%%BeginPageSetup
%ADOBeginClientInjection: PageSetup Start "AI11EPS"
%AI12_RMC_Transparency: Balance=75 RasterRes=300 GradRes=150 Text=0 Stroke=1 Clip=1 OP=0
%ADOEndClientInjection: PageSetup Start "AI11EPS"
Adobe_AGM_Utils begin
Adobe_AGM_Core/ps gx
Adobe_AGM_Utils/capture_cpd gx
Adobe_CoolType_Core/ps get exec
Adobe_AGM_Image/ps gx
%ADOBeginClientInjection: PageSetup End "AI11EPS"
/currentdistillerparams where{pop currentdistillerparams /CoreDistVersion get 5000 lt} {true} ifelse{ userdict /AI11_PDFMark5 /cleartomark load putuserdict /AI11_ReadMetadata_PDFMark5 {flushfile cleartomark } bind put}{ userdict /AI11_PDFMark5 /pdfmark load putuserdict /AI11_ReadMetadata_PDFMark5 {/PUT pdfmark} bind put } ifelse[/NamespacePush AI11_PDFMark5[/_objdef {ai_metadata_stream_123} /type /stream /OBJ AI11_PDFMark5[{ai_metadata_stream_123}currentfile 0 (%  &&end XMP packet marker&&)/SubFileDecode filter AI11_ReadMetadata_PDFMark5<?xpacket begin="﻿" id="W5M0MpCehiHzreSzNTczkc9d"?>
<x:xmpmeta xmlns:x="adobe:ns:meta/" x:xmptk="Adobe XMP Core 5.6-c111 79.158366, 2015/09/25-01:12:00        ">
   <rdf:RDF xmlns:rdf="http://www.w3.org/1999/02/22-rdf-syntax-ns#">
      <rdf:Description rdf:about=""
            xmlns:dc="http://purl.org/dc/elements/1.1/"
            xmlns:xmp="http://ns.adobe.com/xap/1.0/"
            xmlns:xmpGImg="http://ns.adobe.com/xap/1.0/g/img/"
            xmlns:xmpMM="http://ns.adobe.com/xap/1.0/mm/"
            xmlns:stRef="http://ns.adobe.com/xap/1.0/sType/ResourceRef#"
            xmlns:stEvt="http://ns.adobe.com/xap/1.0/sType/ResourceEvent#"
            xmlns:illustrator="http://ns.adobe.com/illustrator/1.0/"
            xmlns:xmpTPg="http://ns.adobe.com/xap/1.0/t/pg/"
            xmlns:stDim="http://ns.adobe.com/xap/1.0/sType/Dimensions#"
            xmlns:xmpG="http://ns.adobe.com/xap/1.0/g/"
            xmlns:pdf="http://ns.adobe.com/pdf/1.3/"
            xmlns:pdfx="http://ns.adobe.com/pdfx/1.3/">
         <dc:format>application/postscript</dc:format>
         <dc:title>
            <rdf:Alt>
               <rdf:li xml:lang="x-default">2008.i605.015.P.m005.c20.freelance people work set</rdf:li>
            </rdf:Alt>
         </dc:title>
         <xmp:CreatorTool>Adobe Illustrator CC 2015 (Windows)</xmp:CreatorTool>
         <xmp:CreateDate>2021-02-19T14:57:13+03:00</xmp:CreateDate>
         <xmp:ModifyDate>2021-02-19T14:57:13+03:00</xmp:ModifyDate>
         <xmp:MetadataDate>2021-02-19T14:57:13+03:00</xmp:MetadataDate>
         <xmp:Thumbnails>
            <rdf:Alt>
               <rdf:li rdf:parseType="Resource">
                  <xmpGImg:width>256</xmpGImg:width>
                  <xmpGImg:height>240</xmpGImg:height>
                  <xmpGImg:format>JPEG</xmpGImg:format>
                  <xmpGImg:image>/9j/4AAQSkZJRgABAgEC0ALQAAD/7QAsUGhvdG9zaG9wIDMuMAA4QklNA+0AAAAAABAC0AAAAAEA&#xA;AQLQAAAAAQAB/+4ADkFkb2JlAGTAAAAAAf/bAIQABgQEBAUEBgUFBgkGBQYJCwgGBggLDAoKCwoK&#xA;DBAMDAwMDAwQDA4PEA8ODBMTFBQTExwbGxscHx8fHx8fHx8fHwEHBwcNDA0YEBAYGhURFRofHx8f&#xA;Hx8fHx8fHx8fHx8fHx8fHx8fHx8fHx8fHx8fHx8fHx8fHx8fHx8fHx8fHx8f/8AAEQgA8AEAAwER&#xA;AAIRAQMRAf/EAaIAAAAHAQEBAQEAAAAAAAAAAAQFAwIGAQAHCAkKCwEAAgIDAQEBAQEAAAAAAAAA&#xA;AQACAwQFBgcICQoLEAACAQMDAgQCBgcDBAIGAnMBAgMRBAAFIRIxQVEGE2EicYEUMpGhBxWxQiPB&#xA;UtHhMxZi8CRygvElQzRTkqKyY3PCNUQnk6OzNhdUZHTD0uIIJoMJChgZhJRFRqS0VtNVKBry4/PE&#xA;1OT0ZXWFlaW1xdXl9WZ2hpamtsbW5vY3R1dnd4eXp7fH1+f3OEhYaHiImKi4yNjo+Ck5SVlpeYmZ&#xA;qbnJ2en5KjpKWmp6ipqqusra6voRAAICAQIDBQUEBQYECAMDbQEAAhEDBCESMUEFURNhIgZxgZEy&#xA;obHwFMHR4SNCFVJicvEzJDRDghaSUyWiY7LCB3PSNeJEgxdUkwgJChgZJjZFGidkdFU38qOzwygp&#xA;0+PzhJSktMTU5PRldYWVpbXF1eX1RlZmdoaWprbG1ub2R1dnd4eXp7fH1+f3OEhYaHiImKi4yNjo&#xA;+DlJWWl5iZmpucnZ6fkqOkpaanqKmqq6ytrq+v/aAAwDAQACEQMRAD8A9Eea7W1pDP6Keux4NLxH&#xA;MqBUKWpWmY2p5B2XZx3LHjptneQ3Ec8PqKkMkihaAhkUkHt0zGhu7DLKgOXMI2TyP5dWe6QWEnGO&#xA;BJEHNdmYyVP2v8kZlGG55/N141MqH08+73eTej+W9FtfMUMSWKmN7D1+M6pJ+8EqAOteVOuMBU63&#xA;5LmyGWIna+OttuhZpmQ612KuxV2KuxV2KuxVgttZ32i+f9V1SXWb/UdM1OJeWlTyK9vaSpwCfVo6&#xA;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&#xA;sVdirsVf/9k=</xmpGImg:image>
               </rdf:li>
            </rdf:Alt>
         </xmp:Thumbnails>
         <xmpMM:RenditionClass>proof:pdf</xmpMM:RenditionClass>
         <xmpMM:OriginalDocumentID>uuid:65E6390686CF11DBA6E2D887CEACB407</xmpMM:OriginalDocumentID>
         <xmpMM:DocumentID>xmp.did:b528c398-82e7-0c4a-8ef4-3941c265f1ae</xmpMM:DocumentID>
         <xmpMM:InstanceID>xmp.iid:b528c398-82e7-0c4a-8ef4-3941c265f1ae</xmpMM:InstanceID>
         <xmpMM:DerivedFrom rdf:parseType="Resource">
            <stRef:instanceID>uuid:64383201-502d-4479-883b-6f1d06d26de3</stRef:instanceID>
            <stRef:documentID>xmp.did:9cd72ba1-60d0-054a-ad6f-980d027871bf</stRef:documentID>
            <stRef:originalDocumentID>uuid:65E6390686CF11DBA6E2D887CEACB407</stRef:originalDocumentID>
            <stRef:renditionClass>proof:pdf</stRef:renditionClass>
         </xmpMM:DerivedFrom>
         <xmpMM:History>
            <rdf:Seq>
               <rdf:li rdf:parseType="Resource">
                  <stEvt:action>saved</stEvt:action>
                  <stEvt:instanceID>xmp.iid:7b34ee67-65d0-c144-bf9a-2ecf9b4d823d</stEvt:instanceID>
                  <stEvt:when>2020-08-14T21:15:12+03:00</stEvt:when>
                  <stEvt:softwareAgent>Adobe Illustrator CC 22.0 (Windows)</stEvt:softwareAgent>
                  <stEvt:changed>/</stEvt:changed>
               </rdf:li>
               <rdf:li rdf:parseType="Resource">
                  <stEvt:action>saved</stEvt:action>
                  <stEvt:instanceID>xmp.iid:f5ef456b-3749-2a47-b269-9808a59d01ea</stEvt:instanceID>
                  <stEvt:when>2020-08-18T00:40:26+03:00</stEvt:when>
                  <stEvt:softwareAgent>Adobe Illustrator CC 22.0 (Windows)</stEvt:softwareAgent>
                  <stEvt:changed>/</stEvt:changed>
               </rdf:li>
               <rdf:li rdf:parseType="Resource">
                  <stEvt:action>converted</stEvt:action>
                  <stEvt:parameters>from application/postscript to application/vnd.adobe.illustrator</stEvt:parameters>
               </rdf:li>
               <rdf:li rdf:parseType="Resource">
                  <stEvt:action>saved</stEvt:action>
                  <stEvt:instanceID>xmp.iid:9cd72ba1-60d0-054a-ad6f-980d027871bf</stEvt:instanceID>
                  <stEvt:when>2021-02-11T17:43:43+03:00</stEvt:when>
                  <stEvt:softwareAgent>Adobe Illustrator CC 2015 (Windows)</stEvt:softwareAgent>
                  <stEvt:changed>/</stEvt:changed>
               </rdf:li>
               <rdf:li rdf:parseType="Resource">
                  <stEvt:action>saved</stEvt:action>
                  <stEvt:instanceID>xmp.iid:b528c398-82e7-0c4a-8ef4-3941c265f1ae</stEvt:instanceID>
                  <stEvt:when>2021-02-19T14:57:13+03:00</stEvt:when>
                  <stEvt:softwareAgent>Adobe Illustrator CC 2015 (Windows)</stEvt:softwareAgent>
                  <stEvt:changed>/</stEvt:changed>
               </rdf:li>
            </rdf:Seq>
         </xmpMM:History>
         <illustrator:StartupProfile>Web</illustrator:StartupProfile>
         <xmpTPg:NPages>1</xmpTPg:NPages>
         <xmpTPg:HasVisibleTransparency>True</xmpTPg:HasVisibleTransparency>
         <xmpTPg:HasVisibleOverprint>False</xmpTPg:HasVisibleOverprint>
         <xmpTPg:MaxPageSize rdf:parseType="Resource">
            <stDim:w>348.711534</stDim:w>
            <stDim:h>450.000000</stDim:h>
            <stDim:unit>Pixels</stDim:unit>
         </xmpTPg:MaxPageSize>
         <xmpTPg:PlateNames>
            <rdf:Seq>
               <rdf:li>Cyan</rdf:li>
               <rdf:li>Magenta</rdf:li>
               <rdf:li>Yellow</rdf:li>
               <rdf:li>Black</rdf:li>
            </rdf:Seq>
         </xmpTPg:PlateNames>
         <xmpTPg:SwatchGroups>
            <rdf:Seq>
               <rdf:li rdf:parseType="Resource">
                  <xmpG:groupName>Default Swatch Group</xmpG:groupName>
                  <xmpG:groupType>0</xmpG:groupType>
                  <xmpG:Colorants>
                     <rdf:Seq>
                        <rdf:li rdf:parseType="Resource">
                           <xmpG:swatchName>Áåëûé</xmpG:swatchName>
                           <xmpG:mode>RGB</xmpG:mode>
                           <xmpG:type>PROCESS</xmpG:type>
                           <xmpG:red>255</xmpG:red>
                           <xmpG:green>255</xmpG:green>
                           <xmpG:blue>255</xmpG:blue>
                        </rdf:li>
                        <rdf:li rdf:parseType="Resource">
                           <xmpG:swatchName>×åðíûé</xmpG:swatchName>
                           <xmpG:mode>RGB</xmpG:mode>
                           <xmpG:type>PROCESS</xmpG:type>
                           <xmpG:red>0</xmpG:red>
                           <xmpG:green>0</xmpG:green>
                           <xmpG:blue>0</xmpG:blue>
                        </rdf:li>
                        <rdf:li rdf:parseType="Resource">
                           <xmpG:swatchName>R=0 G=0 B=0</xmpG:swatchName>
                           <xmpG:mode>RGB</xmpG:mode>
                           <xmpG:type>PROCESS</xmpG:type>
                           <xmpG:red>0</xmpG:red>
                           <xmpG:green>0</xmpG:green>
                           <xmpG:blue>0</xmpG:blue>
                        </rdf:li>
                     </rdf:Seq>
                  </xmpG:Colorants>
               </rdf:li>
            </rdf:Seq>
         </xmpTPg:SwatchGroups>
         <pdf:Producer>Adobe PDF library 15.00</pdf:Producer>
         <pdfx:CreatorVersion>21.0.0</pdfx:CreatorVersion>
      </rdf:Description>
   </rdf:RDF>
</x:xmpmeta>
                                                                                                    
                                                                                                    
                                                                                                    
                                                                                                    
                                                                                                    
                                                                                                    
                                                                                                    
                                                                                                    
                                                                                                    
                                                                                                    
                                                                                                    
                                                                                                    
                                                                                                    
                                                                                                    
                                                                                                    
                                                                                                    
                                                                                                    
                                                                                                    
                                                                                                    
                                                                                                    
                           
<?xpacket end="w"?>%  &&end XMP packet marker&&[{ai_metadata_stream_123}<</Type /Metadata /Subtype /XML>>/PUT AI11_PDFMark5[/Document1 dict begin /Metadata {ai_metadata_stream_123} defcurrentdict end /BDC AI11_PDFMark5
%ADOEndClientInjection: PageSetup End "AI11EPS"
%%EndPageSetup
1 -1 scale 0 -450 translate
pgsv
[1 0 0 1 0 0 ]ct
gsave
np
gsave
0 0 mo
0 450 li
500 450 li
500 0 li
cp
clp
273.579 260.69 mo
149.176 275.929 li
142.5 276.747 136.573 273.199 135.936 268.005 cv
130.332 222.254 173.455 179.328 232.254 172.125 cv
259.161 168.829 li
270.619 167.425 280.793 173.515 281.885 182.43 cv
289.527 244.815 li
290.455 252.39 283.315 259.498 273.579 260.69 cv
false sop
/0 
[/DeviceRGB] /CSA add_res
.988235 .866667 .168627 rgb
f
147.267 276.047 mo
141.404 276.047 136.511 272.698 135.936 268.005 cv
135.608 265.324 135.447 262.653 135.446 259.998 cv
135.441 229.942 156.026 201.979 187.556 185.71 cv
195.138 211.356 li
186.084 212.059 177.432 213 169.181 214.182 cv
171.447 219.957 173.698 225.78 175.964 231.555 cv
178.955 232.034 181.95 232.519 184.946 233.006 cv
177.365 235.185 170.124 237.486 163.222 239.907 cv
166.565 245.133 169.902 250.409 173.245 255.635 cv
184.092 255.242 194.984 254.905 205.882 254.518 cv
210.872 254.319 215.803 254.163 220.786 254.014 cv
225.876 253.827 230.966 253.641 236.056 253.454 cv
238.885 253.348 241.713 253.246 244.54 253.146 cv
244.54 255.338 li
275.775 255.338 li
277.806 256.205 280.178 256.953 282.845 257.346 cv
280.266 259.06 277.091 260.26 273.579 260.69 cv
149.176 275.929 li
148.532 276.008 147.894 276.047 147.267 276.047 cv
.976471 .752941 .027451 rgb
f
229.339 349.09 mo
229.713 349.127 li
232.159 349.369 234.358 347.566 234.6 345.121 cv
242.168 268.691 li
242.41 266.246 240.608 264.047 238.162 263.804 cv
237.788 263.767 li
235.342 263.525 233.143 265.328 232.901 267.774 cv
225.333 344.203 li
225.09 346.649 226.894 348.848 229.339 349.09 cv
cp
.384314 .0705882 .133333 rgb
f
154.332 367.769 mo
156.862 368.161 159.254 366.411 159.646 363.88 cv
172.475 281.051 li
172.867 278.521 171.117 276.129 168.586 275.737 cv
166.055 275.345 163.664 277.095 163.272 279.626 cv
150.443 362.455 li
150.051 364.986 151.801 367.377 154.332 367.769 cv
cp
f
394.037 255.338 mo
244.54 255.338 li
244.54 213.305 li
244.54 173.31 276.963 140.887 316.958 140.887 cv
351.887 140.887 li
375.166 140.887 394.037 159.758 394.037 183.038 cv
394.037 255.338 li
.988235 .866667 .168627 rgb
f
379.761 292.161 mo
339.446 297.455 299.131 302.748 258.816 308.042 cv
223.279 302.748 187.743 297.455 152.207 292.161 cv
151.864 292.153 150.381 292.08 149.221 290.919 cv
148.395 290.092 148.145 289.126 148.092 288.899 cv
148.019 288.588 147.98 288.265 147.98 287.933 cv
147.98 285.608 149.882 283.706 152.207 283.706 cv
188.614 286.014 225.021 288.322 261.428 290.63 cv
328.58 281.614 378.205 277.275 379.813 279.92 cv
379.982 280.198 381.366 283.431 382.747 284.948 cv
382.938 285.158 383.616 285.862 383.877 286.967 cv
383.95 287.278 383.989 287.601 383.989 287.933 cv
382.58 289.343 381.171 290.752 379.761 292.161 cv
cp
.384314 .0705882 .133333 rgb
f
257.952 389.589 mo
257.489 389.589 li
255.055 389.589 253.064 387.597 253.064 385.164 cv
253.064 301.315 li
253.064 298.882 255.055 296.891 257.489 296.891 cv
257.952 296.891 li
260.386 296.891 262.377 298.882 262.377 301.315 cv
262.377 385.164 li
262.377 387.597 260.386 389.589 257.952 389.589 cv
cp
f
391.369 364.617 mo
390.865 364.695 li
388.472 365.066 386.212 363.411 385.841 361.019 cv
374.459 287.534 li
374.088 285.141 375.743 282.881 378.135 282.51 cv
378.639 282.432 li
381.031 282.061 383.292 283.716 383.662 286.108 cv
395.044 359.594 li
395.415 361.986 393.761 364.246 391.369 364.617 cv
cp
f
381.662 282.016 mo
349.989 289.446 308.92 296.035 260.847 296.144 cv
217.856 296.241 180.652 291.131 151.077 284.993 cv
149.809 284.963 144.341 284.694 140.062 280.411 cv
137.015 277.36 136.092 273.797 135.894 272.958 cv
135.624 271.813 135.481 270.621 135.481 269.396 cv
135.481 263.828 li
138.18 259.641 140.878 255.455 143.577 251.269 cv
177.231 248.961 210.886 246.652 244.54 244.343 cv
263.65 250.98 279.178 252.212 289.577 252.179 cv
318.039 252.086 371.421 242.304 378.686 248.231 cv
378.686 248.231 384.302 252.813 389.701 252.813 cv
392.528 255.64 394.282 259.539 394.282 263.828 cv
394.282 269.396 li
390.076 273.603 385.869 277.809 381.662 282.016 cv
cp
.988235 .866667 .168627 rgb
f
213.581 265.388 mo
209.716 265.388 205.867 265.313 202.042 265.156 cv
170.085 263.857 155.87 257.898 151.198 255.938 cv
148.487 254.801 145.768 253.53 143.115 252.168 cv
142.619 251.912 142.427 251.306 142.678 250.81 cv
142.938 250.315 143.548 250.118 144.036 250.374 cv
146.645 251.715 149.317 252.963 151.978 254.081 cv
156.566 256.005 170.53 261.857 202.121 263.141 cv
216.851 263.758 231.861 263.18 246.789 261.464 cv
247.383 261.389 247.84 261.799 247.903 262.349 cv
247.966 262.9 247.572 263.4 247.017 263.463 cv
235.872 264.746 224.667 265.388 213.581 265.388 cv
cp
1 1 1 rgb
f
268.454 111.536 mo
268.714 111.99 267.544 113.796 266.085 113.708 cv
264.671 113.623 263.713 111.799 264.009 111.373 cv
264.178 111.13 264.674 111.449 266.103 111.517 cv
267.683 111.593 268.297 111.261 268.454 111.536 cv
cp
.988235 .533333 .447059 rgb
f
112.653 333.667 mo
112.653 336.236 110.571 338.318 108.002 338.318 cv
105.433 338.318 103.351 336.236 103.351 333.667 cv
103.351 331.098 105.433 329.016 108.002 329.016 cv
110.571 329.016 112.653 331.098 112.653 333.667 cv
cp
.592157 .717647 .992157 rgb
f
275.78 115.601 mo
275.808 118.607 276.012 132.792 266.118 138.01 cv
260.83 140.799 255.179 139.699 252.736 139.056 cv
253.683 133.824 255.081 125.668 256.456 115.601 cv
259.235 95.2681 258.852 89.2417 261.528 88.7275 cv
266.538 87.7655 275.651 101.704 275.78 115.601 cv
.384314 .0705882 .133333 rgb
f
295.909 201.173 mo
295.942 202.509 295.949 202.943 295.965 203.81 cv
295.979 204.578 295.988 205.225 295.994 205.72 cv
299.544 206.414 303.094 207.108 306.664 207.806 cv
306.85 207.146 307.035 206.486 307.24 205.831 cv
308.415 197.818 309.698 187.616 310.517 176.59 cv
311.047 169.458 311.248 163.809 310.958 157.259 cv
310.828 154.314 310.629 151.865 310.467 150.147 cv
309.729 149.783 306.46 148.272 302.667 149.513 cv
297.166 151.314 295.793 157.195 295.732 157.48 cv
295.836 188.157 295.889 200.37 295.909 201.173 cv
cp
.988235 .533333 .447059 rgb
f
240.755 192.648 mo
240.588 193.973 240.531 194.403 240.417 195.263 cv
240.316 196.025 240.228 196.666 240.161 197.157 cv
243.568 198.373 246.974 199.588 250.4 200.812 cv
250.681 200.186 250.963 199.561 251.264 198.944 cv
253.621 191.197 256.413 181.3 258.868 170.52 cv
260.457 163.547 261.497 157.991 262.189 151.471 cv
262.5 148.54 262.668 146.088 262.765 144.366 cv
262.089 143.896 259.082 141.914 255.147 142.575 cv
249.438 143.535 247.203 149.145 247.1 149.418 cv
242.625 179.766 240.855 191.851 240.755 192.648 cv
cp
f
297.002 215.669 mo
300.021 221.688 302.493 230.22 298.991 236.433 cv
298.37 237.517 297.552 238.489 296.643 239.303 cv
295.678 240.164 294.672 240.871 293.522 241.417 cv
292.995 241.743 292.474 241.969 291.953 242.193 cv
283.265 245.623 271.175 243.52 269.157 243.204 cv
268.454 243.062 267.749 242.921 267.045 242.78 cv
265.789 242.506 264.586 242.184 263.436 241.814 cv
261.687 241.258 260.093 240.66 258.555 239.964 cv
258.111 239.735 257.612 239.555 257.169 239.275 cv
248.449 235.124 242.737 229.055 240.161 226.011 cv
240.779 224.062 241.662 221.924 242.852 219.752 cv
243.985 217.679 245.308 215.872 246.669 214.269 cv
247.65 213.103 248.676 212.042 249.798 211.088 cv
253.287 207.824 256.912 205.789 259.318 204.602 cv
259.274 204.498 259.231 204.342 259.187 204.238 cv
259.096 204.03 259.054 203.875 258.964 203.666 cv
256.939 198.059 255.126 190.479 255.164 181.63 cv
255.211 178.988 255.401 176.506 255.684 174.182 cv
253.916 173.065 252.426 171.507 251.41 169.669 cv
250.256 167.57 249.773 165.304 249.954 162.974 cv
250.187 160.647 251.016 158.557 252.332 156.851 cv
252.446 156.654 252.609 156.46 252.772 156.266 cv
253.373 155.536 254.021 154.86 254.813 154.345 cv
254.566 154.055 252.612 151.835 249.653 152.021 cv
248.158 152.115 247.07 152.782 246.549 153.157 cv
246.511 151.911 246.452 145.692 251.269 140.462 cv
255.825 135.515 261.597 134.872 262.932 134.758 cv
263.969 134.409 265.217 133.92 266.575 133.284 cv
267.993 132.499 269.211 131.652 270.166 130.942 cv
271.901 131.752 274.878 133.089 278.881 133.364 cv
282.73 133.682 285.874 132.942 287.635 132.38 cv
288.55 133.296 289.513 134.266 290.828 135.306 cv
292.002 136.135 293.182 136.863 294.174 137.325 cv
299.991 136.829 305.481 139.292 308.377 143.804 cv
310.927 147.78 310.575 151.962 310.392 153.375 cv
309.667 153.102 307.157 152.257 304.217 153.251 cv
300.706 154.438 299.2 157.364 298.918 157.939 cv
299.352 158.37 299.783 158.852 300.109 159.379 cv
300.394 159.751 300.624 160.171 300.804 160.588 cv
300.948 160.749 300.993 160.853 301.085 161.011 cv
301.758 162.625 299.932 164.355 297.918 168.514 cv
297.63 169.108 297.393 169.706 297.159 170.252 cv
295.929 173.133 295.28 175.641 294.876 177.398 cv
294.742 179.781 294.549 182.314 294.204 184.838 cv
293.647 189.334 292.904 193.515 291.972 197.43 cv
291.249 200.34 290.481 203.146 289.626 205.692 cv
291.127 207.048 292.999 209.035 294.781 211.73 cv
295.482 212.837 296.273 214.153 297.002 215.669 cv
f
288.514 133.229 mo
288.076 134.02 285.83 137.889 281.061 139.221 cv
274.679 141.002 269.644 136.604 269.303 136.297 cv
269.792 134.377 270.28 132.099 270.522 129.548 cv
270.698 128.291 270.815 126.99 270.876 125.647 cv
271.001 122.292 270.775 119.348 270.458 116.828 cv
274.457 116.448 278.449 116.018 282.449 115.638 cv
282.7 115.601 li
282.92 118.854 283.66 123.211 285.73 127.887 cv
286.591 129.917 287.575 131.724 288.514 133.229 cv
f
270.522 129.548 mo
270.698 128.291 270.815 126.99 270.876 125.647 cv
270.9 125.004 270.911 124.377 270.911 123.766 cv
270.911 121.181 270.714 118.866 270.458 116.828 cv
274.457 116.448 278.449 116.018 282.449 115.638 cv
282.616 116.075 282.739 116.571 282.805 117.023 cv
283.492 122.415 276.114 128.473 270.522 129.548 cv
.976471 .286274 .2 rgb
f
271.404 124.166 mo
267.505 123.906 264.465 120.518 263.889 119.876 cv
261.048 116.711 260.498 113.156 260.36 111.838 cv
259.917 105.657 259.474 99.4758 259.032 93.295 cv
259.051 90.4423 261.379 88.1451 264.231 88.1641 cv
279.058 88.2632 li
281.91 88.2825 284.207 90.6102 284.188 93.4631 cv
284.067 111.671 li
282.104 119.527 276.459 124.503 271.404 124.166 cv
cp
.988235 .533333 .447059 rgb
f
284.066 111.671 mo
281.063 111.645 278.059 111.618 275.055 111.592 cv
269.714 105.493 264.373 99.394 259.032 93.295 cv
259.266 91.4469 259.903 88.906 261.76 86.7672 cv
267.719 79.903 283.153 80.8517 288.055 88.8221 cv
291.547 94.5012 288.786 102.268 287.949 104.622 cv
286.818 107.801 285.242 110.163 284.066 111.671 cv
cp
f
271.791 116.093 mo
272.145 116.586 270.427 119.417 268.428 119.203 cv
267.045 119.055 265.888 117.488 266.157 116.952 cv
266.324 116.62 266.956 116.847 268.447 116.712 cv
270.681 116.51 271.575 115.79 271.791 116.093 cv
cp
1 1 1 rgb
f
300.074 254.962 mo
299.849 254.994 299.673 255.043 299.496 255.092 cv
298.613 255.336 297.698 255.515 296.799 255.646 cv
296.687 255.662 296.559 255.727 296.398 255.728 cv
293.075 256.236 289.51 256.183 285.845 255.295 cv
278.965 253.613 274.28 249.66 271.766 247.066 cv
260.55 245.237 249.286 243.392 238.005 241.596 cv
232.976 240.792 227.947 239.989 222.917 239.185 cv
218 238.365 213.131 237.561 208.198 236.788 cv
197.432 235.055 186.681 233.273 175.964 231.555 cv
173.698 225.78 171.447 219.957 169.181 214.182 cv
177.433 213 186.087 212.058 195.143 211.356 cv
198.338 211.073 201.502 210.887 204.617 210.685 cv
206.303 210.599 207.989 210.514 209.627 210.412 cv
214.139 210.19 218.62 210.064 222.988 209.954 cv
228.481 209.841 233.781 209.824 239.001 209.889 cv
239.161 209.888 239.322 209.888 239.482 209.887 cv
241.763 209.945 244.044 210.002 246.325 210.059 cv
254.051 210.309 261.456 210.72 268.605 211.26 cv
275.061 216.171 281.564 221.098 288.068 226.025 cv
295.634 231.784 303.216 237.494 310.831 243.269 cv
312.312 244.453 307.118 253.061 300.074 254.962 cv
.592157 .717647 .992157 rgb
f
175.946 231.571 mo
174.047 240.053 168.932 261.217 161.463 279.804 cv
157.459 289.776 150.267 304.643 147.038 311.731 cv
146.651 312.626 146.29 313.395 146.032 313.992 cv
145.898 314.25 145.725 314.512 145.595 314.81 cv
142.304 320.973 138.996 326.611 135.79 331.71 cv
135.345 332.449 134.9 333.187 134.45 333.886 cv
133.338 333.36 132.261 332.79 131.153 332.305 cv
129.439 331.481 127.771 330.693 126.098 329.865 cv
126.2 329.691 126.267 329.562 126.361 329.308 cv
126.526 328.966 126.641 328.547 126.802 328.165 cv
127.381 326.803 127.977 325.237 128.677 323.497 cv
128.779 323.323 128.806 323.199 128.868 323.029 cv
129.942 320.275 131.055 317.151 132.289 313.649 cv
132.378 313.356 132.503 313.017 132.556 312.768 cv
133.02 311.46 133.411 310.241 133.808 309.061 cv
136.588 300.482 137.791 294.51 142.456 276.963 cv
145.227 266.479 147.664 257.37 152.917 239.272 cv
155.006 232.147 156.784 226.234 157.978 222.006 cv
158.219 221.25 158.606 220.355 159.336 219.26 cv
162.617 214.478 169.351 213.771 173.112 213.679 cv
174.161 215.104 175.825 217.677 176.598 221.362 cv
177.562 226.039 176.564 229.84 175.946 231.571 cv
cp
f
136.625 337.051 mo
136.82 338.813 li
137.082 341.541 136.913 342.209 136.766 342.711 cv
136.441 343.802 135.71 344.531 134.812 345.199 cv
132.853 346.551 130.143 346.973 128.336 347.133 cv
128.02 347.208 127.695 347.204 127.415 347.235 cv
126.048 348.075 106.092 348.745 106.248 348.323 cv
106.008 348.35 103.77 346.814 103.717 346.698 cv
103.703 346.578 101.073 344.436 100.922 343.44 cv
100.776 342.847 101.243 341.944 101.68 341.49 cv
102.339 340.85 102.97 341.064 104.711 341.033 cv
105.681 341.006 106.526 340.953 107.087 340.891 cv
107.354 340.74 107.701 340.58 107.924 340.393 cv
109.464 339.655 110.99 338.796 112.49 338.063 cv
113.336 337.644 114.138 337.191 114.983 336.772 cv
115.914 336.021 116.849 335.309 117.739 334.562 cv
117.89 334.464 118.006 334.411 118.157 334.313 cv
119.439 333.44 120.757 332.524 122.186 331.514 cv
123.463 330.603 124.852 329.597 126.276 328.547 cv
126.463 328.405 126.65 328.262 126.802 328.165 cv
126.913 328.071 126.989 328.022 127.064 327.973 cv
129.823 328.357 132.507 328.789 135.266 329.173 cv
135.43 329.925 135.604 330.758 135.79 331.71 cv
135.968 332.582 136.119 333.579 136.279 334.656 cv
136.404 335.413 136.532 336.209 136.625 337.051 cv
cp
.988235 .533333 .447059 rgb
f
147.038 311.731 mo
146.651 312.626 146.29 313.395 146.032 313.992 cv
145.898 314.25 145.725 314.512 145.595 314.81 cv
142.304 320.973 138.996 326.611 135.79 331.71 cv
135.968 332.582 136.119 333.579 136.279 334.656 cv
136.404 335.413 136.532 336.209 136.625 337.051 cv
136.82 338.813 li
122.186 331.514 li
123.463 330.603 124.852 329.597 126.276 328.547 cv
126.463 328.405 126.65 328.262 126.802 328.165 cv
127.381 326.803 127.977 325.237 128.677 323.497 cv
128.779 323.323 128.806 323.199 128.868 323.029 cv
129.942 320.275 131.055 317.151 132.289 313.649 cv
132.378 313.356 132.503 313.017 132.556 312.768 cv
133.02 311.46 133.411 310.241 133.808 309.061 cv
138.205 309.953 142.641 310.84 147.038 311.731 cv
cp
f
299.538 254.529 mo
299.324 254.604 299.16 254.686 298.996 254.769 cv
298.177 255.178 297.315 255.532 296.459 255.835 cv
296.352 255.873 296.238 255.962 296.081 255.993 cv
292.919 257.136 289.411 257.775 285.644 257.615 cv
278.569 257.299 273.206 254.33 270.237 252.272 cv
258.879 252.654 247.47 253.028 236.056 253.454 cv
230.966 253.641 225.876 253.827 220.786 254.014 cv
215.803 254.163 210.872 254.319 205.882 254.518 cv
194.984 254.905 184.092 255.242 173.245 255.635 cv
169.902 250.409 166.565 245.133 163.222 239.907 cv
171.088 237.147 179.395 234.545 188.143 232.1 cv
191.222 231.203 194.29 230.407 197.307 229.604 cv
198.944 229.193 200.582 228.783 202.169 228.365 cv
206.553 227.272 210.923 226.279 215.188 225.324 cv
220.554 224.148 225.75 223.104 230.884 222.155 cv
231.041 222.124 231.198 222.092 231.356 222.06 cv
233.604 221.674 235.853 221.288 238.102 220.902 cv
245.73 219.648 253.074 218.616 260.192 217.759 cv
267.477 221.325 274.812 224.897 282.148 228.469 cv
290.688 232.651 299.233 236.783 307.823 240.971 cv
309.506 241.846 306.08 251.298 299.538 254.529 cv
.592157 .717647 .992157 rgb
f
197.024 361.571 mo
195.815 361.732 194.565 361.854 193.397 362.055 cv
191.543 362.297 189.689 362.539 187.836 362.78 cv
187.836 362.619 187.795 362.417 187.755 362.216 cv
187.714 362.095 187.714 361.974 187.674 361.854 cv
187.352 360.241 186.948 358.267 186.505 356.05 cv
186.465 355.849 186.425 355.728 186.425 355.567 cv
185.78 352.665 185.014 349.441 184.088 345.854 cv
184.007 345.532 183.926 345.21 183.846 344.927 cv
183.564 343.799 183.281 342.751 182.999 341.744 cv
180.582 332.716 178.325 327.236 172.4 309.584 cv
168.935 299.348 165.993 290.401 160.432 272.347 cv
158.255 265.295 156.482 259.371 155.192 255.179 cv
154.95 254.414 154.749 253.447 154.789 252.157 cv
154.911 246.354 160.109 242.042 163.212 239.906 cv
164.582 240.309 167.645 241.437 170.345 244.379 cv
173.247 247.603 173.972 251.109 174.174 252.48 cv
179.816 265.859 185.538 282.341 189.851 301.565 cv
192.792 314.703 194.646 327.075 195.694 338.318 cv
195.734 338.56 li
195.774 338.883 195.815 339.205 195.855 339.487 cv
196.5 346.579 196.822 353.189 196.984 359.274 cv
196.984 360.04 197.024 360.806 197.024 361.571 cv
cp
f
202.706 371.042 mo
202.747 372.17 202.343 373.137 201.699 374.064 cv
200.328 375.999 197.911 377.328 196.298 378.094 cv
196.016 378.255 195.694 378.376 195.492 378.497 cv
194.445 379.747 175.906 387.161 175.947 386.719 cv
175.746 386.839 173.085 386.154 173.005 386.033 cv
172.965 385.953 169.701 384.824 169.257 383.938 cv
168.894 383.454 169.055 382.447 169.297 381.842 cv
169.741 381.036 170.385 380.996 171.998 380.391 cv
172.924 380.029 173.69 379.666 174.174 379.424 cv
174.415 379.223 174.657 378.941 174.819 378.699 cv
175.988 377.45 177.115 376.16 178.325 374.951 cv
178.969 374.266 179.574 373.54 180.219 372.855 cv
180.823 371.888 181.468 370.881 182.073 369.873 cv
182.193 369.752 182.233 369.631 182.355 369.51 cv
183.04 368.543 183.765 367.536 184.531 366.447 cv
185.498 364.996 186.546 363.465 187.674 361.854 cv
187.795 361.652 187.916 361.491 188.037 361.289 cv
188.238 361.007 188.4 360.725 188.561 360.483 cv
191.301 359.919 193.961 359.435 196.702 358.831 cv
196.782 358.952 196.862 359.113 196.984 359.274 cv
197.669 360.443 198.555 361.854 199.522 363.627 cv
199.885 364.312 200.288 365.037 200.651 365.762 cv
200.772 366.004 200.892 366.246 201.014 366.447 cv
202.585 369.672 202.666 370.477 202.706 371.042 cv
cp
.988235 .533333 .447059 rgb
f
184.531 366.447 mo
185.498 364.996 186.546 363.465 187.674 361.854 cv
187.352 360.241 186.948 358.267 186.505 356.05 cv
186.465 355.849 186.425 355.728 186.425 355.567 cv
185.78 352.665 185.014 349.441 184.088 345.854 cv
184.007 345.532 183.926 345.21 183.846 344.927 cv
183.564 343.799 183.281 342.751 182.999 341.744 cv
187.231 340.615 191.462 339.487 195.694 338.318 cv
195.734 338.56 li
195.774 338.883 195.815 339.205 195.855 339.487 cv
196.5 346.579 196.822 353.189 196.984 359.274 cv
197.669 360.443 198.555 361.854 199.522 363.627 cv
199.885 364.312 200.288 365.037 200.651 365.762 cv
200.772 366.004 200.892 366.246 201.014 366.447 cv
184.531 366.447 li
cp
f
298.05 223.061 mo
292.447 224.104 281.503 225.341 268.832 221.298 cv
260.109 218.513 253.747 214.241 249.798 211.088 cv
252.602 203.877 253.52 197.589 254.476 193.088 cv
254.941 190.892 255.396 187.629 254.979 183.768 cv
254.068 175.334 249.747 170.982 248.179 166.893 cv
246.005 161.227 247.443 151.707 262.932 134.758 cv
260.018 142.707 259.606 147.513 261.696 149.177 cv
264.968 151.783 274.371 146.69 289.906 133.897 cv
292.572 144.544 294.943 156.558 296.539 169.789 cv
298.958 189.858 299.007 207.876 298.05 223.061 cv
cp
.25098 .290196 .87451 rgb
f
253.57 246.229 mo
253.479 246.221 175.875 232.05 175.875 232.05 cv
175.599 231.998 175.418 231.739 175.469 231.463 cv
175.516 231.192 175.741 231.019 176.056 231.058 cv
253.66 245.23 li
253.936 245.281 254.117 245.541 254.066 245.816 cv
254.022 246.06 253.81 246.229 253.57 246.229 cv
cp
f
161.935 277.71 mo
161.719 277.71 161.518 277.568 161.455 277.351 cv
160.25 273.396 159.18 269.319 158.271 265.234 cv
155.902 254.565 154.595 248.685 157.074 244.876 cv
159.42 241.267 164.032 239.405 168.917 237.434 cv
170.856 236.654 172.828 236.017 174.796 235.533 cv
175.099 235.454 175.343 235.631 175.406 235.899 cv
175.473 236.17 175.308 236.442 175.04 236.509 cv
173.116 236.981 171.187 237.607 169.31 238.362 cv
164.355 240.361 160.093 242.085 157.917 245.427 cv
155.76 248.74 156.767 253.825 159.255 265.014 cv
160.16 269.075 161.222 273.129 162.415 277.061 cv
162.498 277.324 162.348 277.607 162.08 277.686 cv
161.935 277.71 li
cp
f
167.957 387.031 mo
166.843 385.974 166.243 384.648 166.243 384.648 cv
165.9 383.872 165.749 383.182 165.678 382.774 cv
166.287 381.125 167.257 379.105 168.838 377.082 cv
173.066 371.67 178.818 369.867 181.18 369.273 cv
184.328 372.506 187.477 375.738 190.625 378.971 cv
194.793 376.086 198.962 373.2 203.13 370.315 cv
203.379 370.582 204.014 371.335 204.185 372.506 cv
204.377 373.833 203.848 374.835 203.674 375.135 cv
189.512 384.364 178.006 389.433 173.876 389.172 cv
169.95 388.924 167.957 387.031 167.957 387.031 cv
cp
f
99.6917 343.911 mo
99.0637 342.51 99.0127 341.056 99.0127 341.056 cv
98.9905 340.208 99.1133 339.512 99.2029 339.108 cv
100.393 337.814 102.058 336.315 104.29 335.044 cv
110.257 331.646 116.263 332.165 118.673 332.514 cv
120.356 336.701 122.04 340.887 123.722 345.074 cv
128.675 343.99 133.627 342.906 138.58 341.822 cv
138.708 342.164 139.01 343.102 138.722 344.249 cv
138.395 345.55 137.525 346.275 137.25 346.487 cv
120.642 349.639 108.074 349.953 104.353 348.142 cv
100.816 346.42 99.6921 343.912 99.6917 343.911 cv
cp
f
178.347 373.925 mo
178.347 376.494 176.265 378.576 173.696 378.576 cv
171.127 378.576 169.045 376.494 169.045 373.925 cv
169.045 371.356 171.127 369.273 173.696 369.273 cv
176.265 369.273 178.347 371.356 178.347 373.925 cv
cp
.592157 .717647 .992157 rgb
f
298.361 200.351 mo
298.74 200.498 301.755 201.993 302.364 205.061 cv
303.065 208.874 299.495 211.902 298.163 212.53 cv
297.44 212.848 296.238 213.418 294.688 213.906 cv
286.83 216.471 279.613 215.417 262.12 211.362 cv
259.019 210.65 255.681 209.846 252.106 208.951 cv
250.073 208.435 247.974 207.949 245.845 207.396 cv
245.935 205.198 246.025 202.999 246.114 200.801 cv
247.686 200.539 249.448 200.35 251.362 200.329 cv
267.104 200.329 282.733 200.34 298.361 200.351 cv
cp
.988235 .533333 .447059 rgb
f
284.237 224.511 mo
244.945 222.013 li
240.511 221.771 li
237.852 221.57 li
209.561 219.796 li
201.864 219.313 li
199.406 219.151 196.786 216.975 196.061 214.477 cv
180.142 160.636 li
179.417 158.097 180.827 156.203 183.286 156.324 cv
190.136 156.767 li
218.467 158.581 li
221.127 158.742 li
225.56 159.024 li
265.659 161.563 li
268.117 161.724 270.696 163.86 271.462 166.399 cv
287.34 220.24 li
288.065 222.779 286.695 224.672 284.237 224.511 cv
.878431 .878431 .878431 rgb
f
gsave
237.852 221.57 mo
209.561 219.796 li
190.136 156.767 li
218.467 158.581 li
237.852 221.57 li
clp
190.136 156.767 mo
237.852 156.767 li
237.852 221.57 li
190.136 221.57 li
cp
.917647 .917647 .917647 rgb
f
grestore
244.945 222.013 mo
240.511 221.771 li
221.127 158.742 li
225.56 159.024 li
244.945 222.013 li
.917647 .917647 .917647 rgb
f
285.565 88.1641 mo
285.565 91.5388 279.123 93.615 270.458 96.476 cv
262.555 99.0857 260.406 98.2443 259.343 97.6333 cv
256.237 95.8505 254.603 91.5734 255.35 88.1641 cv
256.662 82.1831 265.091 79.8522 270.458 79.8522 cv
278.802 79.8522 285.565 83.5735 285.565 88.1641 cv
cp
.384314 .0705882 .133333 rgb
f
296.412 104.428 mo
300.047 117.239 300.322 134.571 300.359 137.94 cv
299.666 138.386 293.189 142.419 286.967 139.564 cv
283.921 138.167 282.286 135.796 281.552 134.527 cv
277.507 127.535 279.66 119.605 280.041 118.281 cv
281.989 111.495 288.345 108.75 287.093 106.065 cv
286.573 104.951 285.504 105.299 283.591 103.599 cv
280.963 101.263 281.43 99.2272 279.789 97.1235 cv
276.9 93.4196 272.471 95.9049 267.825 92.7156 cv
264.074 90.1407 261.292 84.6285 262.787 81.6331 cv
265.297 76.6044 281.185 76.0177 287.807 83.3542 cv
290.065 85.8569 291.467 89.822 294.272 97.7531 cv
294.272 97.7531 295.522 101.291 296.412 104.428 cv
cp
f
290.913 91.0785 mo
294.378 96.2917 299.447 105.394 301.66 117.777 cv
303.319 127.059 302.8 134.983 301.996 140.446 cv
290.913 91.0785 li
cp
f
256.113 91.3304 mo
256.566 95.7235 259.471 99.2126 263.165 100.02 cv
266.453 100.739 269.172 99.0712 269.84 98.6348 cv
256.113 91.3304 li
cp
f
256.848 111.06 mo
258.044 111.772 259.379 112.169 260.705 112.205 cv
262.547 112.209 263.885 111.669 264.786 111.158 cv
264.892 107.683 li
264.542 106.888 263.106 104.011 260.304 103.303 cv
259.221 103.027 258.115 103.106 256.998 103.539 cv
256.608 103.735 256.242 104.05 255.958 104.444 cv
254.841 105.994 255.392 108.261 255.51 108.702 cv
255.805 109.769 256.392 110.563 256.848 111.06 cv
cp
260.898 113.216 mo
260.681 113.212 li
259.154 113.173 257.627 112.712 256.266 111.882 cv
255.62 111.229 254.9 110.273 254.542 108.97 cv
254.396 108.454 253.755 105.778 255.14 103.854 cv
255.518 103.33 256.006 102.913 256.588 102.618 cv
257.958 102.09 259.276 102.004 260.547 102.327 cv
263.861 103.161 265.455 106.415 265.864 107.396 cv
265.904 107.604 li
265.786 111.469 li
265.782 111.638 265.691 111.796 265.545 111.882 cv
264.538 112.496 262.928 113.216 260.898 113.216 cv
cp
0 .00392157 .054902 rgb
f
268.986 111.382 mo
269.922 111.918 271.378 112.52 273.066 112.425 cv
274.393 112.394 275.727 111.996 276.923 111.284 cv
277.38 110.788 277.966 109.993 278.261 108.927 cv
278.379 108.486 278.926 106.211 277.813 104.668 cv
277.455 104.168 277.026 103.889 276.73 103.743 cv
276.01 103.464 274.822 103.188 273.468 103.527 cv
270.666 104.235 269.229 107.112 268.879 107.907 cv
268.986 111.382 li
cp
272.858 113.437 mo
270.839 113.437 269.233 112.72 268.226 112.106 cv
268.08 112.02 267.99 111.862 267.986 111.693 cv
267.868 107.828 li
267.907 107.62 li
268.316 106.64 269.91 103.385 273.224 102.551 cv
274.487 102.228 275.849 102.319 277.136 102.822 cv
277.746 103.121 278.25 103.551 278.631 104.078 cv
279.977 105.947 279.43 108.466 279.229 109.194 cv
278.871 110.497 278.151 111.453 277.608 112.024 cv
276.144 112.937 274.617 113.397 273.09 113.432 cv
272.858 113.437 li
cp
f
268.371 108.065 mo
265.333 107.97 li
265.054 107.962 264.837 107.73 264.845 107.451 cv
264.853 107.179 265.077 106.963 265.349 106.963 cv
268.387 107.057 li
268.667 107.065 268.883 107.297 268.875 107.577 cv
268.867 107.848 268.643 108.065 268.371 108.065 cv
cp
f
278.99 108.017 mo
278.801 108.017 278.615 107.907 278.533 107.722 cv
278.415 107.47 278.525 107.171 278.781 107.057 cv
286.652 103.444 li
286.892 103.326 287.203 103.437 287.317 103.692 cv
287.435 103.944 287.325 104.243 287.069 104.357 cv
279.198 107.97 li
278.99 108.017 li
cp
f
288.862 107.057 mo
288.866 109.901 287.513 112.208 285.841 112.21 cv
284.168 112.213 282.809 109.909 282.805 107.065 cv
282.801 104.221 284.154 101.914 285.826 101.911 cv
287.499 101.909 288.858 104.213 288.862 107.057 cv
cp
.988235 .533333 .447059 rgb
f
384.055 286.314 mo
258.919 293.338 li
252.204 293.715 246.516 289.661 246.214 284.284 cv
243.555 236.922 289.347 195.836 348.493 192.516 cv
375.558 190.996 li
387.083 190.35 396.847 197.307 397.365 206.536 cv
400.99 271.12 li
400.898 272.27 400.324 277.922 395.428 282.22 cv
390.703 286.369 385.265 286.348 384.055 286.314 cv
cp
.988235 .866667 .168627 rgb
f
258.646 293.322 mo
251.791 293.322 246.116 288.965 245.793 283.29 cv
243.113 235.45 289.419 193.808 349.026 190.459 cv
376.091 188.94 li
380.152 188.708 384.222 189.408 387.783 190.955 cv
388.295 191.179 388.527 191.769 388.307 192.281 cv
388.083 192.789 387.488 193.017 386.98 192.805 cv
383.706 191.38 379.987 190.73 376.201 190.955 cv
349.136 192.474 li
290.643 195.756 245.187 236.449 247.808 283.18 cv
248.076 287.993 253.267 291.626 259.449 291.284 cv
259.902 291.295 260.481 291.677 260.512 292.236 cv
260.543 292.791 260.119 293.267 259.56 293.299 cv
259.253 293.314 258.95 293.322 258.646 293.322 cv
cp
1 1 1 rgb
f
281.106 73.571 mo
280.229 75.3188 277.252 75.0175 276.808 76.9736 cv
276.57 78.0234 277.353 78.4429 277.312 79.6599 cv
277.218 82.4749 272.867 85.2129 271.61 84.3577 cv
270.466 83.5791 272.896 80.5127 271.435 78.3168 cv
269.696 75.7021 264.974 78.1326 261.528 75.1262 cv
259.855 73.6677 258.63 71.0575 259.177 68.9136 cv
260.385 64.1764 269.918 62.9875 271.221 62.8251 cv
271.458 62.7957 271.548 62.7888 271.61 62.7844 cv
277.253 62.4144 282.629 70.5344 281.106 73.571 cv
cp
.384314 .0705882 .133333 rgb
f
278.529 73.6992 mo
279.147 72.7566 281.172 69.4258 280.104 66.2058 cv
278.685 61.9304 272.175 58.941 264.739 61.1683 cv
278.529 73.6992 li
cp
f
318.836 382.496 mo
316.418 383.444 311.211 385.175 304.26 385.085 cv
298.059 385.004 293.385 383.512 290.995 382.596 cv
290.145 379.799 288.82 362.27 287.935 353.987 cv
287.781 352.549 288.744 351.161 290.458 350.48 cv
293.576 349.241 298.581 347.772 304.932 347.807 cv
311.09 347.841 315.939 349.275 318.991 350.493 cv
320.686 351.169 321.647 352.537 321.514 353.961 cv
320.621 363.473 319.729 372.985 318.836 382.496 cv
.996078 .666667 .227451 rgb
f
304.711 354.439 mo
298.91 354.439 291.164 353.528 291.121 352.214 cv
291.08 350.959 298.072 349.347 304.533 349.318 cv
304.593 349.317 304.653 349.317 304.713 349.317 cv
311.341 349.317 318.365 350.956 318.323 352.214 cv
318.28 353.531 310.497 354.438 304.722 354.439 cv
304.719 354.439 304.714 354.439 304.711 354.439 cv
.992157 .443137 .0509804 rgb
f
320.663 374.768 mo
318.974 374.768 317.255 374.414 315.629 373.709 cv
317.235 370.01 li
319.301 370.907 321.572 370.974 323.477 370.195 cv
324.823 369.636 325.842 368.688 326.267 367.597 cv
326.983 365.779 326.428 363.052 324.465 361.879 cv
322.422 360.647 319.49 361.411 317.948 363.583 cv
314.665 361.245 li
317.44 357.346 322.642 356.094 326.534 358.42 cv
330.427 360.742 331.364 365.661 330.018 369.073 cv
329.195 371.175 327.373 372.942 325.019 373.918 cv
323.654 374.485 322.17 374.768 320.663 374.768 cv
cp
.996078 .666667 .227451 rgb
f
%ADOBeginClientInjection: EndPageContent "AI11EPS"
userdict /annotatepage 2 copy known {get exec}{pop pop} ifelse
%ADOEndClientInjection: EndPageContent "AI11EPS"
grestore
grestore
pgrs
%%PageTrailer
%ADOBeginClientInjection: PageTrailer Start "AI11EPS"
[/EMC AI11_PDFMark5[/NamespacePop AI11_PDFMark5
%ADOEndClientInjection: PageTrailer Start "AI11EPS"
[
[/CSA [/0 ]]
] del_res
Adobe_AGM_Image/pt gx
Adobe_CoolType_Core/pt get exec
Adobe_AGM_Core/pt gx
currentdict Adobe_AGM_Utils eq {end} if
%%Trailer
Adobe_AGM_Image/dt get exec
Adobe_CoolType_Core/dt get exec
Adobe_AGM_Core/dt get exec
%%EOF
%AI9_PrintingDataEnd

userdict /AI9_read_buffer 256 string put
userdict begin
/ai9_skip_data
{
	mark
	{
		currentfile AI9_read_buffer { readline } stopped
		{
		}
		{
			not
			{
				exit
			} if
			(%AI9_PrivateDataEnd) eq
			{
				exit
			} if
		} ifelse
	} loop
	cleartomark
} def
end
userdict /ai9_skip_data get exec
%AI9_PrivateDataBegin
%!PS-Adobe-3.0 EPSF-3.0
%%Creator: Adobe Illustrator(R) 10.0
%%AI8_CreatorVersion: 19.2.1
%%For: (MSI) ()
%%Title: (2008.i605.015.P.m005.c20.freelance people work set-12.eps)
%%CreationDate: 2/19/2021 2:57 PM
%%Canvassize: 16383
%AI9_DataStream
%Gb"-6Bj9=Sp,Mu_ra"-'LNK5d/Hf:d,o^Mj+GA0097cL=22QmKCsCCT3\UK)rAfes3#aUHh+eS0F&-""5*g;dUU*U"=P0^!C8Gt<
%I'`h@eVm=jQ!"m2B4W'65M?,4fDdER4=_LCX`UN;HEgD.C@-Xc]bn.\>P1V%filX:r<d>.rU:euKUE?JV,I=DZWRTmQgdaff/kFG
%.oE"sXG6,$bZY-k:?^du/U.XA^n1q9:3NZ<3f;X.(_*iHr>tBC-G'C/rO;RdZP)tEjiPik(%AC7s*C<&ZM@i<s&f'fQNu/:DHCkf
%7o:LIL@'#p"s'gXD"qo\*bOuj=kK^\Gs%KI(Aug6OMN7bAR75*d\=2r%)SnA/H$[jB)=<ur3pM&s1;rs5N0p4j()E_kMRJDI0`<(
%<lXgjZ-Y/V"!&LpOTnC`gT3?6@Ipc^H8Q<%33"kd@6<I[%m2B._=Kp:n8Id!jonjZ7eU(KCUqfrYe7&jJNKHq<<DZdlc/^*Ner4N
%UVBhcc_@WX2)Sn)RdHm@It.P^$gFuSpom\RRVus&2N1rT/Dt[*YEtsjbY%X&67!m08PBKiXYGjRk'>G\riT<`\882`h_NMaG,foJ
%Y6Z#uet'Hg7()(O>8jH%((r8&2^>UPaOm)f1:H:*Ap(eGD2Z?,Rs)%KCr/$3E'4_^WF%O+kN1F_Z@XrQD,9d#::"3jZ9(aQc[QNE
%=[2F(0Rr_.JbF7KWgVi#iacghZ#Ql3rXj=e>q9dBX1/Eer,jfI6,7B<eBdg:mP"2@RclRb/He%Y=bdg92/N%ps7_\Kq'QE4%QrN\
%eiSlIg0+A]s0n@GePDsa?F^h_pgJoK50,8f/8VcpW])TifA0==G(i7@/2nW/C%UUEC)8Q"S(5l8ddZ"ifWI/a#tp[fVr-GLC^!7(
%k-u9EJR\C;`_"W%X@gsg&+@rMk2/#aK+*@JG8jrRG3rpAWAbG!1L?Lc%k;!>CrVZN<p:to$"6iG9d4&rI\3W7@-n.l$anEp-t<i%
%O&C*8[P'n:7(#oCDOl:ENZ>$,=IL#7_FgYPh@(>>j^Mi.fkF`&NpH@1h"m,qEDO\hoEa>J8ObdVem?moT#"_j6@Xb5jS58pmO`m'
%=ASF*Q?k8!ZX#&uVB<Y0=5k4u'nTE=/"`\J`hQnkds@kGWlD.g+U9.Eb/HtpoW-N&;XO1Q+q8GB*;)LQk=L<02+rG1(L4DTEXb]r
%bYb:nNk0SD?>Z@;RQ7qb)\L>V_*%!@l(*?29BrY@jfo`K[eSh/gDs*6D)>-kih&$-nD!j=]pE,Xd*MN.&IjW%q.n3L[ERXFX-FSc
%>_WPuQ;9U0#R&fn+Qf-;YTKcf;6H.P;2m7tAn;b]FSl^MCB$W+iSgN=n0#&X"ARImHVo6HQ&`l[pB[!e=Chp-RR]09,lC8#_QV(D
%?s@?$\;8;j([Vp$(rYYckHAp*I?B+"NAi:ql=A9gI,"1US^DU.k9C.Y4kPsm1:MW$fs.X)Note5Pl'-rnAhq3m.&Sk9.>ZbUnr/9
%9UgiSGFGGf9\,*Kppo=l`m.'/pd>CfeW8EqYV*qZdippHf@)Eo&,)fT_poZ$=>O]7.VV;M6(F<_b?EbIE_aMQ<+n`c3l%S+<*^UF
%Ukf]E.B@TkYDV`:B.=*Z,,Z,5UBYUC2=U,C+?CPk1_Si_HMT"p1.V"4ZP`)6Mjcs9eC(:Gg9aM,EbuL\p<k*28'&c>:68=k7*Q9j
%aqV4);('"`a<bVaPEo[ir1QuL+Z=cL/,AB[ZSqREVLjK3B/b8"bWWQUnEer@B6Vo8_-F(SXI!.4heql:rR]S(2FV_!7U<V?dUhk#
%c!@rlCH$J)k-!OqE#if*$8bf"BLN$Sih&@EIM_M#;[i9u8_W[\@k3lWQ$uSFSDTp]R)l(J<lVJo0)&d(eXF:E;*2K0<U2kJ=R\Ri
%-/F5R-F^jo7\s?_5tj#7'X<rY"[QGDam$63FB5Q(<WYGXHQrmPq+_hSQb].o80h]K#qKM4CKMD]J(EOjpid253QG&k5Gm,2#'"[T
%AK%][MoAH!KB9lt84k(%bR#4GpIQGX3_s;kCV5LD@N&EBWV0>+Ouj"/FX9_FD%B:910/q&@C6qp;H/@8^VX>,(8r+Yg0ldKr.6XN
%7FF.G,IpdNkEeTPq"<pkT;W,2f#lNB!c8:XI?c,j=NX,ubB-9$<?s8T4t5(C-q:Af\-R"<%-+]M;C^"%?o&f`^H9'sVrALS@AhX*
%LUGCS<)'h18@]_h^.GIJ\GVtZpe?F7U'^M+lAUm)s%o<3:*=W3UqlZSAk&R^C'.l/AO4s"[kFaY4,mpC=db?q!]r2-:'t/WSJ6/g
%d_p_Z.;0Q`amGe<SaLVkZhlC'\G=UT_^IQmBWuE8P+9KZ`&2,^Fd25<f5s5lSjtc.PK_tU.-<PNGn,+_3TLlE<ouF'=VT[N.Yis#
%j=j$HB:_J^NZ9hA8B`7cCG"Z9SEGmpH/j2,\5.e(o>^C7nN:af4-jQO2kG^GpcNIW`kRu*NTYTI;Yf[\PNIDQbj:N-2hJCtbqlSX
%NkfL)UGdJHVgbJ>5/d#M/he>B8-P&q"2]'jYGP#[<<!=>o,1GN%(r$5obs3e[5@bqi/K1_Nb(K0rRHOk;D1b63g`FYjq4m*$e2TU
%Ae`eH^bCVrJCsF<II1[X?A[BOc)A!MDhbZ^)5;E?C`YY7",asbLX,%UZi@&^8msF!j(B#aQ>AcS%O_0M\_9Vt;c8Q7.DCupaGDD9
%>KUVe!dDLiRXCNnNP0EmE%V%1JWTW4Vg%o0ZMb4=)<%J>^dr5>Yql"Z)(RX&D?RuZ9b+S,=Z4O/g])/Ac]BX/1AK#1#Y^prb\40l
%9cACj*dF(X?KQg*CQjK]((S"@-k+(%k(/kEi+3sSR0R'\JX:Z?AVuGCaq]C'/7jq+!Mju@l'_]7dLOSs8!'kgHC=UpdS2g"IcG=I
%pu@LN8P5l5^9HUo>u[B/\o%<*^l?%0U/GmX#H_o@fK[XB!qV="VLsV;^Si@$AK1Yb(KF/>S=4c;GYO*GXrAaj)s=[ic'@>e(8npV
%%f^=eE>J05f8t(F)k?%L3),9)QgGa]M:Zi;9`%=d]pn\Wf2UhT5Outh:"MO@T%)AY8\WU]mlBtb4EOlC!"JBUEs;T%pRQU+1,Ll2
%b5Hr?n#&mSVYFid$t"=#F!Bl?CG1.Sk5/(HhYc)cl.@9SZa3]^``6\AV3Dk]RFs>E,]tPqd9)k*:F):T=RW'mRd\I22b/,+\r**D
%(0bF:HG.8IM6!P>Y^!^E@8OWL(<c)PX&_-DIIeuF_&p[d']5`<_OMKhQBIhBfgZ-U]U@PDBc#bUCB#0mXkgM`ZQ!bX[4]<orNE>m
%-/3%DDW$7/2tK-0;OD,rEAm^Vh!+Rb7B5sMZ[9t[Kg.W5d]ZGSbk@<N`-OB$P:!`%6@R3U9?g7*c*,li6>Q"$?FOuS/\2m>#@6@N
%Rb>>l-TunXMq@@OQkSP%RqQ[QbtjGI\8=&e5sFBBr:pZiWKdTFXmU%TJp[d`_>FH3835mgjQ7i2k9n?K6oiOgOO&(0o^^e]kf3E!
%o'+M\o)n&4;`E!2"SqL$?`$o1P?cc+SKsi9Q2*4*cg7aR+!&<oEl;*:/@NI=bBc0C@"mJWb850i'=tmVW*O9W7jW;(:4",?EOh7t
%<rO0,8J-0Q52^nFBqBJt;(^$%n2"PeB<;l)a4%7-'q3O2%M58pUg>/B`6?F>2Hm4]I0DCfB<"[k7%UV4)9[uf/]k%:1md3JLRF7_
%f+AEi0BIB8mFE"0:9uA0m#7e@)tm2=),E!cQpssj`//haQ$RNOWkC=H@cD!,no7S:UHa5PDN]?[k3pCdF0U^]ORq`aT>Fi.@?"(]
%AJr\+q6l5Rmf"*<AE"Mngl:+]1QX`3E<UNQ9#+FnQg!S"!jc0#?t[rYEg]@;qKcC*oti=Q:5T.GZaPd(hOqSSMA:F(rE7W$Pad.N
%i\QKaiHBI7Ap%`13[lg5_VdiOgU,A1*pa2+P<u0J4IettEg)kAX"m`<VR+t$SBWD*B(jIcAt'Gc%NuVnO$"LC_cl@Wbnh4oOQWf[
%eP*Z=G3uV5o>&Bl30'>>ZBk,FoJ(0)W8oO3WQ[Mq^WWhP'$EL<@ekdKE2,UgoKVtN(gH7N_79?B0DJ,+'IN9Cs4YZ/noqMlIuD);
%H[M##iXZ4M-Z`TC:%i4+kf\)@(&CZWpYBqrhi+T.T.'n,..C*BI@m+79QCB<'WS4*7WHs+7n'7ZMo$/E=VenIEBf^/Sj8iO32.+X
%Q#!Ae8o-tV-uA(qj=ZY+;_@aiRe:EarBk7^1RMo+Q7"4!44R(P9G=Dh6(ScnhC+)BXHlMuD5Bhp)6eE59QL7Z/="BFnjob:ZTKu-
%Uo4VNItbX8/.bp-mBE#,%V3dTOd*l*9.lRqr?W%1Ia*3/;]6^,-4CO<b10ICi6MR9B)SB'.P#Vp*P)!ZN9RYrZ]epeLJGm2$3_.J
%IS(OY-k7dXkHcB:Inn_jn70rX,=mU)1Q?lhlQen:s%R]&rsK(Y-Fr*<?&CZ"F+8G\V$I[goKAOM$Kc\Q^?7uS3S[6Lik6Zj:8E/A
%]_=nOnFf)R`GXODb?"goB!nE_"eR]j;Rqu<Tj\K[/Go/,c,N2c;Ems>>ae="h_+`c>k6,ch[E&i'RVs.I/if$Dcp0Miu'/f4Tk_U
%*35t^,#'Z/,jR,=1dkS:l+WQ",>L0XJ!E[+^;Zr=-:J?t#@J?mJkHJOdOt%ADG]VO_\;0`E_k+_E8>JC@=J1)/=8]e5--e\#;0Wf
%Pl)!dhJN"9n/G=8Rc]4!Btn4oI`^(rm.0!D!O&BuhJfOo/)<^[)/m)DbLDG(r8c0$F5:=cD(7a$4o_&Fs7YWWQT`Ma_#i(,e$,rR
%A5%8J@p,TPj$,!6ps6lqN.ZG%rmg<6[R-O2dpQK"3T[6%5AIf);BF*VKb?<rNHbnh2YAh5r^G,cETH7hj@moSs!$VJ?\eFn3N(a@
%^.uWFAmS+eD(@CA''C>V`Om7*ISJ>"lT++()L^(tigB#D<+Fp*k.FZ'.eWZJa`IHP:V"f1V`ZWc\:GqFZ`%U<c7Z_sDS`]^bT@6c
%cd&9/IC35IeWt&ji<IdlU`j3iWuPqgIWf3H2%r0cn\6$jR,<=\jq-T9U+pY[Eur_r8lKsUd?sohL49:L)JNlP7l7)Je'90VdjiB#
%&WM'(@n%X\2rH<GRrB$pFgIe[WQ:Jt1Sumq5o4n->oP^%loEl-LQm06QW!G0#lehJ4mn4"jS)O8Xg,2E2a3og<SZM.Hf8_q+>;6e
%=uZ2n==N%SJ+?mH8_VNIr`t5"]4gI3<:f^6=4/l(ZGPDSS,7OGGECtdhV@"X(4RukZ$Fgs^%o^=k8rMK4h_VQa><,NV4_Ymn4iF"
%RQGn<LMuVM9r5b:HkRuq;cUk5]?b]=DO\,u52T'1Hlh1CO+&/LlajZR)1S9NaM))*^,PUE4#a.-1_#XSA&h;5'kC75Har$A5+4Aa
%2A][u._KXs81I>E?nT+S_Wt"ee[,^fdhK7_b\Zq5RrF?WRMGYShT_\Hi%t;qQ$F9b[aJig[a!;pj"sAW<i!!c`akLb9ON`=K7B$j
%S6G'E'u_uhl-0/F@5\3JbgR8=87k=<V]f[;IGkks[*jDjCpICnbG@`GDI%q'>#[M>.T%p+oP!`Z8^VaL,,]d9q?C;pYdVZ?>E)6W
%N2faW]cT.E;WUkFBJ)_?E@*f=<+9b1ok0.q`p>+F'Z<\Yiit9$^WaKSG0c60M5;<C\-<.W_D6!:^HfD\Q&qANq3L0tR'V%r=/q6;
%oqF'm5<V*&DLMk"nZ3Tss%*e]4Y'S`l0=E]P?ZBJle/G=Z&.b0US1Sg7:D'HgV=m\maoqCSWc=0'N$;iqH:.29uC@l2CU\%oid6d
%&f-CrC?LIXK-W`SjGB9tUWf3<r&6Z4V4BI"`'cit;G(Y@F(D@DOjT-/:JJZ@V,Fj0rgAYm@amtH'it;@J#-6i0FZZD1SkDoR$/^C
%KdiHq/^sMgU1*t_p#8csZNt@.C+>@SoVY/t'/!h/!Brd=7TH2<K^2^gXN7Ig"Qu$udhJFfd?Q,Z[a!;pj-s&*EeA9RZVq!rB<E!r
%%K"D-lC%0GPlDV@2?U?8`LBhbP(o@':C3o&oB3M0o3.B(/^"*0/P7KI2td%=-Inid+_L!Sc^4cuGqI/QbI<sEMiqgb9tdL;8[Ts\
%Lm\uBqKHOcB!J3[eQQ9hG>3*0BD]SLW@GRC.kuDFLWn%1r6\A8EWe>d<^XI@bjkJnC:_DYbs+qPIu2i#q#KAAk_Yb'\*pD)"I(7m
%I'^#IR1$TU-Kn?TC4._uk(7L!Jh@4rc3<$R6-q4EG&?PU]2jdm*l0rAS\2&U%\T(F1pjosiL<pfSp^+4s*NFlB0JOAW-$td=*/^?
%b,SA<1s0Vm40=FbITR!(6);50Q=,[3*bP33<`l>ccZq<^eDkkgZ3#N"MAJW$Y<9m:omhRKhVnA5dRK0+.2Xp/HtI#-63"DFqNL^C
%pQ%PsB=VXOW;Wb0[9u)/W7CpJd;QNB(-_gaKUka4$a:,l.FXSC.T[RS-q:KtYOF1YlGik\LBonn^Tu"gKUoBR;?bKmkQa`d!C$^Q
%/RA>/q]*=XS)8\RDpRC?mf<4m-6fdgq=MYKPl:gs%rjBj+!hcH5mS_Z_^7B&^o9j921B]Y_Fi<q7ngq=C&2g&Iep.!rE4][<N^k%
%?23%KXH_!0HMGOtT4%qd_"[lF=\\qE^]*\p3,EaS5:apM47F`tnSEiKG1*oATsu,I)Q;tn[MBAq>F?N,Zh`8%TS(MWPf=A\4\j`^
%\(X"#27RO_ni%F*A/@BkqGf\\=0S\(0.GBHTVHh[K?i),*DGPV__t3@_T@Z9+S4Ws4h;4*$,npcnRu22aK[Z"D`.-UH5WQe(/D$^
%pBr@,pM-goT4,(62HKDO1-QPUqW#u1H@ML]WCh;"%Ibk?iajstR&?&`e>9,en?bl5lAs98!A<lc;:J?^eqQYY7/rfOn]rTE9#GQ*
%,i)Fa_p]==ff4pI.m7lA\@tdArL$tC+RX>*4ORC![+b3<'SsLgb+br=&<00/Ts,'VF6\6bh].V?POdTPcct1dXg>d>JA5_^P.)q&
%ilr(qY*68hE&0#";-:ADg!_PKPR-Yf&NF+JQaS]9Yd"c^)TJs0+\_[FaFZ?1T!!/WSt_o(5!:cK$6:W&ZH?$R/;:(;77AHcIZ8+5
%oRR"rXOjYMla5LQ@q./QCVOVM;dB/aK,K&NC?u9?QlObV060dB@0-4B.`P>Fg0k:=Y2:q#i#`Kl:.^48;XmunRm<:mZC@+-.NpIZ
%9f-`*`m=#VR7>hbR[I3EDI,&oR,.!pPd&h)XbY/!VMI[B)Sm)in4+[67-:l2Th++LRpiGL#b-&?0lu2&Q_<gI$lPIMB+.Y*EiY5P
%_Ea:s\\&hbHCj/V*eFjG8+Db$*H)R9Cs*.E`\uV26O%%im@oW.M9B)9GZjLB@C5]&_lT,FHm`g_`7q`;g<[!Ge=BjVVoaR'e;B\Z
%UWd`Mmri<T<,RJhj\!'(ldl17W#r6WASpNi[WK?'nWGca>r(p(b*MN;@6&Ka:3*oHbE8ssP`J@,XMd4'Rl`91^<ES.n)"<;?E2r>
%iCe=W*TXfXF1#2b9jHJ"HR+@6L#[J(\J76uE2QSu%4d32UJklLG<t]0LT$`,D\#Nu17VZcPdAB4di_b&ZZdC'g22M>JJGACXil/q
%==L`U@BE#4SY1BiPO#UARDZ8ZNged(n'342HQ8"K\#Iit'OY:UUDcZ'ieM\(&bCj97onH,=r2251rYm##e"<B4_2"jKiagg"8Hu^
%.s?."$k@/.XIXRPo-eZVDoBj`aHsT_o-gV$$es%V?G.1VOIR(0$s0hk2@LdEmcJk8PL#<;e\nVGCaLZR(/JGXCodEYW7erlH",S<
%V9'OB1dT;LkpTR:GVGpl[f\r>q+e1mDLfsH&Ac+IAt1*`Vr"iaJ=%%_T/KaZ5cb!B1B8;/a7"dC")iI;3,UrKWI_M_q\m7IIU\YN
%JB;d4J.LA9(Qhkc`Qo[$5!(B_K@o\6iNa#/B9M6(`7t&#10:rA[I+1sUH'E`#<>&3**@p2folLo/5scjPQMJ8!&DV1K6'4AQOF'@
%"#t%WM?/MOTO!D(ZG,<:lRRG%q?@$X*":%b0X,`/2;$9kU^&=a=:I)-$qtXpYiLEE@pAtHet$U#](6kQh,XV7fn343X+A4j$YL#-
%0WVWFf[etIg\,#ZnQc*rBiN]O7eJj?d2Jg%#jHucC0Q>^D[k"3O9r2sVt$CaSp-/So7"`M%@J>c#hG*jpd]GKCX=NB5K<MG`8:K;
%UY]g^ksOncqFt'JioC@r;*No?0+G6nAAWKrC[H-Hbh:?F/?fAb,+DQ<Qatp=Vc#5oGoJWg,_r:-bTcP7nBTZ[X50ja`k`BKiG`LP
%(OLG`$.7MLlpX.69$2nCi$oVb_2k_S!uPAIbd[/hBF"Ig'64bps5!+Sj&[@uDr--$lZ-f>0Ic7-puZkJ6G8&7n^;T\h*hrO0GL!1
%nJ6ZHW!=E?dHK/Nf_/Vf2_eA`F4=osjkIqj]-r<,rlQ(m0jd5Q`Hnj)Q%j+Rbf\+T]D&jtHI_`)4O.Y"GrIs(3t?PJb=X;@=PM!m
%qJ"N*geFTX9*oakO%TV/PtE.=pS5,KbDfH)g+UM)21a/DXf,![GupbmWu,2rHPJCIXS'10-&27a/kF"aYV,9frH,Ml<mN&(S8f4U
%q!#+pA(e65YjCmbY,1hg%`&5`CTBU(="RK0n"S9rc]0:gijp\O4:+8W^ZsPN&=ZKK^TJPEr:47j<8_je1sUdK3c$EPm7Oh*78u)i
%nNmY&(XY*H,2@>FDPL/7!Ec=t+%;q][T1UtG;4k-%;\4fG=B9&V#*#i.IaW<*8^/)9ucIHf?ORF0mh=a[`VeA.*Q]H=>j@aTkCT"
%2Thuc\oIX2j_&FU20Lc1%UT?Al!KFrZ21UQ[?5SHX&*?NQpDbkYLhl+cd"3G+X=l+j17SC@XY,hF%>^NNhJ?Vf$_IfrMqUjX(MU=
%BWSB*PT8:[5McAr&K8W/a2kPae1.*BP+cH,Q'=>[H&4'+,g?*f\It`)$sTXkFu=)p'rSb20h?>]RB?0"3($Q#obn,42Fcl4U'"9Q
%(_PtmU<t&L%7P3$ZLqfI1ih4fE>sd\<[fs[lHT?rXYU$\;/__T`U=!m50mQ[K,Vjr$=PO[#W0+J.W0)Sim0?D[Yg&:n^eLRO-,=-
%es5#!8F:GoRp$Y',qN1FCo!F.NHc0=NUuFH2QEI!IAM$UZkeu'?HL';``aLi26O^uSo9tMh+a+KhGA3K\=bh."R_IC_hWPqQKpN+
%@Pa>:,B;)E.>(2I%M(q"@.]N7);HnA.ApU\Fk$P:aT+Vo<*(NQgI\ur+X\#UE8?94eZa>Pl5N;%m-[DB+=BZ7C`f4ug=]A8N;R1]
%7e<]F)#*I=CNWD44m<AZXVR#Qp!&4p1p-+Y)3*+G(;6!87H\*,h>^"sN2NEY1PUYr&X6(.9PY@^gC%KmLW_\CCgD_P&4BUE(1K^L
%F@U+#^@$@WD6FIE%?pbjDIe)-%5b_+B[,[)`l8sKH9Qj?!`:JhKJPc-D7bVjcAt6pKm.[C(jDXW6][<NL08F/YECkudCO)g$)?"\
%_V>0NQM-^G6AISXW9@%a]@R$OK9LcX10nD=9j"C;8m&"B<Lsiq43#>Bf=7)4,n\j6VcLHf)];4;;.>P*4u0ta0n28+D60X6X<nCa
%`Ra"nAnH769A4r]bIt0X^=O:JUff]okl;#Q_JX1"_uNITYZUjH<Fd5'=`7Xm,6Qt*8!!*oaoH%sGAn4&WOfA-:+OK=M\Le!$^X2:
%oSfb.\r\`:,i]9S+Hk>NruRF)*E<TDk#jML1W\)2h=PHZ>bb7HR^2I@J(frUj\@[qDbf^+N*0b5]Ao(3M=;f<f.h02lP1PaiDYY=
%R$c^XM:oe<`9[Kl.ihSOlA8PFUX5%5i_jo78/R,Glmm!7LV2:bg?h)Z=8dF/nWRNs[L\D$0jBGsDS!@&Pk2l8_^@!$T18,o0KEEt
%En,P?,Pt3:!%C34lbN,'K*S?;H,EfW=%i2S\qCZ'hV,l%F%q+A.WGYc,^T=H+^M]9IP"94f.P-89UN'4mGXgDfQ_T@E]2e`ru/`r
%nal_U:O%6gb6-Vf5s;KO,B:Q^\ep@TMU$4'U[aA[q<Su$S3lG/P"&PHR],"8IukbA9c6eK-HOB<b=\fEk"qt![<C&UX^^n'q4g^m
%n('*IG_e.)IM5@u'`O'b4-at,[UQBm9KYKG]N_@Wa8pq\PW/dDO+OdL71SmB'.tQIqOCadJCQHiGu1]/YB9])C4+nQ\g>@PeS[(F
%Xg#W!Drk)i$o`i6;u?5k]m.r+=$\eE<T>kr"$:1p`I3`?T<%++P&+?5(8IMM1C*>E_`TsOm\"bYqO'FIa$*?eaRm3;Y4?@e%N.0t
%DCU[s8V.oB'm/XWLg@D)j]X*)_oNW[AH'/LeOIc/b,VM)UaA&<QE<R&[bVR8EqudV)gap].l2)B$;^bj%^tJ+p#bAp(e9#(9^.5.
%0l=l82B=PU"5Mn5g*7hC.E,?4'q=mFYe:kPMOIUMT-G`J3;0;R-BokA$;/bum!rbAZ&pp;DQO12WIH:ni5OZSmd&-FB$serC0?W;
%7P`DjW1eM4\66!&K7EACRA%.AIS'3-5&,X>&$M[.&o[EdrmgreEiAN[bH'I_/k8k:&1?DGkN#3<N_JdZiJeS2p_g'+SoX\7N0K.<
%$k('tHbl@U\Yi>Q*:""Z`kG?u*d(5?=6m9f+YHTk$,E^ld8(/GVA7M<*;>0c8%,T9eoB^I6CJ4r=Us36nO9@%=prN=<XL/)\)@tK
%2Bn0+NIpIHQ"2!.V:C_RNMFG5Y:#h5H:%&;qRj,2kfS%$$$mDY^+Dj)>nq01khXD]'Q&JE^o\Zif#JT"cn`BfRJ'(6dE2+kOG`15
%/+_@]<6MX8F@h";$sKS?3+A_$C"*`_Y_<V`Sg<MF4q*V!!"WSWn99fJlY6,q]p!/\AXNQ_LtL^`@;r")@C_[QfD*$Q_DklE5f[jH
%25!.^Y%Qr#*LS[:>Ja&[jS+,^;3\<4!:e2/f##%f@)0C^4QV"'NH*:U5FCdIN4OJh*Dj;3l-q?U5,IUZbL$U`@^Fi\ad-N\jdK95
%E-dg3NFnu[*4<VH##?[jbN&E07qn"BB>M*^!7;YTb,'sD!PK0L+@36bc&u?i_u7P\=5i]qP`s'a@qP*&au!P.B>JK?m:H^AkliIs
%(0e&]g"/u:2e0H>K#6FO0Y+0D)@Sn@FcUSYr=,=cSM6OEj!ElK[WZkC0+XXpM(Sj6E1akUpZ^*%]>sZt_Y6^LSU7Q+2`I0eeVhuL
%g9'Ol>>'nK\&r-fF]Z;&[OpsLDS4YJZL9t_h>;SLJ"t[GWku3spD7Yt]jk3Ir:g-bP'(tYm;)FS`qiT.[F':D<hPqA[Cod=KCumj
%H2d1'hT!,G*Gq&`5:Pa$g&'q7II3:`5_ggr=BJQFGM;l]?T-`$b=fB\IBNgm[kAdcO`rj?]R0D/k4d$sGL0(`b^+_!['dLq3)aa&
%J,5ZshTEPQh.mXAoukAOA`:hPC+EM:P[@VX'GbmbB@%+4=5b+NK__r-n'kr\U[im,D"FC7FeM"Q4YuZr?G:+ArRb5%HN,!E"G:T/
%I6IU6LS+#5aR>F<Df%-(hs]]fQLE=J&F[M7#J(5U00Uk'(VSFY>8Q_Lg3RYQ\bBe/jjLV.)dE'o'Xja]_^BAphmli>(;ifCWVgH,
%D!utf[]Pfk29U3YXd6^c05X`*T&*gl55O'Vm2b$[JHS*f=F5MU5W<`Nm?`f;Xa%VWkjeZ+MQ2,S>ZPU9FlqbR`EiAgjf0=[=j0*K
%]nMkQpET@VYtD(YXd'G5g"q4k\@`Mm<n'F#C&"pAYd(UJIcoP\;W-LCDY`*ao$.oV<WDo/rGCfJW]7]`L"^rQ>6'hXaG4tY=['rO
%noYD>lH/2M"1bKNoPJ<gZG52Jc``#fpBnANI;E@O&g)Lt<X8l?Ytf6+](F1@-\Z^Ae,$]D(Q?,:[/Gtg'-G.FE:A5?d?>s49-XE.
%r3:/'h;e19deB)8Bf4o_6[Q!p4jsjJD*F#9n>/2LHh$VL@RVoc]N^m$':Ngc&5QU-;1:1\Nq;-Mjj-t6r7DLsqfb!\l'p;jcgiGZ
%ElT!8G4+:+EBeXu*+XVjqXWST]N"a;rVkR#:-;1n]KP'Hos3>@?cb3uR77!Lc^u4pQY9!bh=/7U-[4.unL@tjd*;9@rTNXGqu1kL
%UY3;)j0%gbHV1@"Hf_,X'n!O`BX8b-m@VX0dZ[UJVMZ0+Rt>P/*^/pB(@i2edsCGa_I#B*R2^Gr:[8s8a6hWlj6,gTi,&+hAn(&M
%lG%8o6J+$8ZldtAY(*H4LI"mA][qD4FWh8[DP(+u&+`Z)\R\,6O4WBRn;P<7Z+#oYH#=;AXY5/Si0JeRc0p*_Tp>bmWrCD,lAOGu
%YFGECXg@3)A\U2V't-`b%jX`%XM`=q76Z1PD-XOD*e2smG'rImh]SR2(e=3J^N6ps6!phI;:mkZg$63Gi->.hMX](mH`(l\1^G/)
%\M*jBA8SeU5MIZsb*#0UntuT[i6Lbs/mW8?lFe\6l,*bIAG_E/5QCN6oQpKSA=<Tr(\Sp<Zqj<EgsNUoq3CO2`<%u;G5muS*UhV+
%2r5VEL4sLEom>n7rK4Md3M)AQp/:jc.,:#empY0:_05A>a$%lRD3RZ6@f"rZqg0G9+5bBb<Z2L4Gd#"t+:@SLlL<eA2YZ4K;%:*.
%89BK'Z>lu6^"V3;EGYBJOGET$B=[nHHW7jjTlBS\eccWe!k9#^f()T5Sf/A0KZbF]PBd$LW7@I8p<msN0hgZoGHf'DhgP.XZ#o2D
%mV$=0[T+rp/g55D&EPnOil/7c_YU_8J=[B2k7;?eJ%WP$YZZ6hAT>CIFZ8U>1\lLUh0=:XU(3cC35iSg!*;C6inV.g2hsU\[A)-e
%;roSQ*/b&G^ZXi1r?Z7B4,;/lK"'q[Gf_FWhm?1oL7?t%DEZX7^?lrVYBGGGXT<7K+HQ67!WMa1>5>a@mqhCQi3bM5p<qq9G.id8
%]ZEGu0Xgpi"Kt[dnP@pL%?Q?f[.iW=5?M*:[=R^/Tan?8-e'%mF[SC2:Y,mV\j;"I.+Y#ZH*DI:$=Ib3Z'us`j>D'):-RJe^nBS+
%s4C`iOZ0M"=5@#:-ZXi9:uC1eC5qAqqf01=.\=0uVQ]nj-3SY9;2=!,Z0Udp%l@%-,CXJM\k+p[*"Lt2c[7m)dTo'%!WSm<&%X0D
%"o@F%8K=o**^+(@_LYRJ?.,\QJ3A/)bC)n5%K=3i`EYqCR?;QS)f[h73fT<V+?[PnO.XE$CisHGDK*5nK\GgokB1C=/i?!USVQ+a
%dO3kQAZ-cd8SfbZ&RLcjAZrL3\f7G,c'eeC]p&AYBT?5]am<71"Ma.Tl,i=@K."Jh1s[I'<6U&kVdL5;LIgBMbR>GqfQjK"J;5h;
%X5_CtUdpSNK`hjpqW85M_`69NRR<NP?CSV;H6uBN2Y'71\!nuT`>nE$L')IkQ1*#W-miT8A=:H$I,*h)k2;VZ`p_jQ?J\Au"-c,a
%HX8"Xoh2Z>1geaMhl`\\N>-X,6HQ^i1XIc3*R`-`N?.(p\\kcF(LR<ZB_6#Gh!s,82/'tCgf`8i!KQXbA\ru_]O"\nS@">!DQHtG
%[iTD$IK.Nig?#qPP6W+hK^I4VfHjD:NF<b6N.a\-?d]G"^O!.6mt6Jni6sCK&%\HCWO7e6Kq*40pGr%$]d,`bLW6M^\((-Bd[?SS
%naqU+lt5i7arT&nhW0^N]@H:=HRk#f:Fjdd@3\lf(bb+B6.]Q+*d0ags2_n-g,t1N^hV3NJCfb"@P=hiK1N*Zh].eLnG2lgrd"+o
%[pa.7]OtSpF"cC`ri!m2B&Rd.odX]k'6R)gJn=I4)gaX!@@ds42R*FXf$hIdP^;pIHBCF=h)\^g+++,Bh>X[u^4@MHJ*M+3aFNRG
%hblIQL/F?uNXNMG]di*X^H:*uJ!V[$B@V]WYf%X;0IKZ1iV$6+V)f**\SK9#S,9/TA[&SWis.k/BjIE^iWmlbUiV6K+!_rJEJu:@
%oAp3Q\VJe^PAai)^:M(%n`[mA9)6Th<P;]m:ZrL9VlId_\qCNS/TgscSs_Zb7S<`p3d3:AZ,_g,))O&\G(H<U5qhHY'B])X<]G>)
%H/&!mH<lfSOp79#M_-'NoVh9Hj@PHjq4Q"k0->!<P\FUIh=#:VorSIkLNumsf5IkaB5\iRe-9bdg?,M.hDK&cJ0ik"om<%t#&_c'
%/Z&k^^HB/-fWKA2M1qVf'+:lph-Kj;X5`"-c.<1>5g>)L9-'A_Hs"J'IX1RoOFL(^&%Xl1^Ln]W?Zo0TXM#FJNNR3W+"e-I0CN^_
%I(m#bkfM,lM;bWk=]iT.Mp9HD8)T.BS96dZ.L(aDDI/4@\*/BOkW"6(Xd5t%$WYGESF_f:,;n*;>.[Z1]jKI#fti[7lUOb.L-J?B
%a(f,O`J<4+nQt#9V$j\DmV&Nj*S0@m;f'+W'm/'dnR>!VaEV@qi9<\26Rs1i#5JV^JASE>*4N@P)YWF8g7.um7#XodQ.p(eSV-CA
%j#>p%<!;OAWth])H,G1F4^3qXFarm,W"eN0UZA^$j2Kb4fb?L6l#sA]eV[kFZ&lMCq,945l>C)E2FD\/@PG<UcT`-c*)tJrH1.MQ
%o]3oVLP&<-&Y-X=ViFOug>,EgjNYB%$T"X*48J5OBmF4]jnHr#B-#1ML"_h&D?:1u2h'9"q3C\i)eM_2j!P=;/u#Q,E)p1hJ33SI
%>+E<Rm%NtdS(1S9]H1;<V7ZQ'j*ZNj5&>(#H77)Pn]*9V+ZINTGCK<(mTt>9UV(dDm.>[8omL6ld2K%g%QX`jUr(`M50.BdGX@g6
%4DSrKkd?>QL*,%<;<-1J)&Vqi*pjmLMu8LnrS--OW4/&*@o.VMmr"b"[4h?^j8@U(;LQ<Do/:W][YkBU#CTX;%^)BV>_7&,DQD@2
%bI>%B]a`bU!I[FG@/0&G)pRK;P<1a/q6F3'lCYo0^O)>)H!!'i?3-qVHO)OQk;S*Y[>U=L?H&*M<ESDT><$=]See*h1L.4\c9H09
%BC0>MQS]+Og-<=KA%AgG%j(@+YYY":7CRhMhr9H!/oOdjeetU7bKGt;am,o;)f(GK*[FLU&t\Z$f,n=YZ<A`Kroc`.IIhG=DZq6O
%(UbN5R6/]Lp1D:Yj'-!W7sSV;ea&+T+>%C6G_qS8O,NHk_</l.k73P3Ie5?#GB9[i<IVU<g/opXK^u*i^U*TRlg<0REn"p1?7p]L
%mhQEE2ViSO4g=cin([t=@_FBF5(C-[4SrAsC[3qiG<a@S]=j;A0CIuJo&k52\8&F6h#][;r,A=:Z`&nCpM'TBh1ZMQo(DD!Q&gp]
%A.&pl5JD@9W,Qe?*dZ7"jJ1&U?ba(.'M'77pmq-Pl/on&ebr"`Vqgh4]j!YtnoQg.G>H931iM`cn;+&h>P^I6;4cSmCurB]q7*^,
%^5u\_p>W"uO#OSmD'.q?E-NG6h_qN#k,(!EKhQX)6IcXA0D/_`[WELYD3#]VURke0X?UF3gT8o+HUHMC2D=O.T5V:_DSLJjpp5<s
%(p06q*ce[ef@/)Up@DnXEq^mT-JS4S#*^'Le;qp1?Fp3lfXV+P_oJG)^oHeZHAQD(_2!Ydm_oFCPaLOP04't8V/!6a1U]^`qQDNt
%]@*'8ErFaHQe8T`.Y_O'UR1ZB,h%A.Q2Kmanj9STXgqcZ<GJulWnYQQPb23/\[Cugs5M#o$6*sDp!IeggHJgmXQC"2RjEKl#`@Pb
%76W?bSnuQ'L.BpqYd,r*N@G/D@"Q*4U0u7.?gQY+lJ"eo9:^\GKak)2!Xi?s/_kZ^A:pNO#2][hllbI1CrWB%f<QRWkMbD&G!OT_
%qJ$X`)[f"9k#u25\!d[W5/4a/a<0aj'c%]?aI.8"q1c6OdHtgDD&P,rG>0__:$0sQSZNn0H+'ulS:*)e)aq6GK/)i@J?nPNm^,'B
%3HoK7c1YW4oEu!?]-iN[FBP`BO0fD$M3gGckiQPs;`m$$VD\V]`VnsGFKAj1l5-WFP%tdgFRQC"gTjmsp)`X_dg2QoTn2MUo&8!A
%B666OG/!ae2j^'<IXA9f"^#0m/t"+Kq'n>so@[1]lNu^%,+%SKLC][rQq$KFGT%M98tiCV61M'P/'@$nHC_pEE5baQ=Bi@"`75sZ
%j,MJi@I_<3OBcDWf@QY`i.D@S\#53Ap*k^.ID/jtm=.nK:`I_!H7O13%<_9f=V'':lW4>%UWsf5BRtEQr,/pt![Y9X7AmA7=cnDV
%q[:5RX5MOnqVg"SC%'@:2)g8E+4OALgSa^WbC+X*^?M@5hg>*/48cO6HaES4h@Q4u)^J3d^5(f&-d!(uRd0<)lt1cQ<%qr4Ya3TV
%rW%k(pLQ[SIW+(m?b"^%7%8(,':]YRa:k^<Ti;hV&?"4Kb3&He#93KpdVJa^<rVpS@KA9t]:98P<Pg4g9\\r]]=1Jc6g`U@@E,FX
%E1;&DaF-^lf+1Z7.&",-<BDY"T6K#?m\cWK@64S8QK%H"bHIh7_RH_CMO`hIV#ha&h"3S[m(N\[d#R;2=KjDBJ\$*@Qp847\0K`]
%g5cUhQ0_,;S+>1-F'+RU6acd`d1I_8*qc^ro:Y5rOl1sSp\t,;@)%&>N^qCPBsk3$!c5R+nGPiB_>E!_(XKkoa@GQ'Dtbg:2]$T0
%=T]qkk7tORqW_D@GM.NC(4ZM\lri;CrFNODEBcMPbqXB91ugD4J@=<:^@7i6V4F0<rpf1=e)T5qr4.$Tgm)DU$.`a0`1i0dQ<oko
%=qSoYDI%Wns&$iXCc#2e>Fg(Y-rJ,/G&Wg%DM=GQLZOeq>'IEMm>knlgW0FCUe+ZYYkO1cW34"-^RVusJWh)i@Sc($7s4asfh*FF
%a\fM>24,Q]Qh,o7DBC_#nUo*0[In*JZh1UpZ-IEPG=S4a;R\cbVqot62n]HMQ0m"7r]D>bp!_q_HCFO!]u_;GpV+`s59='QH%TQa
%37FAkfCu_?^22YXf1!*:fqnKGL&AIiDa&Q?5CFUo_R=g^D!/]-iu8<KGT2X0H<i9m>"/`5++lsg0&2T6f?^%?:%T,&p5:#^8Upd5
%@N2jm?+r<IXh^6NZW(&2(W!_4ICPMkId>2r6uJ[kP])&Aj[_rW(A?8CW5^oQHQURLq6Tpa7hfVT)YhmHJ()H"o'oI&g\@4anaV1f
%_ZEs$E.>LP\c('.ouoE+S>GCaKp/@BX$%KC%39B=#P<8HQ#Bmi(PVaRd\gu;[aC0u\b_B<$5TnZb'tji\<C$u=;7i#&)Zf!l0iW#
%?\;e"?b!kW:j@`k-MEqEK6h`#Rt(G$NgK+Dd_<>!4C'G1=7]D/WjhHUlCX^a\)%c@s.VF&^+OVMa'7g34OXpfi@E)RbE8jgU-a'S
%glSk0>ME9Wnn(hNG)u%gQh)jSG?!6t0s-#^3%2U4/?]/l4XTH;iSMjdUK`#/]lc!D=q3!RQd=d`nqW98qpt?#b!iEHh@7cf2.=/D
%n8c3:H`MP[e,AZ(%uW[Cf%oF+WI40cejCDSL$EMo#2Ym<@(:?qG5gB_J&Q'b"Q#B/Gsqn8X\>>#(r.N6!ip[sI32Xe.Xb/9nJB;o
%cFW\^GV)RZhs*G4S8>G(PQTMd?:M\ip`f_D02TkM)H#-\*%bA6Ed08-&^\6f2_O%/+7YHQ^ChWMUbb%/8Pr]AJJA,!SsN:TrnkkC
%#i%M\Db(Zh]I.3m7^\AhAp`/hGM_]K1TMCGb>W5J!:lWS^;'GdJ[!ha278`0n.Y`P-[cErrEoU$^J<egFsbfp+'Zun63Y)iJKK8H
%p]5ir;n18RiF`7C3V^sfn37(@f[?*Ql-HZ4rlV5HP`tc>?tYem5[%;.=AB(oQ13TPCFd_$\FQ<Y^rbpT>\$"@,((]Cb#K><3tg6Y
%0#='Z*<ZY#QgdI?CtI!:(*FC_IE0JkN^0f[=lHn$i5/-ik6:qY<KM?VOr<JE*YV4XD;k>Z/KCr!j-#]r34'&LUG<RY!sT:7"BS`-
%Gd+o5De2okHtifJ[%S'3g0*=rhL#?k0O/AG&$heB"p3E$qDM_(_*MJfi!Ab-X:n^cY`j462$=+d2c//rOK!nfcURF:IYpD+)#V=4
%g"addJY*J=mCr$mkVKf\j(BaO7jfs1#7%f'XZ)#R[sK"9mTKD^lJAVm"a;]B/3_.fItn*BnR-h0K>/HYJqP51USNN,Get4+IMCH)
%?(_=SLpB/#7lfPds+\T$!F,V_LD1('pqstZW+riJ*<Wd)'"fWsL:.>MM;aI'E*Z`h(ZVNs-`,!OBu,0?d";O1JWX.<i&2-N6?A7t
%@&+MHGAW6t:<KYW4ldFr-J_S,.+6@DY4Sr0]O$^>E3d1]r'h,W.][r(K9_B#lt%2=(j&PM$c(3[)M7Hb8Y:8aYUk5D)H)UAXU5T,
%gESK/XKY+.blZZ-1jLi,?/SW]b,c,5'+d.V<B*'-B"3(#%llm&aF7bQ%h4!N,V6.%K$nIj[I[#]ql'kY/,tQg0#C)b])!tZPq#We
%TpQ(S3fGQb.]T(@in!'Y]DrNbi,QT`<HHj,Rrr<:rlr/Y[d)+@e3".4j\DlRMXQ,CYsuFu/9r4VnR]C:%4e1Y`BE^Pb\bonTd-#P
%nPh+=/Y_;&Z@R(II9e^nn-BP+IRq\FDl9$KqsP)6?8C[gqbVKPA\;I:FXP,^L"h*DGl.?e3.H^P,\Qp=Wd`sr5$1FfpsjKTb&r!e
%J'15E(4K$SYB&rIo836(FISU^I+VmBh<u!.*3K`eoE-eIX/utpHe")E4cn[%2aC-3"9cijAqL=T9qhUk3(dKgOoPnUQ%RdVTEN)J
%1JGBO+rCSt+1=#Z#GCEhjcKZM7;[<RiZfEW4,ID-K4G/q!C/_^gWC?X5e$e:o]u<(o"f>ING!=Ud'_t\Y(f$@Me3=g%2t%,:`s[>
%_*F^\J:K=I_90jn^_1Sidk&ion9J[I[lfuETQe0sa.[cdAQY7r-cf.u-OlKN.tp&u))-lbGi<P1L4A+o3*$#?e)AF@:lkEU\Uu7#
%SA7q;p\Nf+Qp[2&B\aZGdHH1*;)cD`"Hoi:+4RY.bF*?$)h;<N-%SK)$-jPBFqS+I3%UON]qDism]_hO^gqS7JRGLoO-3]g6K?o;
%/+?&ok&0R!==KT>X#$knWCttM8a'<P,f2dtQ_T;aUFL>_FQ3/NW\OiF,29PfWAJ1tR>I3if_PR1>4S+T*%OT;Rn'NQiEGeUj;@SU
%BksWra'CjmK6nhj5FnCQe*>'@1<Dc/PMk;kgZJEJ:&,`u0T^W(fC2_V+LM8mLgW;G&afW.0)O:P@P8Jo<H,`=d%QW-"PCj\qCisM
%(cH/6b=;qAYg4grdflHN)<<:F`'/M&X:N%KY`q\=@>g?laD0tL#4;dqpdgQbO=f?V0-=e2#YbKHL)jre&'g4LYf6pX"V3?kZs@_#
%d4Y_2i%P]`;[Yc#'_jG$_#fmpi@oh9XKnM4Pm.SP!J):7r91r3M2ES6"#&*3H,./?AcO4k72AC&)DmCB!'S+!nbZ^+fFI^ti:RB`
%<T"-&JV43TcFOkN?tuOU5m#(>3,ia-5Z8;[(t^k4"_ud[-r@.d$hu_RD4A=Oq5i9=(Z4?jJ:.J@FX+9T8>uh%/7p+8f9oX3&(ZVR
%<$T0\e;$-i^aqGJGYQmi_gMBB2o0kf%B\Oglh;FXE':HmJ\ArDT*$8;PV=Zk5dLUC5M-$L`PDp`9Rs5r1L"N/%c%RqKiuh/:LK[-
%J7)=8G/.c&li]4t!:FkE_gokW!>>Mc8gaoM+F`h8jYg)h"'`)BLdm?@dBFnOK!hmI*T)\35bjBF81g>!!/Rl^Md"\!lb\NBP]Ym6
%Yf**SN7MhJXB@AVHTEsem_GdW0%eNJkl\s_a'JA^cJT+<B`]r?7%jS)Ck+m_l.f,,$LkF@h)eJdmI/(RD#E^d';VteXt`)G&_fiL
%bs.2)V!TNAgOQE.7*=.OC7FSp`\tVU6ETL!g7O]iW-^;/!q`!gA`*RsCJ[oXel=9M,`$+?1(Smj.r<tY2dG,2&-tnXA_RX[!6Yil
%Xh<%Qo;1#pSce8mU>Zkk1Kl0<W4t'ai<mR>(c]p?K'dM@!qiJqHB]?Q]>X5&%0rZRejG2KiMhQ9dV*5)fUf?bCsQ2`;B%nWCL_a_
%4_^S=FieY,\(_:\J6N5fCO;L:GQijB@#3Vo'.5If5BN3pe-'1/G`Gb`'u=epL7f8.D)7k$V@\Og>VreZKVJ/,"[EE^e:Fi_ZF(Z2
%@.i\MD]/o$/;Ko#>@i4Y)J%g\(i]V@%1H4EF)85@I1@E'9&#eBW<Fuc/Y/@%Xh]H5-7O>o"d@%FFY[nB#*a0K%%>58)^jPXOQ1Z@
%WcTN>k)MjQ>3ZM;=Mc\gn9cnr#meNo7TR#&Y`OQnKCt:^*s0#;EtkM23'NZ/aoJPkm5-*I?qm@Y9Z]^seu1k!Zl0cH%[5j%ho'>9
%["&.4\Md$C!7N3D@W!%mAI>]q!I+bKAdVth0j)@`&#N\r)fmuqn.eZhFp2hMdc8==OA.:M:FXMBqDnie?5pc.ISjoe!tZN#]JFBn
%7ND+k4EQ#tRI+\]F2eKuHO'.=]K:O;l+m^3FZ-()4;RBGBS"BU#L+QkF%ur7P;\rH[&'[u8&?Nmr!T#i>>M&M,+o0SApm;W`F?>`
%V2CR_+DhNc88qG5#a<!NliVY!A;9N<hd_gnW"O\S*iuk$_koRH0^@j>0(Qg/"FA-m[kJam@DWik5TI7lJ[RgZ'RX61A[[rho6?i:
%6DMcobX?`>4?mLEBtdF-Hoeo/;)IU\%ijJb4]9n`ECL`H_;s'kQt^)c_;o(`1F%Ni&;H*>4;E"1?&N"P,Hq>D$-[]&l"Zl$8WSF#
%Z&Sg5oe@t3)@.>-ZPI/RQ/4F%$8`=dP@W?T3RT$"a3]@)8l'X8'C)hqm+<;3LXF!*#bD1WKg6;eiK=mt/qDB^#RC07GplW+L-=26
%!sJ_\n+&Nlg/F<)D)GXY%5*NN(fkoAjai$b#MT5M>R9-9b%Cm8%^smD$Fobhn(8QFT\E%'h[']DW<`RB.!WjBJ%@qT"^hd0_ZS+[
%'@9Z)8aJ4JdWl+O8B58/O_8Lm:`%V>I[D'r&8W-\HH_sJGaWd&)s7+nV18H91n";QQ9SLaKHVY'<u,O,YQ6;Z&pdNJa$D"F@jo^X
%H5fH6<KG)/Dqfg&l"pQBA]O:j$QgXU:21l$W$j'@O-p`TCGcZ:Bc]a46"(_B'X[%B-#KqpYZ^JjWEJ-uMh2!9FHfUA$arq;)>'Yi
%dET6,fgYY%`aE#f2,r5*!<jY_PO&\f.")Vj#n$AK9V>rPF;DkXVFio+Dlhg2h1sZl=<R^(/HQ]63,B#[=YOh&%8[Fl!JJf$Jgpb[
%jcCqRTX?*KcG_*g?thTbQNCIV.F(S;[WQC!@i,k)L!p4R%L/Wk3aC:!5^'GnBDK6c-@pIOgd2&PjpX;Z4jAiaFq0@p`#&oE>"B(3
%Mju%EDKa)`>d]7&!s[MF8t!DGoFJeBG/E(bm>Z-EHbAkcpRiKH[DQT<l'%1Hgocp*GT`]"*t1M3qFH;%%n1h'oW+HE.#,^)*VVOQ
%0kS2DBNmCYB3Lg6%JRjICiBgbArG'Xmsg,EfD."lH9iE]NahiC#*O*='u1sJ=lf?[V;uYle?W4f3<CHLa5'"@OX5_$0[,g/EXYpZ
%T_L"j_pF%R!C8D$8NJm57ZAh5##.+L!Eu)EFtK($P'%qh6YO^6F\%YFN\=eMOu+^<CY+bVJqg#&]S"IhU0iJ8-dYcM`.CL&M?3kp
%]G\[CDD4X"Lf"CgJqm_F3$c``jqo@]AXj\'Oi?`mTF\i;bRBu\X*4%k,ci^Is,NfVWWS/hXVSpQ\PeU+0"]@DqVJ$.#T*gV%+&Eq
%T]CX;KuI_V/fR/;Y@Csk=/(pn_.TeUjJCdd7K`p#N!;Nn['>BX+&L-kC0=YIJT6#"!_drq.J2ECSVO+NOpMTi/[glL%`Y%raKEHP
%48_LlXDSbY'`rET-X,"0#N*W,G.AaD&"m3tZLGBO"4$@Fr84CG;4cNQrd^+5b7Nn8!GGc^AN4oXY"&d,eBb9Ak+M9.nmcLkTK[#d
%@5&NXTeW40a)"82(79auTG1Aia/LOi\)=OuL8cYq<ej>pEtCMO(r23H__VL'4uIjc)Ob^W-Hib*LPVO=S4B7.7^hI9:f,N-WPB*l
%\DZZ:eQ"?J`<;Uf"J8A-bUD/9e>U*b=U?Y_&.-7!ED.Yb3,LqSD_tLnhGWUD>msoKi.P,gh"034$QS)@a5u;ScXC#hr(Ycu5]FIT
%La'em<]<&j/Aj07_RpCE+fH.jJY5:K#27Mr1uA=hBjl^UNb$-9Ho*7ZQOkR3JWtOI!<uiGQI<)I[U5](*Uo'7D?dn-rEMf=T1:g_
%BmhH0hupWl!4QAfE650S0r,I2Tgc"?IPEe%mKC[/ao%+SOWCB&k(=Xs2"Pd3(VQ;')9)]P4Q'HR15t?V&6VV\1;I6*[*nFug7]0A
%,j,bqG.Z0SOCa86fK*,FA(!LUo,bK'YXga5TEm++An:O.*N=/nLV'KQ>e.GG)Y<<UY42N:3&V!?'&%#Fqd;7<?oAge,7G8X&=3Ai
%_30L-IoOsV0d4jVH?+ROOVu<&@lB#B[:fNbqJ25o5Qt4XTgfJ2%NJXhO(<\P2R!rg1(+nSrDNs3S(Ib0-t$[)ltb3-RtCF&TF)tn
%M&,m.@qk:;`.<:bg`3I$P*MrU!HsjkGQ;S!Qhj$MMB,Y'ZXMW$C^X(sg]4E/Cf%g00WBUue,rsla>*m?'or`j!R2sB1!IG_dK=Cl
%L'3Gh9+Fn4'LY>hO5c)J'JbJP2`&7_Ck1_tBT=Dmc+koK!Ggq%94?$H9+2)<\M4XPW`HOc>_>c1C:K&h;0"'J'-G/pj9kTZ?&,L(
%,g<`'@u910)1"UEkZ"J!k7"9p>uJlX[^F0BM!GVF*QaHJ,eL3b#<:@N2WmN*bshg9iB>:J>6Y:q$35<D^aoKC&0.b4B`fQI%`b'd
%:\&b*`SqKQbq7\1jf;9QKQ&[DO+P3E+J.(&)R+buXnj(pLlKr-645^gZhPLVZ!liG+E?fM]5`AEVT=N.]!MhVk[L>g`/tf!=i=%C
%"'_B4!Z8t8A(EQXk%K0?'aK*l!0%+%)^,6?B1In4,=mcDKFRQAU4q[7To<D1DSa2R"sRL(@_@WX+BVW5gUXaYG1^oS@jaI\Z2b/O
%,N9K?5T40k@X81LSCl,^6Sc1<JSr83mDTN*%ND_I5\$!hWUSQ-!Zf(?Ma/m$5h.#TQYu%3"CYM^GfFB[OasURG!-aHi2JD,qL#$W
%c(a9WCCgQI%AJ/C96r4;&O8>A,THK7A525jC^Nc+iOZ$eYd2:4O<cE1CSpmf%E>_*(@eU<4:WE@0F]:`-@lj^TA?bKE,2jr&NBQn
%Ogp?:i;!`2IZhZ6Nr\M1[Fp67IRcId;TG$CUBq"h*@]r\TTEKHQQ/.pQmU-&\U`($@1-pKP%;I[D>'^N`^CEV,6/<"GnTX!O%pVP
%#acFMp2jtH_^*"t\HRNf6<^a)`KS>C'*a%;?;#i<aVl-hcD;D_US*#VX+N&CYlJaf#o#1-V21p_AaSF_)J)SXD$-F[/@rLT;\0X!
%1`hCJfpU;)LBGIFb'i4=3TTlW:mofE$;HW0^4l`r&2J8Sm8NX>""iL%bS\A/*Se]<Y"4aieaPmbW#`uN")\2^B:maEG7f[..,1+X
%6$WZ(4p/EK`Fa(S7m]c*aF2m4`MFu?C0`[?0d1$XNtR#n?p&c]W:ieCAk^PbnfiB:ll71qnL`#0=FnKf,9eZ]1DOt"R(ML+&X'SJ
%d.LK0glWmm2%,->:UnX&NlNUe2QVJGmdXG*gMGl$7GnFl0LK2$#hUCl>X96"9"8kB0UEp?3Gf)Z\7^a^$\XH.UB8^h@9oB)^HoJK
%>aJ717K0!?[^5+7gcqAD]2;Hu"1Kjdqi/$3%=\cZ-!fR?>9aL1cWf+*;AM%nlm<OTBjB:-Yk7H>ECj=PN?p[["[S:i>6Q:dApY'1
%,b>CjVdo_'\-:1[Y`[d!n;[it%6D((J`CIS_P%Q<Ekhn?'F\6]:K,;!E%8FU"DkLJ)!qt@"iA>@*t9(mbH">+S8&*Vj,5,QqH?ol
%iAjR3Cc`E?G`7Xc$5e>Fc"r&'+)KQ]Mo_R8LhKOd^:"k![Q"j)PH8!HHl;c&!iO!SN*o91=u"Y>F/"F)UMPsC4E2gd)W:=`@:;bg
%n-paSc@`YC9m<5c@??]n)8Y@"Nc",Z@BjG6Te4=:dK'&K\rn9DGVY</#hl!+HO/V0SS3$nSf0.`F^gCM,7$?=!__hL^=/PP<O%O]
%:hYVV<d8::J=P+u)1=H[Gs`!qn0pN+K_bBcn@HRc*)`i,`P_sMl\nX.qV$T(CPm3IB)YrhTM`X-Zbp%'YpfqhCsCnI3\VtsChA'Z
%?\4IJ#duQS3iEhi(bCAk*%ccX"i\U"g(J,q7b.i<S)+L#NI[:SN?ZYZaUXnu&QY(^"A*K(TRj$lZu/,r:`*3n-tT_'0FS8.fEt/D
%;jNPiWkcuK)$1l&jY3dO*0@":I@E/<fZ6?DnJ)1AE\T958f;C\MmMn:SmMsaY#6>(UTedhf>DY%fbVe@$Bl-u;BJqo!-^:U)>('9
%K"N@h7&,K41a>(iIH?dB:mNC9gp4Hn'C0jZ2AL$BDH*?\[1#/V=R"'G!M5s[re9>f1u'SEj+(teJT\pg[oeTb>gMV3FpS?jjJlHL
%f'S"2Ar/`sL)oTQ[(66M"E^QFGnsYp^c%,4Eh!.@MK-./@,7+nL9f"RjOn,1\$:k@Yr"jLUe$T&SA6uI;/Q37BcL3:Q#:0F3>Rg\
%m^n)Or<ekii/U\8[An(0E*[;)^&]`7M+9Xq-Nuu_I.l*=%bnjZJgPMJ=5@oMO9$hrD<\V_3j6:l8SO[K"O1>;b['>jl$WPN<!f.>
%%`(<e,RFD5)1TsU#nQSYMh9j!Dg>lMWdp*>C3/*;f,JcU0S):`X^+['RdhnEJB"eV#QsQGS\4RA\gOaUE1cMp<1up.->d3b+8n=-
%Nc8C/F>R(pkk%N3m$>d6Ws9-=og7;Y)ZoCC?(6Y.j.T^!\mj^+jVW1=]rHt2E0Fg3p&%oIXp'n>)$gS_CNd&sBTm#24H>XWS+;*4
%U9U+2cuQ!#!ZG<98A4R(qrAt<?:^4`._l)h$KE?i=o:H7)Trbp5Oef08\Tqp<%TMf/2)_?3[cQC,I8"[?tH#".p3Y*p^N"/N3Qln
%a5^]f6@6mb_=*#-_HsMociFh3iWDA0i+$FgR)0.HO09".8edET#-(%0WXI;H[PWrp^C"$lKKm9\4ni7k.2>c`Bjr#!L^#Q2AH`i]
%)?Blo&SP#mFS_1&d:B0MG\flaTJ4r.2p@(c9?66N@Dgs0NQE25Wa];d;e?;dBCZH2GD$Rid\cf%6j,/D#-Kcd.^&+F1UBoVUjQ2t
%8:s>_@*D*N;C_j2#]=8,,lH7E>e9TUJ#CeMUZaaHk@*bYXUjX2NqB`EO79s8h@f0';k.L2m(_Jh5;$\=+I\K@\ulPYdD95N(J,Wl
%oI(ctQ93VJl#KGK`:5PHc7pl%o@<o7kJcP6PR&WZ\4CcZkf:Dt`HD7d"bf=fLk,YdUSe)[Rn]C.Y%pdCA)((j!eqP7/Kl1j,-M&!
%#dB@MNfAKJgFIGJQ`a5>aYO5J$[jfET,3O9iE*iol[k<BOP,Z%#o8;G?'LgVcQ\*6oW:DYVEcV,TSS^WN#h\(TaN\YQ%i^@+g-h8
%3+[el30HrneC+nS<g`dBU0c$`U`+C;8.Oo`]b#I=\n+ZU8a$enGoSQZ,EGg0N;"5^/pmffejE-$"a"p!^_O8/l4=Y:2;mb0F#Jb-
%,o1En?`gC&d#IY)dth>7lNhY;*OGeMO2:BITn'CbN0suGHeL)b9!Ig0e)q#lf:rl:@E=qXMhtc$6_[i59PO`b[`r619Qbuli/+h:
%nY$N^EL@h<Ec^r7ddZ=U>3,LJ(0oVX&>[D+]JBnATAmFa]j_3Nfoi_?K]n^Oi8!N'dJs_m4ZsQu:b&i)q,]bX[h'r9N.[BF<Ys6:
%-Td/DZr9_-NU$l)O+DEI&fubg!1=%[9JSB7A)Mp];,p\i?!nj-3gf0++SO%7=C,CPiu$'!?p*&WH<XIl+:qM[A-":TT"qW8eE^>M
%p;c/3X0A0q4'&SM\dUr6r>Jo0Yc2`!%[/b:?^X?>4'gX&?C4ND6S7rnG\UV^J2a-RFM9riJS?q)la*-?#$PhAlgB)9"QXB)3/hj,
%'@#eYYiCtYK;#*jG?"(?F86jegif'+UiJmmG;]V.G$&:'@RNjZ]Pu<H3Y=PUq!.1b!Y2rlVSPk3F,C1N%s2D#P7r2T!tR/uQl,Mk
%(pHG#Bn7!GYe-ECaYR)d!iJ^!.W#;2Ce.#b!QaF7n=57c2)#;PF#F-H9IQob`,$6Ue8XA*Au?J:a_HKSPY<BjO7kUnTMGf#\K`Le
%-0R*A9F4?EQp`HUNe]TifM)gN\`JK^Yi7I<NqN_^7S<eg(24_<lWL)aOq'uYmhc@TPc*IM.16Qb#^q)UlI7@G*+G[')JC6%=goM-
%h]Fh(<3B#`]a27rMpFOHkYoqRETHZ*2cZM7W)DFQbdRdKWc'!cea=*t_qY[;*6Eo2G\<>=*G0tOJkrrc;MQ;<dpWjnP%@<Phhlun
%e3P8uXFmE7Gd;b@d1jACARs;LF<j+J[ZX9^1";j0jTnq0],8@)5umIUoI\AhD2M7(O:j8N"A6$6_[qbj7O9b&7<d9iV5qXAKE5<3
%XGuZfk*3%B?mm=pfaoZQ4eH^WMf0t1Xb8,@#("Ks2AUl=,3B"9jVi%Lf-;U*cq-,6/r1G)nf]+!*H5@&%)nqXk!ZSToatYl\C,=2
%ndcg"G57XH+)CB<<J,OhgbC/nYj>(#b0)>)??,.sqDCqJkaMk[>B[@6[Q/fpAM%1WJS%(m&2E@G\A/G?XItY5,n?0*]7SnupVF8g
%nkn%O.siQ&\H+5uV1lb(J\q^fcoI3M#R1M$D.=TrM@NiuCt$i[")(#T7O<c?Fj_10&Yl.+=sVhU.KqUL>lK8u(12#d!N"Y0'f!lN
%`.N1dO'gD&LaQ=YidPt4L*T0Q>]PBWcO"^"rF1%W>Rq&"V&'!"^KYnRJRQBh&eD2)bpZR$pBBHdjP]tP+BA1N)'Ja,0@iKTQpd$g
%FTDog.ieJ;@>aId,+u4TSEmbf"t22Q['[5D.aZ9lgLW,)lhu@c(1I<IfmUT4mmBJZJE8Z.bCnB\J8J,6L)t8J/:_cb)*d*#gQ.5g
%HnC!sjchT`fH5XHbmFQ(Nj3&5\R"'@0#d6u^_Y'tTjc+*_L"D!k\D"A.s`:7osR?"9;e%+4NSIcRKfBV^BeMrpi]$+puE4[/;O=R
%\AJH8pp,<6e*&igUG4DKoR^N%9qY(^-rMPfqY2VM/_l81DJccEC^*M.V[G$9F>=Wl*0.pl9X2<gpFmBD._V&`.:OK+>[PeWd<[0H
%^rW-dR?g,u3':cD?:h4e-2ESS+Zf25?%EH`LS.I;#S!\aPlO]!P$npDB!fd9A"%Lu!!%T8;Ji,Cb?cGU1ROdDiZfG#1<b"<_$ub[
%FO&5sU@G#RGBe+8?V$b@1@;K<a-'E]:E/aTF'O-r6Rc:TJ,t>=js@oTU4UlZ`?fn$`nWGn'bEmXn_$aSH3d_jF?K-Z#JPr)P5*TT
%(G[[0S9k>&CMGQ>K4c0l#Vmm:<<?A<7j,%i:\rcF_8r"Z(qWMQ<&-X"gK91s+3N%*LIF\*E%qN4N!e!OW"Z--W,!apoj2[8A)OM$
%C^P#G@<-ljd>$<gAhsWL>>)K4Q*$/Nh`%EiKu#k)cK7S-Z8p,<2(5C,Y7A\`:Dnj=V1pE`d&2&@(2<nHXm29,S[ilf4/-j`277Oj
%f4)10E'ENT\rh_Y+I+\V4C;d$C>4,AWM=CH-(n(H@ATkH,U?Aa?[,+HR&bi[5!+h/=b2nW.e%qg.S</<LH5OfflmY/VIIe>/*S3]
%F`0=LlJ2=;Vrg4Q5dsfd%1bRp9mu93k+c$I&.J<Qs4DM`r7t;;FMu0r-8OT>R1^0ZG!m<)OVX90d4OI?!V5IU.dWH*W2'`?"aK>6
%(H_5F/l*;KfHtVIgWe]uYmGAWV4M0LA\s6Y+/'mgibB+uDj1Q!K>>h7BhJ]g&/^3kBt#+M_sO,aI?$J&>T/;]72;274.=?:5>]J-
%#rgk7XL]r$cf@p)V8CAlcNN>MY)UD@%7clQe:icQ%t1P+o/'^=Dus[^MT_>@6mZMY*4j0Jcp62=Fk'Rs.*_"&?'lmV3i%Ugqgo;d
%T]P+PlX7\sh,q""ENIMSa,B6;O\M+4>;Sob#^Gu5?ab^%@-bm"5SfSE#S1#Op3"dD2N,I#jNuj!\icN9D(nGk`,)&_cJlGMrK-*B
%R@q4[#^pVCfF+Q_4KtW<4B$g<3@:E4?:FZ^#%I6?.4r\+$f`=]-a!nb/=7VkSGYX`_ji-m=>^,!>]fQ;ZD](/)bHQ<K%FP!1E;n#
%.76Ih#>DR`0^&G3Dh*j)"n$&2lZ3L:Dj(jI&:nd?j19;/1j[,i*3+49\_\>W"8F]3(:`*Oe\5HG?f14$,+*SSK9:7>;1L.<1PlC%
%[P%"_KF?d0a6&laFJL#jqEb6RLG'3P]RL?39?W;jHmm-/iJdgY(OfdhJTHHgm0Qk2UR&AG3sB.Dn>+f@-KU_djRd^*MT)(]"iSe3
%!JMnj[WHiDe[M>^<'\fu!3Cm^H%Ahr"rr`E&.'^(:i5LO1TH_(>hXs<,5Im+J/.Xf;(2*((P>Nj4p01];LI&GMF#&q0F&qPQO?#L
%%e3T+nM%]$%$e'W@a?s(8<rFLcWFX(*-49*B.=*>%HH3GJLcMYgBaaT>A0\u;6VH6X,gbQGW<jpAe$-BL!j@&#2g8L<V&3d$:*N>
%e<`@*5J_Xc:L3e-NkZ)WD=XXpR&p#VnLtdFC]o'e_#u4Fa"8^/4\Zn7gSRObQ:SRq,Bc`lAf>VN5(\hS]XefH_E/fEG+gW7-CHVM
%<5>t-8\Y.l[_@gRQV/p'-Gh6T"q%dA38k_`!'Lb<o,'SRXb1RTWQ+0a&&kpO.Y>hU*>GTnRM:/>[5'#3G)BPQS;<&6k6<3q7V[SW
%1\s-F5m>U45+Wa9PR^/23`M)(iG4K[?o9W4/QRE,-5*"Wr=oUNb_\b/a3/>jcP=H#q!p*QBp@GMbK_[t9Q?Qs`a>RD#E/M19#P]!
%UfQ-kF;LfI'cC+Dm-=M)_L"pthMZuP*a`PH)<-1!T<?RF=R&T6"YC4eWFY$VDg\Xu"r1\@T$*6;1gBThPGie5iWTJMo;QtR!IaOK
%"e1c9k12Y0!@=#mS"j""ZPY/J/Wj/'Bk<+@ZA_'-bT!--OZN/pJK@>G4(TCQfF+a%$k9"DF[c]++!jpan45$QL:?p(,[d-B3TeI2
%=6\5*:RA2hBZHhWO'EtQ\]W]MjLDQ*Yg\#]6SatPlC(]rk"CY?V_Ht!@R[l^Erg:!T?tCo?XTTeFOA*oQ:inaj#oC'Ke7Y&Xs3nH
%([-,kL5'Zdq]GbiWYJ0a3t.N]Y&;hb=Op;,eMJE=&?,t?HDG`skjpD+=Q%N#_Is.cMKGplX5YBEO3+r#?7Ci`o+]Cc,+;[2s6[TV
%RMX+Uk6C;tA@ALh;aCIkjbjr!3c'`<q4hDC^6cp\!Y?83Ag];Ga7b?Y++cd4DG"8s5L9F!/:n\&mm&+&kI@bq$ua6DPA5*Q5g`'o
%H<<G[_$jTji!.'2:D[&MBhQot=di`0]urD94;6#64s*Q1&nb*ET>_t>R%aJiV6dB?s(/]9ok\aLbL[Qa@_Ir"2iL0CDus55S]Q+(
%S7I)"/J7KscZH+9B)rD9L$LKjd"P&CDZ=j$`=%+0.F>Q`dO1[j,KH/9@KKIXh*Son<W%6.CC2Yt4.!:(FJU.W"r1E+bMAj*a.a?Q
%0OenXe$0W>.$4k1a+-[%I;PQK*O&LbQ6dt)#j)JB?jYepc+PPWGGbuYf",oB'5MX@;'rou2iB9jhiCh_n2[q-FX&MUB8+HQScpZI
%p,GLieKKggZfWU7qdDphk]Ds17R*H:-%71sNt/@3f\XY?hU;8C(E@J3qu!D8!m__#e8nu1,$Tp^Su#PO8h@>,\H6-BREoj6d1tL<
%'FmnU<r$gV"@]2cn'K!/;3m5Ad8q62`pjTJSLm=(dN""<^uUcTIeOi\@1CH0-t@RJI"6:+^VURRD7k+^bNWIg$@6#erkuelSheb!
%=CAH@Tqh>rCr8RKL\DJu-28fjO2\VhDicQ/neHEBG7Z/Sm$(n1#2Nk683du0W%qs1>0L0+#+Vd89,-U01BP.0g&r^XZ>=$:q'O7B
%@%XVC`<3#;ZUWAHEde2<Z1<U.6fdp+2Naj.c$3N\Fd>&2gg^\$M6P?J.tuJu=00C4j(hPlmXuj_d)f\.,Lms(%ZaP6*,<B4g!\C0
%;;Oh#SVgPuQZ;shpI8Nfnl\.\3]1>j@7puQ0W'68HHOg*rCP*C7kF108k],3'sV?<>t`+lLG3$,[kZ^ok5Ik/\!]_E==/MED%_'o
%'aiV#Mroa4=uU$Q%bkWC"5?Zp,/IZXisNAobJs<ALN*K_5[/J<#6WTq^;E;R3f&\9^Yimf0]7sk9iW561tA-60B,X'YXhRI$&QJE
%\u?LHr-V#%auuioM_AkNon>Ld*KUmRXAN5W:NmnjG34\:%.Ld<h7YX1lAl6r2W'.@GCAra+6\dMUXN=$lmm.^"FeXIO)P7ZknGfA
%0M=jri@'<AoEHN)8oR\5^(WG5l!r]IKe18%[kI6q0FA8,Y*JW>9T>r@nLF\'\jfb9;j#A2JgmL6bB,bkLaRtC7DL&OaLCdu>5D(%
%9;5Q2]$Wr*Qn+h^e9hcs^o&(6>G^Hr4N_*3bb9CF;tNq\>KDT:0s0V;_5<:-Apaa;&'Rm1]MVc#bro1oiTa@BJa8\M"$DVo;6dd'
%Du(bIe.:P`I\9L-P@&!T>F,8-#Y)rN>m39B*Nt?FrJ`jbAg&%ZbDuf2'WW/?.X'PQDS-.F&,]:$(ru>9gSg]-nEQYim;$7!%j"YT
%W^DXKJMJpuWg&AkRMK^R_TGsfS'at:(IMWDQ-C?"rD"<.]M*`97eJ'_DlGKCi(Kj0rX-](Mq3<f_Zg5<2Q%Eh,B;s&nM`s,:j^mO
%I:J]BDBuB:hR^G?94Oi9kZi"b]VW"LJ#N2>JdSt_i4.p<ARu#rW"?+R;4<%Ld'G`'9D)V59deI>F-2e5)aipp8Nl\.nL0][98R7(
%+/5UL[s0Vja,j8J-`q@I3a;54m5RkajoYMrkSO_6CJ?BWHpd,5%%WL@(=7W\0cWJ<3ao85EoL;]>`4OfN.W"F_30,b<41Zc-k45P
%/iesUdg4h2/R)s[9Ei"$ROf*eZ_O@XEF<81F7k(aa#2K689789[@"Mg3csu8+bV@oEt]=3;iR0=qenS+FO<bCSfGK6(_c(uYN"K)
%D0lIIi'LSZ%*<-2J^lfOB;$&K`htU)_F+_#$32^hO@^)sZiX"g@"=6^!E4]I/s-:VG@QVnVP0oUgun.+EfHmEG?8;"N;OgpKHkOO
%RK9krJ.9Kh4O-fsj0!X[."u26bSDH@."9F'48dO$Zj]/+Nb`;l,phg)*R)YKo6m%@e=VoP5[S]X/1nmshf)P\csm@Ra.%B59)l%4
%]mkCC[JkBY0Ri;AUJ*j`\4rMUC.st0JM:tn(Q/i$\/\D`$iI9^obScuI-EJC8:8C`U"BcIgk79a+eVf)LW@lW8k3U"@@ulCnRG15
%Ns#qekh7Jug"rIu'3R4S<e[qtE="("$7*$;,UFOf_-.?/@/5uZ)RaQLFKL]\kpRCg;$W/"3'pQ^<RO:^Pf%-Bn9,8e"AP,;DW&28
%qE)fV/t2LeXplYg9pB8P&0@AUZF,JN?rVm:60J8dn*4(..uri*i.&6iJd=tmolot;e:;L*ndls.%7;m*!O%54ReZ?Xf321&cFN\n
%S^G"1+Tt2fSiuuCm]Pu\Y$/6!Lcs8E4SQqHDaZ`\@?G4i'ot;"BB@dsco4"7mI:.eIVi,HY^j'3aYe$!%GdJG<k/mU,_/b1%g16?
%l/Mnt6a"+ia.B/\*hds>@N(=HG+T`HUJ+4iNQlM`qscNmZZb!bI*-2O6To6m3Uj="*kLt:'\>B5YihB!2J1]/94[UCjMRe,X+#[W
%dZrbLS/i&,$6=%QkhI++8]!2/AW-1`_+'Q4.Y-Nnl,J$cZUG\J`,p0q(K7F:Q:rBGm/UgS.SVdqpg=n!A-LSHH6'H1LUdU]&")i-
%d&<(+rIFi\D%PuC:B'bWL8hN"QHW8_^dEkXbo"VMn1h+\!E<Ad(3'-j.q#I-lias]:@39cP:),b^r[ZF-',h"fMK.da/qhfUkBqa
%Y4I8EU@QT^O77QeF$.4FNUa,,+pnMm01YXYp4n2%_=o?$#(N-p75If0"\Lf,J5VJe;k#.@C`!B0R@VR'^Xh%uD8*HVA3KmZ'^^_3
%efNSr66cEsIQO_4`Nf?lCBTOLBHDlZFm%8Qh3n0tj76Uu`Dp?%dqd8K]aqBQlun[;g<ITP@lM0d6SteRV[f=^I.h9Pf01105Q@@M
%r@s3'l];"m'^]"q-jk24MY</]L=LcfMY=O>mY9c7l$Q,s:29u4ZloCN9,-&%AWU,eE7Z[E9Wb-!G*AAP-&$61F2VYjfM3aTnoQ%F
%OiZ#POC,JqrbX$+.,8T=[*Ld+@/"8P@oa2S+E'Bm=eL]c[H8DT8`#++6CAP*<(L5)$SJD$0qc`_<2f4/+jsKR\SI#eEXGD$'i=EQ
%H0gXNG>5'ToKks+Osc":?;#?>PiZ'@7$\/-+!O,/+q@K^0rL(5+eM]F%rbQ<Ch4K#:ogcGQI-iE@;%A!D-l=h+D/-KkqnX4NYD<A
%Eq[E12,R'.Y.W.[c@3(RSLI)#[e[f^g<u`U-(sI^Ab*j`A]1P0j/S:MFU$FXh',R"ne82E:a*@>#8oV%@"J_$nANCp,N^Vi$R4+4
%8!B)tC;DhfnGmZhmI6j?r7-=4LklGC.Ur/s.4ddkC8VhdeA7E0oj5;XGAh]h1,Dq!0+_Tk5&#.._*7LS\UZP4ekV&^'WS_"dGi6c
%Wqma`MR8+rWD-6uOlJ7Nc6arofXe5R\m7S:Ta.FXEUbXWQ4+It!g2C_`CaOMnR.;_K\NA9jASIhL"0]DB?+So4*qI31u7'G_#^Vi
%p._VW\g\4pK$^H[@L]sPP1IKM%Y4c:.agd-<<,?*,u^NB6LBhkcjdHLXuW^.X;94N4pYB*@O/8=L\rST3Gb[-PYG4Qj6dN.prUF$
%h=U^C$7ii;b_go0N*Td9Y=Lsl[:74*.P-+.3i=HpT^M5*")5hQ.n/\:[flSi!8](EZ%7;N3$WGk_1gO"dNk5\-^9r[;TGA@[0B]Q
%os]N=ZCH`.9mkTG#qU($"7]]@^I7aUPXF3t<1D,>be2r%*l&.30TTViU:l*ABK!3?O,-9>!C6saUX'uF+#0"dP]h+b(a!fTIhKLX
%)>n2,TSu?LFn<5s&YqXG)%qe)M1lYZlTqXJSf&`f/>+O'Sqoh2M25Z&'5!DZR)H1;F[MR=jp<HhD7ou9/Yj\\Ecm[LHo7no!Q19V
%=CrEZ<GJS*3bFkb%ZG1LZOq39Y!dIK0>bA))h?9-7So18&$kt9`!'/-aQDFQMfrh:J^$t-#ZHV($@@6k-mQhcT)ljAR^5\r,_6+I
%Tnj<uF1p(SKKf\(-kJW6ZWJ[17@42M`>.06-9sR?8S<*3#Em`[!#_mrI9BR4HN:%E8q]Lp%1Y]PlaR^q8Kofc:ri5ULu35a7KPkQ
%6FdSi"OYeBjmAadmi\TRjKP)jSKNB9+np((;I/,rXFCq(l#-HThfZeQb:akY$Z[C&6@..6`O)q,=%A9:fF7Al2[1EL7StoS=%rXL
%-WK29Vc>%bh'=/]-mtS5\(K2(*7f'Y>]:l1a%8]o!;;jS]:ibHfQP_:<i-@obI1Z(@5sr7#VmC>%[UNo5u;(CfKcY4mH^ZJSVKSu
%4"__>aZ"Y4-YBiu@9ed;+ETsR.s>UkAX/&oE0BcQOc.beX<gd9--3H79K>H58o'Uq@/*UG9/*5Ll.a[7p@n+7#BY0N,68fNr$:n/
%m+LiPa#&<N#X1c\IfUSlBA[]N]7(oDh6%@RUc<SGDZ-<#NM@r3b=7W@;X;<I)rk7hgD2lp6cjC[d=%e1U,SF_1=uI*L#e(p^B)Fu
%r.8P0e*h@gOeTG5S63L*-,^JUHt+NO-!#k75pQaeBJiJ5N1g*pnd)KDc<V2Sk->TdV9l9-*iE=[,Y!m+3Gi%GECBj@&7ZLK*J17@
%\Ja,bnSh*B?qDFeB+F[tIB(Y`ebC=VhmFP(b;];):oWbNPdQDhn93I\h@Sl@d36\oo?&^&<D-<9hMk:dLs/_0$rH_/cVOdAk'"5s
%9ab)LLI2:0:lQGFqUTD^&*=]_F]Z(]&UndeSRp(IG]%p'/QFEI^A67pgT2W53E$<`)HWD3GBX1&,D=tM?4l=*/jqHmNP5sB[,&L^
%COu*orPhu=CE1p=Mla\5[>^!4/LlTbZPF5'B3ZJSRG%9Vj2,sReqGYJEoSQ>[)&ua'UTJ7P([i%cHDY%;HaBZ&b.B916a3JM8-%H
%iE(p:&;1^n\I&TmmCWZU\Qg1EXSr&(SocO(R_laWmQeX$FR;[ci,Ot!;G&IjkX]?eI/9d/6**^]$F_l)P(ROE9PIR?=;LDB(U!rR
%E.`gpGUi89[S"Dc2tnocD8_'`>$SN_DjT[>Wk>jhOnXFTWReN.V',d'PCX'Z-\A(VCi8]u?!Am!pG2*9S74/#;*-<SRiYJ;C`efJ
%7\f"1_AMt.e74Crl^&:I6huc8`f!9O.kIP/Wk`(D/$[:*Q@`GLL6=>a;iU=XiAaKfkd!1g=Z@@Il9l*C-gjooWZd!L9:lKos12Ys
%[)PfTYjgXF!A<Hq$suP9";11(iP&@I``ON95m4de(($h(EAPDTC&!F;5UYYu``+M/\&9V*h[uoGo,+A25j5UDqa04+N:%b++;oc1
%/HJFICYP#+>E+O2>V9l0n6P]Qj*`GkfHu.VR<p/28E]9R8'j<;@Cmq*NVH'_d;Nd#W@PZ;A_5bUlM3e*;uK!SPh&2QGV.dp5Z;5?
%7Lj.:4k1iZ!>atMJ1gjVeA3etZL95kg4O9$k,C=14sj:]oYDp7UpNfH'?&L.8IiCVIG;mMfFQ]B'KqT)GDVnZWpHgJ(a[/#4K=&0
%,tmO*,bIrUW9*gK=ZhWFJ%Zk\B)R[!hgHY?,rPEM[pc#<_#d7i@`>LP>5)u^DdTtD510@ch.#_b8RNVL.I>Jd4)_#]:u&NLT_iuU
%QgR\G<l-@ih-=B)Q4XW<kEDJp2R_=+,lu7C%toKP/#";o!T<Ba:,?.Fn3%]-="<#Xi:J]J$8L,1\GFW<XS3dm;X.^9#CJQ.C(`/[
%<(1`[#^]!]hqp:[:QLiCS+fD<iR#:WH?5^`iU%.>fT[6En`r`$h!Knq\nK\RS6J(]9CWr8s/(@krEcZbf9knSR2J,&]9+j'C`KUb
%lP&cEa#eV%/$%6W66`BBrWbDN]#ugqlXH['>9X]Mj)iu>C&ln&B5:MMi^nApC`+Su^.F$X3-.]M&deaXf64<2hRCm=d[o5>.4,$X
%;L'sTpW*3VB)HB)mD4_;o4d-0hh!3('t^\'-V5Eh6+==q*:cl;lU&:-BJP3G^Mh0MZ>C2-[GMl_Um]s4,1F:sF,W50@(k$#kgS,6
%6jLph>?UN?H]j`a!."S]`'7kH<UkVjA+3S_oR2n^QLXggqZ"qG4V5]TRK'i$4`9^RKYBW;O7BlSaoD0NqSf2>T&*.3SU<q0*rcZm
%o`R6UA'T*=joOb-$5_f5]hTP1=NlPeJl>8Un#.Q'o_Sc!X3>tu?<MMqE%hu%'K'3<ZSrDO5u@qaS.jgg:hg-3V6'#/EaLUhV,/1L
%/TAVNZ?+n;(S6d:1I(reh%[:5L#(!,a+4):e@&U,Mnm'hQN0IR=S?4p):AIQ6@V-,rY2SFi"*t2OSQg8hNFiS-K$QH3)K@[p%IY"
%k5u\b&898222I"n0'@4I_jd.TZmo*8'Bo.'8";iOitu<3r<puNK(5eE+rko?2BL+c99O$P-,/mG1[)j]@0c;,3k%5Q!q*h)-+"/*
%ZNCGsL7U[?9Tg-iF&SWQ3@l%KOW?\QJ@P6SOD\*F@o87+U2Uk#_]EAJ[7uuULEEYJ(<ScV^"@o\j4k>:T*4HT.%BCVn.U+$b#(ss
%Z^OZ1MG.;X%bbFq_K%%Poo/VHiOPh,Jt?Vc[Bc#L?BD%e3QPAH?,IcU$gf,s(sF"7-BY[n_;dLpV0:>sV%u3Bi5[Ld&c5E.gHl>c
%8&/C.aM36-K5r!Y"\V#2@nA2-T3H)K1^SPni?s0LWf@;7K7g@!gO)"cU5Z*!]"^O4:f96nIrsEp51TB?hVV)F/^"m]d(XUETj1i\
%2iR/S67iRONkm;!h"RW(A[RR6Ts$#RJMgUYj%b6Nn(Na_JOQBJ!%0I+l/Q4D;n1c0T!-fGRlOReaS*)<@4O,[SKjAf_r&0!<1FgH
%^k'W6<\Ip#11_NS(p5'=p65\,1[Z^Ui8lj!:haEiQc1Mu85KOAU)#'P>I!/U]C<)*q!UKp0LUD$+%`@4R5)l.B@KpiJ_XKrZobFr
%Q-aa$/aM80&44tf?j0G"!Z=RhY*L&o@?_iaSV5<hD$!A[=:<?.Zf'npLR9I&U&WkC$H!4<@;pR+J/'lDfZtC;)H"XX&6"YibB45W
%PecePTJ5<(l74\98#LT!dl1+*:Q<i?:W9dl*eX0kRX]8iZAOW_cHC3<@t[rEl!+rjAKXuZ0sdPJ#WV:c-9a8_Vb,Z6MNN*=Y'^`B
%Yt4g;#T<K4Gs\bj"(^VSP-Z1F[cWG8SGZ<i]u@k/V/[t$bUO8TmXSS20EeOdT7!B+q-<?]S9q)B:QoJ(GF-So7<pG!GV/F&.Kj)A
%RiU'8d+6)n1YX3-,sbY;GejGZ*Sn^%JNM(3W`45$/`:ZFih5RA1&tWYHu1B)6P=&nP[:1I<trV!B2L5HUqa@;+IOjJE9Ke6g56:B
%1[R&7=p?4beAOtqLh3+cKK'oCX^4r>Aj>+KL(f%pUeCUh_]Qj.M*mD\]\!p;2#%<k>^IUM9f`78OJWQ1c$c\DV'/sd(<^dC:K?HX
%<XKmd6o6TP5XgQ&Zr-pr"3X;n&KP!9ScM+N;gbD-m=H,TlFAD4'mpa@D:mM!b4uT.&6*SP*0oJ6E'&O:(eo).''p?Ugg%7?a8EfH
%X6mtM.S`_?=!*A(GM[3n7:gk1,H]V,7L&5=_oI+k=9-tj_Cd5r1"D_f]eW(\Q`>gX1e%9j!UHO$h?CS8Hd798YhF+`i\Y]"=FmO!
%0!nN.9;19;ME/04XPZiW,5sQc$.7b?29,Om0KdV"Gii:=%QnR$>EI+f@#8l1;;e84!^9e/69;F2PTeNCk!`?j(e'U^LPr?7gl'dK
%@gp<>Y2*9[&so.!YOY<^h*S:#d=]IAQ&BOm#Z=l+-hK`^C(PnVq].TY!Ol$K,+DVFM)1.Y6%Ih6Llq@L23I#@9*5#1r1t>)%N-F+
%f=cp[W-J[hFmP$PcfST5R0YL&>ZENX*:H#`&snO]OM:1=%E[a:+0t/86kI$3[g7Jb=5.g>a#9XJ[b0=GRTqHl?)VHR,[AALU)P5X
%lqYCtaYJ6]@JtT_@N*3=%4(M')Nd.,2[!'bZN1NXU2.E*P=q[d,>ZA%)jG$Dj"R5tUGh8:f7be>1qP[V)SVr#jA3P&rSmEEDglj#
%rj.*@r9Uq^rqbdUO$CtTg%"_)2j`i=^[UqU8&NB>[qD=]o9\4p5JDC<iJ0q@H[g;>eVcZ+I/`lD?bCd\SZfbSrkjY`kMLZ>]BtN+
%*.N,&e]ScdrU\d105eN$gUI2L$i\QQ#OfA#g$aFfmQ:FLRUqG0~>
%AI9_PrivateDataEnd
